Copyright (c) 1984, Landon Curt Noll.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

I'm sure you have all seen gross, or down right structurally obscene C
source code before.  Some people who deal with various parts of the
UN*X  source wonder if some folks try rather hard to produce such
down right smelly code.

Now you have the chance to compete with the worst C hackers around
by sending in your own obfuscated C program.  Just follow the contest
rules below:
		1) the source file must be no more than 512 bytes long

		2) mail your source to:    hplabs!nsc!chongo
		   no later than April 11, 1984.  entries posted to
		   the net will NOT be accepted.  please give your
		   letter the subject of: obfuscated C code contest.

		3) winning entries will be posted to net.lang.c after
		   April 12, 1894.  (thats the prize folks)

		4) indicate your net address in the text of your
		   entry, this will be used to give credit unless
		   you indicate that you want to remain anonymous.

		5) entries must be of original work.  (dont send anything
		   that might upset Big Brother Bell)  all entries are
		   public domain.  (who would want to own them anyway?!)

Entries will be judged for: violations of structured programming, non-clarity,
and use of "by the K&R book" C. (use of local mods to C are not encouraged)
extra credit if they can be compiled using the 4.2BSD C compiler on our VAX 780,
but dont let the lack of a 780 or 4.2 discourage you!

chongo <flames about the contest will be kindly #ifdef'ed out> /\CC/\

UN*X is a trademark of Usenet Hackers Anonymous

WARNING: The rules and mailing address for the contest change from year
         to year.  Be sure that you consult the current set of rules
	 before submitting entries.
Copyright (c) 1985, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

WARNING: The rules and mailing address for the contest change from year
         to year.  Be sure that you consult the current set of rules
	 before submitting entries.
--------------------------------------------------------------------------------

It is time once again for the net wide Obfuscated C code contest!

GOAL:  To write the most Obscure working C program under the rules below:

RULES:	1) The source must be 512 bytes or less.
	2) Mail your entries to:	  ...!ihnp4!nsc!chongo
	   Postings to the net will NOT be used!
	3) Include at the top of the letter:
	    a) Your name, and path from a major network node.
	       If you want your entry to be anonymous, indicate this as well.
	    b) A brief statement of what the program should do.
	    c) The machine/opsys on which it runs.
	4) Enclose your source between the following lines:
---start of program---
<place obfuscated source here>
---end of program---
	5) The C program must be written in common C. 
	   That is, K&R plus common extensions (say 4.2 or Sys V C)
	6) The program must be of original work.
	7) The program must be a complete program. (i.e., not just a fragment)
	8) Entries must be received by me on or before June 8, 1985.

POINTS:	Each entry will be judged for its non-clarity.  I will attempt to
	run each of them on a Vax 780/4.2BSD system.   Don't let the lack
	of such a system stop you!  Try to avoid operating system/machine
	specific code if you do not have such a system.  Extra points will
	be given for program that:

	a) Able to pass lint without complaint
	b) Actually does something interesting  (not just exit)
	c) are portable (i.e., no special calls of local features)
	   (long variable names will be allowed as needed)

The names of the winners will be posted to net.lang.c.  The winning
sources will be posted to net.sources.

If you have any questions on the rules/points above, just ask via mail!

chongo <main(){int i;i+=i+++++i;exit(i);}> /\??/\
Copyright (c) 1986, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

WARNING: The rules and mailing address for the contest change from year
         to year.  Be sure that you consult the current set of rules
	 before submitting entries.
-------------------------------------------------------------------------------

Subject: Third International Obfuscated C Code Contest Rules
Newsgroups: net.lang.c
Keywords: rules,1986,obfuscate,contest

GOAL:  To write the most Obscure working C program following the rules below:

RULES:	1) The source must be 1024 bytes or less.  NO exceptions!

	2) Include in your letter:
	    a) Name (or anonymous), Company/School, City, State and Country.
	    b) Your path from a major network site, if applicable.
	    c) A brief statement of what the program should do.
	    d) The Machine(s)/Operating system(s) on which it runs.
	    e) Enclose your source between the following lines:
		---start of program---
		<place obfuscated source of 1024 bytes or less here>
		---end of program---

	3) The entry should be written in common C. (K&R + common extensions)

	4) The program must be of original work.  All programs must be
	   in the public domain.  All copyrighted programs will be rejected.

	5) Entries must be received between 31-Mar-86 and 30-May-86 0:00 GMT.
	   Email your entries to:
	   
				decwrl!nsc!obfuscate

	   Entries sent by UUCP Email will be confirmed starting 1-May-86.
	   People are encouraged to submit entries via Email, however one may
	   mail entries the following address:

		International Obfuscated C Code Contest
		National Semiconductor
		Attn: Landon Noll      Mail Stop: 7c266
		1135 Kern Ave.
		Sunnyvale, CA 94086
		U.S.A.

AWARDS:	Winners of each category and the best of Show will be posted to
	net.announce as well as being published in the May 86 issue of the
	"Micro/Systems Journal".  Winners also get to receive international
	fame/flame for their efforts!

JUDGING: Awards will be given to the best entry in a number of categories.
	 The actual category list will vary depending on the types of entries
	 we receive.  At the moment, we are considering using the following:

		* The most obscure algorithm
		* The worst abuse of the C preprocessor
		* The strangest source layout
		* The best small one line program
		* The most useful program
		* <anything else we need to give recognition to a good entry>

	Judging will be done by myself, Larry Bassel and other local people
	who are willing to help out.

	We will attempt to run each of them on a Vax 785/4.2BSD system.
	Don't let the lack of such a system stop you!  Try to avoid operating
	system/machine specific code if you do not have such a system.
	Extra points will be given for programs which:

		a) pass lint without complaint
		b) do something quasi-interesting
		c) are portable

	A larger program size was selected to allow for a wider range of
	program ideas.  However if you don't need 1024 bytes don't use them.
	Given two programs with similar techniques and similar levels of
	obfuscation, we will tend to favor the more concise entry.

POLL:	We want to know what you think is the most poorly coded utility
	released with 4.xBSD and/or Sys V.  The top results plus the
	best flames will be posted along with the contest results.
	To vote, please	follow the guidelines below:

	1) Include at the top of the letter:
	    a) Name (or anonymous), Company/School, City, State and Country.
	    b) Your path from a major network site, if applicable.
	    c) the name of the poorly coded utility
	    d) the name of the operating system on which it is found
	    e) the line:	<<<FLAME ON>>>
	    f) 		up to 1024 bytes of flames
	    g) the line:	<<<FLAME OFF>>>

	2) Confine your vote to the standard set of commands.  I.e., don't
	   flame about local commands or user contributed software.

	3) Submit your votes via Email to:

	   	for 4.xBSD:  decwrl!nsc!bsd_util
	   	for Sys V:   decwrl!nsc!sysV_util

	   or, you may send your votes by letter to the same address used by
	   the contest.  Please place your votes on different sheets of paper.

chongo <C> /\cc/\
Copyright (c) 1987, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

WARNING: The rules and mailing address for the contest change from year
         to year.  Be sure that you consult the current set of rules
	 before submitting entries.
------------------------------------------------------------------------------

Subject: 4th International Obfuscated C Code Contest Rules
Newsgroups: comp.lang.c,comp.unix.wizards
Keywords: rules,1987,obfuscate,contest

GOALS OF THE CONTEST:

	* To write the most Obscure/Obfuscated C program under the rules below.
	* To show what should NOT be done in C programs.
	* To provide a safe forum for poor C code.  :-)

RULES:
	1) The source must be 1024 characters long or less.  NO EXCEPTIONS!

	2) To help us process your entries, we ask that you submit entries
	   in the following format:   (please include the --- lines)

---start of header items---
name:
org:
email address:
postal address:
environment:
remarks:
---start of entry---
X	<place obfuscated source of 1024 characters or less here>
X	<add a leading X to each line to avoid problems with mailers>
X	<leading X's do not count toward the source character count>
X	<the first X of each source line will be removed prior to compilation>
X	<newlines count as 1 character>
X	<assume a standard 8 character tab stop>
---end of entry---

	3) Regarding the header items:

	    * All header items except 'remark' are optional.  If you do not
	      wish to answer an item, indicate so by the string:   ***NONE***
	      Any text outside of the above format will be kept confidential.

	    * You can remain anonymous.   If the name item is:  ***ANONYMOUS***
	      all items except the 'remarks' item will not be relased.

	    * Indicate the name of your Company or School in the 'org' item.

	    * The 'email address' item asks for a network path from a major
	      site (such as amdahl) to your mailbox.

	    * If you give a 'postal address', please include your Country.

	    * Give the machine and operating system (i.e., Un*x version) on
	      which your program ran.

	    * The 'remarks' item is not optional.  Please indicate:
		- how to execute or compile if something special is required
		- type of input or argument needed, if applicable
		- what this program does
		- any other remarks you wish to make

	    * If you need more than one line on a header item, place
	      tab or space characters at the beginning of each additional line.

	4) The entry should be written in a common C. (K&R + common extensions)

	5) The program must be of original work.  All programs must be
	   in the public domain.  All copyrighted programs will be rejected.

	6) Entries must be received before 30-May-87 0:00 GMT.
	   Email your entries to:
	   
			...!amdahl!obfuscate

	   Amdahl talks to hplabs, decwrl, pyramid, seismo and cbosgd.
	   We will attempt to Email a confirmation of receipt of contest
	   entries, however since Email is not reliable you may not receive it.
	   People are encouraged to submit entries via Email, however
	   one may mail entries the following postal address:

		Landon Curt Noll
		Amdahl Corp.
		1250 E. Arques Ave.   M/S 316
		P.O. Box 3470
		Sunnyvale, CA
		94088-3470
		U.S.A.

	  Write the words: "International Obfuscated C Code Contest" near the
	  bottom left corner of the envelope.

	8) Contest entries sent in by post should indicate where TAB characters
	   are to be placed, otherwise space characters will be assumed.  Each
	   line will be assumed to contain a newline character.  The leading
	   'X' will serve to indicate where each source line starts.

	9) Each person may submit up to 5 entries.  Multiple entries must
	   be sent in separate Email letters or postal envelopes.

	10) People are encouraged to examine winners of the previous
	    contests.  A copy of these entries was posted to mod.sources
	    on or about 12-Mar-87.  Contact the mod.sources moderator
	    if you missed that article.  Keep in mind that rules change from
	    year to year, so some winning entries may not be valid
	    entries this year.  Also what was unique and novel one
	    year can get 'old' the next year.


ANNOUNCEMENT OF WINNERS:

	* First announcement will be at the Summer 87 Usenix BOF.

	* An announcement will be posted to mod.announce near
	  mid June 1987 stating to which newsgroup the winners
	  have been posted.

	* An article containing the winning entries will be published
	  in a future issue of the "Micro/Systems Journal".

	* Winners receive international fame and flames!  :-)


JUDGING:
	Awards will be given to the best entry in a number of categories.
	The actual category list will vary depending on the types of entries
	we receive.  At the moment, we are considering using the following:

		* The best small one line program
		* The most obscure algorithm
		* The worst abuse of the C preprocessor  (note warnings below)
		* The strangest source layout
		* The most useful obfuscated program
		* <anything else so strange that it deserves an award>

	Extra points will be given for programs which:

		* pass lint without complaint
		* do something quasi-interesting
		* are portable
		* are unique in their obfuscation style
		* are concise

	Points will be taken away for programs that:

		* are very hardware or Un*x version specific
		* dump core or have compiler warnings
		  (we won't take points away if you warn us in the remark item)
		* fail to compile
		* obfuscate only by overuse of #defines
		  (you should do this ONLY if your use is unusual)
		* are similar to previous winners
		* are similar to previous losers  :-)

	The Judging will be done by Landon Noll and Larry Bassel.  
	Comments & questions (not entries) about the contest can be Emailed to:

			 ...!amdahl!judges

chongo <Landon Curt Noll> /\cc/\
Larry Bassel
Subject: 5th International Obfuscated C Code Contest Rules
Newsgroups: comp.lang.c,comp.unix.wizards
Keywords: rules,1988,obfuscate,contest

Copyright (c) 1988, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

	Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  Their emotions obfuscated their
		judgement.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.

GOALS OF THE CONTEST:

	* To write the most Obscure/Obfuscated C program under the rules below.
	* To show what should NOT be done in C programs.
	* To provide a safe forum for poor C code.  :-)

RULES:

	To help us handle the vast volume of entries, we ask that you
	follow the rules below.  Sorry for the length, but we need all
	the help we can get!

	1) Your source MUST be 1536 bytes or less, and it must be a complete
	   program, not just a subroutine.  NOTE the new maximum size.

	2) To help us process your entries, we ask that you submit entries
	   in the following format.  Please be sure to include the --- lines,
	   otherwise our extraction program may skip your entry!

---header items---
name:    	Your name, of course!
org:		School/Company/Organization
email address:	Email address from a well known site
postal address:	Postal address, include your country as well
environment:	Indicate the Hardware & OS under which your program was tested
entry:		A of B		<entry number such as 3 of 5, 1 of 1...>
remarks:			<see below>
---how to compile---
X Give the command(s) needed to compile your program.
X Follow the same rules as given for the program below except that the
X command size must be 160 characters or less.
---program---
X Place obfuscated source of 1536 characters or less in this section.
X Add a leading X to each line to avoid problems with mailers.
X Some mailers don't like files with very long lines.  If your entry contains C
C    lines longer 80 chars we ask you to form continuation line sets.  To form C
C    a continuation line set, place a 'C' character at the point of a split C
C    and place a C (instead of an X) at the beginning of the next line. C
C    Finally, end the continuation line set as normal.
X The C\nC's and leading X's will be removed prior to extraction and thus C
C    they don't contribute toward the source character count.  All other C
C    characters are considered to be source.
X Newlines count as 1 character.  Assume a standard 8 character tab stop.
---end---

	3) Regarding the header items:

	    * Any text outside of the above format will be kept confidential.

	    * All header lines are required, but you may use 'annonymous'
	      for any header line other than 'remarks' or 'entry'.

	    * In the 'remarks' please include:
		- what this program does
		- why you think the program is obfuscated
		- any other remarks you wish to make

	4) Your entry should be written in common C. (K&R + common extensions)
	   Due to the lack of ANSI C compilers, it is suggested, but not
	   required, that you avoid use of constructs unque to ANSI C.

	5) The program must be of original work.  All programs must be
	   in the public domain.  All copyrighted programs will be rejected.

	6) Entries must be received between 15-Mar-88 0:00 GMT and 
	   25-May-88 0:00 GMT.  Email your entries to:
	   
			...!amdahl!obfuscate

	   Amdahl talks to hplabs, decwrl, pyramid, sun, uunet, cbosgd, ...
	   We will attempt to Email a confirmation of receipt of contest
	   entries, however since Email is not reliable you may not receive it.
	   People are strongly encouraged to submit entries via Email, however
	   one may mail entries the following postal address:

		Landon Curt Noll
		Amdahl Corp.
		1250 E. Arques Ave.   M/S 316
		P.O. Box 3470
		Sunnyvale, CA
		94088-3470
		U.S.A.

	  Write the words: "International Obfuscated C Code Contest" near the
	  bottom left corner of the envelope.

	7) Each person may submit up to 8 entries.  Multiple entries must
	   be sent in separate Email letters or postal envelopes.


ANNOUNCEMENT OF WINNERS:

	* First announcement will be at the Summer 88 Usenix BOF.

	* Winning entries will be posted to comp.sources.unix
	  as well as news groups where these rules were posted
	  in mid June 1988.  (depending on the judges work load ;-})

	* An article containing the winning entries will be published
	  in a future issue of the "Micro/Systems Journal".

	* Winners receive international fame and flames!  :-)


JUDGING:

	Awards will be given to the best entry in a number of categories.
	The actual category list will vary depending on the types of entries
	we receive.  As a guide, consider using the following:

		* The best small one line program
		* The most obscure algorithm
		* The strangest source layout
		* The most useful obfuscated program
		* The most creatively obfuscated program
		* Best obfuscated entry smaller than 256 bytes
		* Best obfuscated entry smaller than 1024 bytes
		* <anything else so strange that it deserves an award>

POINTS TO PONDER:

	People are encouraged to examine winners of the previous contests.  A 
	copy of these entries was posted to comp.sources.unix on or about 
	15-Mar-88.  Contact the comp.sources.unix moderator, or some archive
	site if you missed that posting.  Keep in mind that rules change from 
	year to year, so some winning entries may not be valid entries this 
	year.  What was unique and novel one year might be 'old' the next 
	year.  In short, use your best judgement.

	We examine each entry on several levels of confusion.  For example
	each entry is judged when we:

		* look at the original source
		* run it through;  sed -e ',^#[	 ]*define,d' | /lib/cpp
		* run it through a C beautifier
		* examine the algorithm
		* compile and lint it
		* execute it
	
	One line programs are best when they are short, obscure and concise.

	We tend to dislike programs that:

		* are very hardware specific
		* are very OS or Un*x version specific
		     (index/strchr differences are ok, but 
		      socket/streams specific code is likely not to be)
		* dump core or have compiler warnings
		     (it is ok only if you warn us in the 'remark' header item)
		* won't compile under both BSD or SYS V Un*x
		* use an excessively long compile line to get around the
		     size limit
		* are longer than they need to be
		* are similar to previous winners
		* are similar to previous losers  :-)

	Simply abusing #defines or -Dfoo=bar won't go as far as a program
	that is more well rounded in confusion.

	Unless you are crampt for space, or unless you are entering the 
	'best one liner' category, we suggest that you format your program 
	in a more creative way than simply forming excessively long lines.

	We like programs that:

		* are as concise and small as they need to be
		* do something quasi-interesting
		* pass lint without complaint
		* are portable
		* are unique or novel in their obfuscation style
		* use a number of different types of obfuscation
		* make us laugh and/or throw up  :-)

	Some types of programs can't excel in some areas.  We try to account
	for this by giving awards to programs in a number of areas.  Of course,
	your program doesn't have to excel in all areas, but doing well in a
	few helps.

	Be creative!

	The Judging will be done by Landon Noll and Larry Bassel.  If you have
	any QUESTIONS or COMMENTS, please feel free to send them to:

			 ...!amdahl!judges

	however contest entries should be sent to: 
	
			...!amdahl!obfuscate


chongo <Landon Curt Noll> /\cc/\  	{decwrl,sun,uunet}!amdahl!chongo
Larry Bassel			  	{amdahl,ucbvax,cbosgd}|sun!lab

p.s. The 1988 contest has been dedicated to Bill the Cat.	     |\_.^
   								     (@ o)
							   *Ackpt!*   {:} 
								       U
Subject: 6th International Obfuscated C Code Contest Rules
Newsgroups: comp.lang.c,comp.unix.wizards
Keywords: rules,1989,obfuscate,contest,IOCCC

Copyright (c) 1989, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

	Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  Their emotions obfuscated their
		judgement.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.

GOALS OF THE CONTEST:

	* To write the most Obscure/Obfuscated C program under the rules below.
	* To show what should NOT be done in C programs.
	* To provide a safe forum for poor C code.  :-)

RULES:

	To help us handle the vast volume of entries, we ask that you
	follow the rules below.  Sorry for the length, but we need all
	the help we can get!

	1) Your source MUST be 1536 bytes or less, and it must be a complete
	   program, not just a subroutine.

	2) To help us process your entries, we ask that you submit entries
	   in the following format.  Please be sure to include the --- lines,
	   otherwise our extraction program may skip your entry!

---header items---
name:    	Your name, of course!
org:		School/Company/Organization
email address:	Email address from a well known site, or in a registered domain
postal address:	Postal address
		include your country as well
environment:	Indicate the Hardware 
		and OS under which your program was tested
entry:		5	<number of entries sent so far including this one>
remarks:		<see below>
---how to compile---
X Give the command(s) needed to compile your program.
X Follow the same rules as given for the program below except that the
X command size must be 160 characters or less.
---program---
X Place obfuscated source of 1536 characters or less in this section.
X Add a leading X to each line to avoid problems with mailers.
X Some mailers don't like files with very long lines.  If your entry contains E
C    lines longer 80 chars we ask you to form continuation line sets.  To form E
C    a continuation line set, place an 'E' character at the point of a split E
C    and place a C (instead of an X) at the beginning of the next line. E
C    Finally, end the continuation line set as normal.
X The E\nC's and leading X's will be removed prior to extraction and thus E
C    they don't contribute toward the source character count.  All other E
C    characters are considered to be source.  Whitespace after 'X' or 'C' E
C    and before the 'E' is significant, we added it here for readability.
X Newlines and tabs each count as 1 character.  Assume 8 character tab stops.
X If your entry does not end in a newline, leave a final 'E' on the end. E
---end---

	3) Regarding the header items:

	    * Any text outside of the above format will be kept confidential.

	    * All header lines are required, but you may use 'anonymous'
	      for any header line other than 'remarks' or 'entry'.

	    * In the 'remarks' please include:
		- what this program does
		- why you think the program is obfuscated
		- any other remarks you wish to make

	4) Your entry should be written in common C. (K&R + common extensions)
	   Due to the lack of ANSI C compilers, it is suggested, but not
	   required, that you avoid use of constructs unique to ANSI C.

	5) The program must be of original work.  All programs must be
	   in the public domain.  All copyrighted programs will be rejected.

	6) Entries must be received between 26-Mar-89 0:00 GMT and 
	   26-May-89 0:00 GMT.  Email your entries to:
	   
		...!{sun,pacbell,uunet,pyramid,amdahl}!hoptoad!obfuscate

	   We will attempt to Email a confirmation of receipt of contest
	   entries, however since Email is not reliable you may not receive it.
	   We regret that we can no longer accept entries via postal mail.

	7) Each person may submit up to 8 entries.  Multiple entries must
	   be sent in separate Email letters.
	
	8) Entries that can not be built automatically in a portable makefile 
	   are not allowed.  (e.g., don't use #include "/dev/tty")


ANNOUNCEMENT OF WINNERS:

	* First announcement will be at the Summer 89 Usenix BOF.

	* Winning entries will be posted in mid June 1989 to 
	  comp.sources.unix as well as news groups where these rules 
	  were posted.  (depending on the judges work load)
	
	* Winning entries will be deposited into the uunet archives.

	* An article containing the winning entries will be published
	  in a future issue of the "Micro/Systems Journal".

	* Winners receive international fame and flames!  :-)


JUDGING:

	Awards will be given to the best entry in a number of categories.
	The actual category list will vary depending on the types of entries
	we receive.  As a guide, consider using the following:

		* The best small one line program
		* The most obscure algorithm
		* The strangest source layout
		* The most useful obfuscated program
		* The most creatively obfuscated program
		* Best obfuscated entry smaller than 256 bytes
		* Best obfuscated entry smaller than 1024 bytes
		* <anything else so strange that it deserves an award>

POINTS TO PONDER:

	People are encouraged to examine winners of the previous
	contests.  A copy of these entries was posted to
	comp.sources.unix.  Contact the comp.sources.unix moderator, or
	some archive site (such as uunet).  Keep in mind that rules
	change from year to year, so some winning entries may not be
	valid entries this year.  What was unique and novel one year
	might be 'old' the next year.  In short, use your best judgement.

	We examine each entry on several levels of confusion.  For example
	each entry is judged when we:

		* look at the original source
		* run it through:  sed -e ',^#[	 ]*define,d' | /lib/cpp
		* run it through a C beautifier
		* examine the algorithm
		* compile and lint it
		* execute it
	
	One line programs are best when they are short, obscure and concise.

	We tend to dislike programs that:

		* are very hardware specific
		* are very OS or Un*x version specific
		     (index/strchr differences are ok, but 
		      socket/streams specific code is likely not to be)
		* dump core or have compiler warnings
		     (it is ok only if you warn us in the 'remark' header item)
		* won't compile under both BSD or SYS V Un*x
		* use an excessively long compile line to get around the
		     size limit
		* are longer than they need to be
		* are similar to previous winners
		* are similar to previous losers  :-)

	Simply abusing #defines or -Dfoo=bar won't go as far as a program
	that is more well rounded in confusion.

	Unless you are cramped for space, or unless you are entering the 
	'best one liner' category, we suggest that you format your program 
	in a more creative way than simply forming excessively long lines.

	We like programs that:

		* are as concise and small as they need to be
		* do something quasi-interesting
		* pass lint without complaint
		* are portable
		* are unique or novel in their obfuscation style
		* use a number of different types of obfuscation
		* make us laugh and/or throw up  :-)

	Some types of programs can't excel in some areas.  We try to account
	for this by giving awards to programs in a number of areas.  Of course,
	your program doesn't have to excel in all areas, but doing well in
	several helps.

	Be creative!

	The Judging will be done by Landon Noll and Larry Bassel.  If you have
	any QUESTIONS or COMMENTS, please feel free to send them to:

		...!{sun,pacbell,uunet,pyramid,amdahl}!hoptoad!judges
		judges@toad.com

	however contest entries should be sent to: 
	
		...!{sun,pacbell,uunet,pyramid,amdahl}!hoptoad!obfuscate
		obfuscate@toad.com


chongo <Landon Curt Noll> /\cc/\  	hoptoad!chongo
Larry Bassel			  	{amdahl,ucbvax,cbosgd}|sun!lab

p.s. The 1989 contest is being dedicated to the			     |\_.^
     brain that was removed from Bill the Cat.			     (@ o)
							   *Ackpt!*   {:} 
								       U
7th International Obfuscated C Code Contest Rules

Copyright (c) 1990, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

	Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  Their emotions obfuscated their
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.

GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show what should NOT be done in C programs.
    * To provide a safe forum for poor C code.  :-)

DEDICATION:

    The 1990 International Obfuscated C Code Contest is dedicated to ANSI C.

RULES:

    To help us handle the vast volume of entries, we ask that you
    follow the rules below.  Sorry for the length, but we need all
    the help we can get!

    1) Your source MUST be 1536 bytes or less, and it must be a complete
       program, not just a subroutine.

    2) To help us process your entries, we ask that you submit entries
       in the following format.  Please be sure to include ALL --- lines,
       otherwise our extraction program may skip your entry!

---header items---
name:    	Your name, of course!
org:		School/Company/Organization
email address:	Email address from a well known site, or in a registered domain
postal address:	Postal address
		include your country as well
environment:	Indicate the Hardware 
		and OS under which your program was tested
entry:		5	<number of entries sent so far including this one>
remarks:	Remarks may be continued with leading whitespace until the
		line ---how to compile-- is encountered.  (see #3 below)
---how to ANSI compile---
X Give the command(s) needed to compile your program using an ANSI C
X compiler.  If you program should not be compiled under an ANSI C compiler, 
X leave this section blank.  Follow the format rules for the program 
X section below, except that command size must be 160 characters or less.
---how to common compile---
X Give the command(s) needed to compile your program using an K&R/traditional
X C compiler.  If you program should not be compiled under a K&R style C, 
X leave this section blank.  Follow the format rules for the program section
X below, except that command size must be 160 characters or less.
---program---
X Place obfuscated source of 1536 characters or less in this section.
X Add a leading X to each line to avoid problems with mailers.
X Some mailers don't like files with very long lines.  If your entry contains E
C    lines longer 80 chars we ask you to form continuation line sets.  To form E
C    a continuation line set, place an 'E' character at the point of a split E
C    and place a C (instead of an X) at the beginning of the next line. E
C    Finally, end the continuation line set as normal.
X The E\nC's and leading X's will be removed prior to extraction and thus E
C    they don't contribute toward the source character count.  All other E
C    characters are considered to be source.  Whitespace after 'X' or 'C' E
C    and before the 'E' is significant, we added it here for readability.
X Newlines and tabs each count as 1 character.  Assume 8 character tab stops.
X If your entry does not end in a newline, leave a final 'E' on the end. E
---end---

    3) Regarding the header items:

	* Any text outside of the above format will be kept confidential.

	* All header lines are required, but you may use 'anonymous'
	  for any header line other than 'remarks' or 'entry'.

	* In the 'remarks' please include:
	    - what this program does
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)
	
    4) Your entry should be written in common C (K&R + common extensions)
       or ANSI C.  If your program will NOT compile under an ANSI C or 
       K&R C compiler, leave the particular 'how to' section blank.

       You do not have to fill in both 'how to' sections, though you must
       fill in at least one 'how to' section.

       If you leave a 'how to' section blank, include the '---' line, but
       but having no command lines after it.

    5) The program must be of original work.  All programs must be
       in the public domain.  All copyrighted programs will be rejected.

    6) Entries must be received between 16-Mar-90 0:00 GMT and 
       26-May-90 0:00 GMT.  Email your entries to:
	   
	    ...!{sun,pacbell,uunet,utzoo,pyramid,amdahl}!hoptoad!obfuscate

       We will attempt to Email a confirmation of receipt of contest
       entries, however since Email is not reliable you may not receive it.
       We regret that we can no longer accept entries via postal mail.

    7) Each person may submit up to 8 entries.  Multiple entries must
       be sent in separate Email letters.
	
    8) Entries that can not be built automatically in a portable makefile 
       are not allowed.  (e.g., don't use #include "/dev/tty")

    9) Starting this year, compiling entries must result an regular file
       which can be executed. (No -o /dev/tty or similar compile lines)


ANNOUNCEMENT OF WINNERS:

    * First announcement will likely be at the Summer 90 Usenix BOF.

    * Winning entries will be posted in mid June 1990 to 
      comp.sources.unix as well as news groups where these rules 
      were posted.  (depending on the judges work load)
    
    * Winning entries will be deposited into the uunet archives.

    * An article containing the winning entries will be published
      in a future issue of the "Micro/Systems Journal".

    * Winners receive international fame and flames!  :-)


JUDGING:

    Awards will be given to the best entry in a number of categories.
    The actual category list will vary depending on the types of entries
    we receive.  As a guide, consider using the following:

	* The best small one line program
	* The strangest source layout
	* The most useful obfuscated program
	* The most creatively obfuscated program
	* Best obfuscated entry smaller than 256 bytes
	* Best obfuscated entry smaller than 1024 bytes
	* Best abuse of ANSI
	* Worse abuse of the rules (no abuse of entry format please!)
	* <anything else so strange that it deserves an award>

POINTS TO PONDER:

    People are encouraged to examine winners of the previous
    contests.  A copy of these entries was posted to
    comp.sources.unix.  Contact the comp.sources.unix moderator, or
    some archive site (such as uunet).  Keep in mind that rules
    change from year to year, so some winning entries may not be
    valid entries this year.  What was unique and novel one year
    might be 'old' the next year.  In short, use your best judgment.

    We examine each entry on several levels of confusion.  For example
    each entry is judged when we:

	* look at the original source
	* run it through:  sed -e ',^#[	 ]*define,d' | /lib/cpp
	* run it through:  sed -e ',^#[	 ]*include,d' | /lib/cpp
	* run it through a C beautifier
	* examine the algorithm
	* compile and lint it
	* execute it
    
    One line programs are best when they are short, obscure and concise.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS or Un*x version specific
	     (index/strchr differences are ok, but socket/streams specific 
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile under both BSD or SYS V Un*x
	* use an excessively long compile line to get around the size limit
	* are longer than they need to be
	* are similar to previous winners
	* are similar to previous losers  :-)

    Simply abusing #defines or -Dfoo=bar won't go as far as a program
    that is more well rounded in confusion.

    Unless you are cramped for space, or unless you are entering the 
    'best one liner' category, we suggest that you format your program 
    in a more creative way than simply forming excessively long lines.

    We like programs that:

	* are as concise and small as they need to be
	* do something quasi-interesting
	* pass lint without complaint (particularly strict ANSI ones)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel in some areas.  Of course, your 
    program doesn't have to excel in all areas, but doing well in several 
    areas really does help.

    Be creative!

    The Judging will be done by Landon Noll and Larry Bassel.  If you have
    any QUESTIONS or COMMENTS, please feel free to send them to:

	...!{sun,pacbell,uunet,pyramid,amdahl}!hoptoad!judges
	judges@toad.com

    however contest entries should be sent to: 
    
	...!{sun,pacbell,uunet,pyramid,amdahl}!hoptoad!obfuscate
	obfuscate@toad.com


chongo <Landon Curt Noll> /\cc/\  	hoptoad!chongo
Larry Bassel			  	{amdahl,ucbvax,cbosgd}|sun!lab
8th International Obfuscated C Code Contest Rules

Copyright (c) 1991, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

	Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  Their emotions obfuscated their
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show what should NOT be done in C programs.
    * To provide a safe forum for poor C code.  :-)


DEDICATION:

    The 1991 IOCCC is dedicated to the ANSI C pre-processor.


RULES:

    To help us handle the vast volume of entries, we ask that you follow the
    rules below.  SORRY FOR THE LENGTH, BUT WE NEED ALL THE HELP WE CAN GET!

    1) Your source MUST be 1536 bytes or less.   It must be a complete program.

    2) To help us process your entries, we ask that you submit entries
       in the following format.  Please be sure to include ALL --- lines,
       otherwise our extraction program may skip your entry!

---header items---
name:    	Your name, of course!

org:		School/Company/Organization

email address:	Email address from a well known site, or in a registered domain

postal address:	Postal address
		include your country as well

environment:	Indicate the Hardware
		and OS under which your program was tested

entry:		5	<i.e., entry number from 0 to 7 inclusive>

remark:		Remarks about the program.  See rule #3 below for details.
---how to ANSI compile---
Give the command(s) needed to compile your program using an ANSI C
compiler.  If your program should not be compiled under an ANSI C compiler,
leave this section blank.  The command size must be 160 characters or less.
---how to common compile---
Give the command(s) needed to compile your program using an K&R/traditional
C compiler.  If your program should not be compiled under a K&R style C,
leave this section blank.  The command size must be 160 characters or less.
---program---
Not everyone has a program such as uuencode, and we don't want to blindly
process a shar file, so we ask that you format your source as follows:

Add a leading X to EACH line, unless it is a split line.   (see below)

Some mailers don't like long lines.  To be safe, split lines longer than 80
    characters.  To split a line, place an E at the point of a split and
    place a C (instead of an X) at the beginning of the next line.

If the program does not end in a newline, end the last line with an E.

Leading X's, trailing E's followed by the two characters "\nC", and an E
    at the last character of the last line are not considered to part of the
    source and thus don't contribute toward the source character count.
    Be careful with lines ending in "E\n", see the example below.

Newlines and tabs each count as 1 character.  Assume 8 character tab stops.

The newlines here were placed for reasons of readability.  In your entry,
    every line in this section must begin with either an X or a C.

Example:

XThis is a single line containing 79 E
Ccharacters including the E
Cfinal newline.
XThe next line contains only a single newline.
X
XThis line is terminated by a newline preceded by an EE
C
XThis last line is not terminated by a newline and ends in an EE
---end---

    3) Regarding the header items:

	* Any text outside of the above format will be kept confidential.

	* All header lines are required, but you may use 'anonymous'
	  for any header line other than 'remarks' or 'entry'.

	* Only the '---program---' section uses the 'X', 'C', 'E' notation.

	* In the 'remark' item, please include:
	    - what this program does
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)
	    - By default, we will select your program source and/or binary
	      filename.  If your entry REQUIRES a specific source and/or
	      binary filename, please say so in the remark section.
	    - If this entry is a re-submission of a previous entry.

    4) Your entry should be written in common C (K&R + common extensions)
       or ANSI C.  If your program will NOT compile under an ANSI C or
       K&R C compiler, leave the particular 'how to' section blank.
       If you leave a 'how to' section blank, include the '---' line.

       You do not have to fill in both 'how to' sections, though you must
       fill in at least one 'how to' section.  If you leave a 'how to'
       section blank, include the '---' line anyway.

    5) The program must be of original work.  All programs must be
       in the public domain.  All copyrighted programs will be rejected.

    6) Entries must be received between 06-Mar-91 0:00 UTC and
       16-May-91 0:00 UTC.  Email your entries the address found below.
       (UTC is essentially equivalent to Greenwich Mean Time)

       We will attempt to Email a confirmation of receipt of contest
       entries, however since Email is not reliable you may not receive it.
       We regret that we can no longer accept entries via postal mail.

    7) Each person may submit up to 8 entries.  Only 1 entry per Email
       letter.  If you submit multiple entries, be sure that each has a
       unique entry number.

       We will discard all but the latest email in the case of multiple
       entries with the same entry number.  Thus, if you wish to correct
       a previously sent entry, re-send it with the same entry number.
       Just to be sure email does not arrive out or sequence, note that 
       fact in the 'remark' item.

    8) Entries requiring human interaction to be built are not allowed.  
       (for example, don't use #include "/dev/tty")

    9) Compiling an entry must result a regular file which may be executed.
       (for example, don't use -o /dev/tty)


ANNOUNCEMENT OF WINNERS:

    * First announcement will likely be at the Summer 91 Usenix conference.

    * Winning entries will be posted in mid June 1991 to
      comp.sources.unix as well as news groups where these rules
      were posted.  (depending on the judges work load)

    * Winning entries will be deposited into the uunet archives.

    * An article containing the winning entries will be published
      in a future issue of the "Micro/Systems Journal".

    * Winners receive international fame and flames!  :-)


JUDGING:

    Awards will be given to the best entry in a number of categories.
    The actual category list will vary depending on the types of entries
    we receive.  As a guide, consider using the following:

	* The best small one line program
	* The strangest source layout
	* The most useful obfuscated program
	* The most creatively obfuscated program
	* Best obfuscated entry smaller than 256 bytes
	* Best obfuscated entry smaller than 1024 bytes
	* Best abuse of ANSI C
	* Worse abuse of the rules (no abuse of entry format please!)
	* <anything else so strange that it deserves an award>


POINTS TO PONDER:

    People are encouraged to examine winners of the previous contests.
    A copy of these entries has been posted to comp.sources.unix.
    Contact the comp.sources.unix moderator, or some archive site (such
    as uunet).  Keep in mind that rules change from year to year, so some
    winning entries may not be valid entries this year.  What was unique
    and novel one year might be 'old' the next year.

    We examine each entry on several levels of confusion.  For example
    each entry is judged when we:

	* look at the original source
	* If it is ANSI, convert tri-graphs to ASCII
	* C pre-process the source ignoring '#include' '#define' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    One line programs are best when they are short, obscure and concise.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS or Un*x version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile under both BSD or SYS V Un*x
	* use an excessively long compile line to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are similar to previous losers  :-)

    Simply abusing #defines or -Dfoo=bar won't go as far as a program
    that is more well rounded in confusion.

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.  A humorous note in the remark section helps.

    Be creative!


EMAIL ADDRESSES

    Send contest entries to:

	...!{sun,pacbell,uunet,pyramid}!hoptoad!obfuscate
	obfuscate@toad.com

    The Judging will be done by Landon Noll and Larry Bassel.  If you have 
    questions or comments (no entries), please feel free to email them to:

	...!{sun,pacbell,uunet,pyramid}!hoptoad!judges
	judges@toad.com


chongo <Landon Curt Noll> /\cc/\  	hoptoad!chongo
Larry Bassel			  	{uunet,ucbvax,cbosgd}|sun!lab
9th International Obfuscated C Code Contest Rules

Copyright (c) 1992, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  Their emotions obfuscated their
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       followed by either whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	1992
title:	title of entry  (see comments below)
entry:	Entry number from 0 to 7 inclusive
date:	Date/time of submission   (use the format of the date command)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are ok.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  Email address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
anon:	y or n	   (y => remain anonymous, n => ok to publish this info)
---info---
If your program needs an info file, place a uuencoded copy if it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match expression: [a-zA-Z0-9_+=,][a-zA-Z0-9_+=,.-]*
	  and must be 1 to 10 characters in length.

	  It is suggested, but not required, that the title should
	  incorporate your username; in the case of multiple authors,
	  consider using parts of the usernames of the authors.

	* All text outside of the above format will be kept confidential,
	  unless otherwise stated.  Notes about an author of a winning entry
	  will be published unless 'y' was given to that author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The entry's remarks should include:
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---data--- files
	    - why you think the program is obfuscated
	    - note if this entry is a re-submission of a previous entry.
	    - any other remarks (humorous or otherwise)

        * Info files should be used only to supplement your entry.  They 
	  should not be required to exist.

	  If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple 
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Your entry must be written in C.  Use of ANSI C is preferred.  Use
       of common C (K&R + extensions) is permitted, as long as it does not
       cause major problems for ANSI C compilers.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 09-May-92 0:00 UTC.  (UTC is
       essentially equivalent to Greenwich Mean Time)  Email your entries to:

		...!{apple,pyramid,sun,uunet}!hoptoad!obfuscate
		obfuscate@toad.com

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on Emailing your entries
       until 1-Mar-92 0:00 UTC.  Early entries will be accepted, however.
       We will attempt to email a confirmation to the the first author for
       all entries received after 1-Mar-92 0:00 UTC.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate Email letter.

   10) Entries requiring human interaction to be built are not allowed.  
       Compiling an entry produce a file (or files) which may be executed.


FOR MORE INFORMATION:

    The Judging will be done by Landon Noll and Larry Bassel.  Please send
    questions or comments (but not entries) about the contest, to:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges
	judges@toad.com

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  The IOCCC rules, guidelines and mkentry
    program may be obtained from the judges using the Email address above.

    See the official IOCCC web site:

	http://www.ioccc.org

    for more updated information.


chongo <Landon Curt Noll> /\cc/\  	hoptoad!chongo
Larry Bassel			  	{uunet,ucbvax,cbosgd}|sun!lab
9th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (c) 1992, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.


WHAT IS NEW IN 1992:

    The size rules are different this year.  There is a more relaxed
    rule to encourage formatting styles beyond rectangular blobs of C
    code.  The build file (how to compile) has been expanded as well.
    See the rules, and OUR LIKES AND DISLIKES for details.

    The entry format is better (for us anyway).  The program mkentry.c
    provides a convenient way to form an entry.  See ENTRY FORMAT.

    The original entry source, build and resulting binary should be
    treated as read-only.  There is a provision to allow entries to
    modify these files indirectly.  See ENTRY FORMAT.

    This year, we are experimenting with a new category of programs:
    X clients.  X client entries should be as portable as possible.
    See OUR LIKES AND DISLIKES.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* If it is ANSI, convert tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not do well under all, or in most tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    If you do plan to abuse the rules, we suggest that you let us know
    in the remarks section.  Please note that an invitation to abuse
    is not an invitation to break.  We are strict when it comes to the
    3217 byte size limit.  Also, abusing the entry format tends to
    annoy more than amuse.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

	int i;
	j;		   <-- don't use such implicit type declarations
	int k;

    We suggest that you use ANSI C compilers if possible.  If you must
    use non-ANSI C, such as K&R C, try to avoid areas that give ANSI C
    compilers problems.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long for one liners
    in our books.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS or Un*x version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile under both BSD or SYS V Un*x
	* abusing the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We allowed whitespace, and in certain cases ; { or } do not impact
    your program size (up to a certain point), because we want to get
    away from source that is simply a compact blob of characters.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    program.  We are amazed at the many different sizes that claim
    to be the smallest.  There is nothing wrong with self-replicating
    programs.  In fact, a number of winners have been self-replicating.
    You might want to avoid the claim of 'smallest', lest we (or others)
    know of a smaller one!

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r3 (or
    earlier), so try to target X11r4 without requiring X11r4.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.  Better yet, give an xrdb -merge
    command as part of the build.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section helps your chance of winning.  If you had to
    read of many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.

    Be creative!


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send Email to the judges.  (see below)

    The following is a sample entry:

---entry---
rule:	1992
title:	chonglab
entry:	0
date:	Mon Feb 17 13:58:57 1992
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a non-obfuscated obfuscated C program.

    It is likely not to win a prize.  But what do you expect from
    a short example!  (yes, Hello world progs have become old too)
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	San Francisco, CA 94101
	USA
email:	{chongo,noll}@{toad,sgi}.com
anon:	n
---author---
name:	Larry Bassel
org:	IOCCC Judging Group
addr:	Toad Hall
	San Francisco, CA 94101
	USA
email:	hoptoad!sun!lab
	lab@sun.com
anon:	n
---info---
begin 444 info.file
M2&$A("!792!G;W0@>6]U('1O(&QO;VLA"@I4:&%T('1H870@:7,L(&ES+@I4
M:&%T('1H870@:7,@;F]T+`H@("`@:7,@;F]T('1H870@=&AA="!N;W0@:7,N
M"E1H870@:7,L('1H870@=&AA="!I<R!N;W0L(&ES(0H*"0DM+2!C:&]N9V\@
%,3DW-`H@
`
end
---build---
begin 444 build
28V,@<')O9RYC("UO('!R;V<*
`
end
---program---
begin 444 prog.c
C;6%I;B@I>W!R:6YT9B@B2&5L;&\L('=O<FQD(5QN(BD[?0H`
`
end
---end---

    Where build uudecodes into:

cc prog.c -o prog

    and prog.c uudecodes into:

main(){printf("Hello, world!\n");}

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name		need special binary

	    or  rm -f special_src.c			need special source
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build			need special build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of 
	  your build/program files that uses the name convention.  You 
	  should uuencode these files in ---data--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthly design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.


JUDGING PROCESS:

    Entries are judged by Larry Bassel and Landon Curt Noll.

    Entries are unpacked into individual directories.  The Email message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the Email message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections are not read until the judging process is
    complete, and then only from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (for the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send Email to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes, typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    shipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    shipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing misc tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an entry that failed to win on a
    previous year.  There have been winners that lost in a previous
    year.  Of course, in those cases, improving on the entry made
    the difference!

    More often that not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entry.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at a Summer Usenix conference.  By 
    tradition, this is done during the latter part of the UUNET/IOCCC BOF.

    Winning entries will be posted in late July/Aug to the following groups:

	    comp.lang.c		  comp.unix.wizards	alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.d	  alt.sources.d		misc.misc
	    comp.sources.misc

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in magazines such as "The C Users
    Journal".  Winners have appeared in books ("The New Hackers Dictionary")
    and on various T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending Email to the following address:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for
	judges@toad.com					 submitting entries)

    Questions and comments about the contest are welcome.

    One may obtain a copy of the current rules, guidelines or mkentry
    program may be obtained from the judges using the Email address above.

    See the official IOCCC web site:

	http://www.ioccc.org

    for more updated information.


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	{uunet,ucbvax,cbosgd}|sun!lab
10th International Obfuscated C Code Contest Rules

Copyright (c) Landon Curt Noll & Larry Bassel, 1993.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)


NOTE: Changes from the 1993 draft are noted by change bars.  --->	      |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       followed by either whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	1993
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  Email address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
anon:	y or n   (y => remain anonymous, n => ok to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression: [a-zA-Z0-9_=][a-zA-Z0-9_=+-]*
	  and must be 1 to 12 characters in length.

	  It is suggested, but not required, that the title should
	  incorporate your username; in the case of multiple authors,
	  consider using parts of the usernames of the authors.

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'n'.  The corrected entry must use the same
	  title and entry number as submittion that is being corrected.  Be
	  sure that you note the resubmittion in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  Email message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The entry's remarks should include:
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---data--- files
	    - why you think the program is obfuscated
	    - note if this entry is a re-submission of a previous entry.
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	  If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Entries that cannot be compiled by an ANSI C compiler will be rejected.
       Use of common C (K&R + extensions) is permitted, as long as it does not
       cause compile errors for ANSI C compilers.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 07-May-93 0:00 UTC.  (UTC is
       essentially equivalent to Greenwich Mean Time)  Email your entries to:

		...!{apple,pyramid,sun,uunet}!hoptoad!obfuscate
		obfuscate@toad.com

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on Emailing your entries
       until 1-Mar-93 0:00 UTC.  Early entries will be accepted, however.
       We will attempt to email a confirmation to the the first author for
       all entries received after 1-Mar-93 0:00 UTC.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate Email letter.

   10) Entries requiring human interaction to be built are not allowed.
       Compiling an entry (must) produce a file (or files) which may 	      |
       be executed.							      |

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.


FOR MORE INFORMATION:

    The Judging will be done by Landon Noll and Larry Bassel.  Please send
    questions or comments about the contest, to:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for  |
	judges@toad.com					 submitting entries)  |

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com	      |
Larry Bassel			  	lab@sun.com			      |
10th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (c) Landon Curt Noll & Larry Bassel, 1993.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 1993 draft are noted by change bars.  --->		      |


WHAT IS NEW IN 1993:

    The entry format is better (for us anyway).  The program mkentry.c
    has been updated.  See ENTRY FORMAT.

    We will reject entries that cannot be compiled using an ANSI C
    compiler.  Certain old Obfuscation hacks that cause ANSI C compilers
    fits are no longer permitted.  Some of the new issues deal with
    non-integral array types, variable number of arguments, C preprocessor
    directives and the exit() function.  See OUR LIKES AND DISLIKES.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not do well under all, or in most tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    If you do plan to abuse the rules, we suggest that you let us know
    in the remarks section.  Please note that an invitation to abuse
    is not an invitation to break.  We are strict when it comes to the
    3217 byte size limit.  Also, abusing the entry format tends to
    annoy more than amuse.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

	int i;
	j;		   <-- don't use such implicit type declaration
	int k;

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.

    Unfortunately, some ANSI C compilers require array indexes to be of       |
    integral type.  Thus, the following classical obfuscation hacks should    |
    not be used in 1993.  This rule may be relaxed in future contests.	      |

	int i;
	char *c;
	i[c];		   <--- use c[i] instead
	(i+3)["string"];   <--- use "string"[i+3] instead

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>, use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first character on a line.  While some
    C preprocessors allow whitespace the leading '#', many do not.

    Because the exit() function returns void on some systems, entries
    must not assume that it returns an int.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS or Un*x version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile under both BSD or SYS V Un*x
	* abusing the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We allowed whitespace, and in certain cases ; { or } do not impact
    your program size (up to a certain point), because we want to get
    away from source that is simply a compact blob of characters.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    program.  We are amazed at the many different sizes that claim
    to be the smallest.  There is nothing wrong with self-replicating
    programs.  In fact, a number of winners have been self-replicating.
    You might want to avoid the claim of 'smallest', lest we (or others)
    know of a smaller one!

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section helps your chance of winning.  If you had to
    read of many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.

    Be creative!


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send Email to the judges.  (see below)

    The following is a sample entry:

---entry---
rule:	1993
fix:	n
title:	chonglab
entry:	0
date:	Mon Mar  1 08:45:20 1993
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a non-obfuscated obfuscated C program.

    It is likely not to win a prize.  But what do you expect from
    a short example!
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	{chongo,noll}@{toad,sgi}.com
anon:	n
---author---
name:	Larry Bassel
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	hoptoad!sun!lab
	lab@sun.com
anon:	n
---info---
begin 444 info.file
M0V]P>7)I9VAT("AC*2!,86YD;VX@0W5R="!.;VQL+"`Q.3DS+@I!;&P@4FEG
M:'1S(%)E<V5R=F5D+B`@4&5R;6ES<VEO;B!F;W(@<&5R<V]N86PL(&5D=6-A
M=&EO;B!O<B!N;VXM<')O9FET('5S92!I<PIG<F%N=&5D('!R;W9I9&5D('1H
M:7,@=&AI<R!C;W!Y<FEG:'0@86YD(&YO=&EC92!A<F4@:6YC;'5D960@:6X@
M:71S(&5N=&ER971Y"F%N9"!R96UA:6YS('5N86QT97)E9"X@($%L;"!O=&AE
M<B!U<V5S(&UU<W0@<F5C96EV92!P<FEO<B!P97)M:7-S:6]N(&EN('=R:71I
M;F<*9G)O;2!,86YD;VX@0W5R="!.;VQL+@H*5&AA="!T:&%T(&ES+"!I<RX*
M5&AA="!T:&%T(&ES(&YO="P*("`@(&ES(&YO="!T:&%T('1H870@;F]T(&ES
M+@I4:&%T(&ES+"!T:&%T('1H870@:7,@;F]T+"!I<R$*"@D)+2T@8VAO;F=O
M(#$Y-S0*"DQA<W0@>65A<BP@;VYE('!E<G-O;B!T;VQD('5S('1H870@=&AE
M>2!A8W1U86QL>2!D96-O9&5D('1H:7,@9FEL92X*22!W;VYD97(@:&]W(&UA
9;GD@=VEL;"!D;R!I="!T:&ES('EE87(_"@``
`
end
---build---
begin 444 build
28V,@<')O9RYC("UO('!R;V<*
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*(VEF(&1E9FEN960H05]214=)4U1%4D5$7U9/5$527TE.7U-5
M3DY95D%,15]#04Q)1D]23DE!7U5302D*("`@('!R:6YT9B@B5F]T92!,86YD
M;VX@3F]L;"!F;W(@4W5N;GEV86QE($-I='D@0V]U;F-I;"!S96%T(",Q+EQN
:(BD["B-E;F1I9@H@("`@97AI="@P*3L*?0H`
`
end
---end---

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name		need special binary

	    or  rm -f special_src.c			need special source
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build			need special build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---data--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect the judges to see it.  (Our decoding tools aren't
    AI progs!) If you need tell the the something, put it in the
    ---remark--- section, or send a Email to the judges at:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for
	judges@toad.com					 submitting entries)

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Thr Apr 01 00:47:00 1993

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 19%y"
	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmittion uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.


JUDGING PROCESS:

    Entries are judged by Larry Bassel and Landon Curt Noll.

    Entries are unpacked into individual directories.  The Email message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the Email message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections are not read until the judging process is
    complete, and then only from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (for the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send Email to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes, typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    shipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    shipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing misc tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often that not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entry.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at a Summer Usenix conference.  By tradition,
    this is done during the latter part of the UUNET/IOCCC BOF, just prior to
    the Berkeley BSD, and BSDI BOF.

    Winning entries will be posted in late June to the following groups:

	    comp.lang.c		  comp.unix.wizards	alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.d	  alt.sources.d		misc.misc
	    comp.sources.misc	  comp.windows.x

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines.  Winners
    have appeared in books ("The New Hackers Dictionary") and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending Email to the following address:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for
	judges@toad.com					 submitting entries)

    Questions and comments about the contest are welcome.

    The rules and the guidelines may (and often do) change from year to	      |
    year.  You should be sure you have the current rules and guidelines	      |
    prior to submitting entries.


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com	      |
Larry Bassel			  	lab@sun.com			      |
11th International Obfuscated C Code Contest Rules

Copyright (c) Landon Curt Noll & Larry Bassel, 1994.
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)


NOTE: Changes from the original 1993 rules are denoted by change bars.  --->  |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       followed by either whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	1994
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
anon:	y or n   (y => remain anonymous, n => ok to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression: [a-zA-Z0-9_=][a-zA-Z0-9_=+-]*
	  and must be 1 to 12 characters in length.

	  It is suggested, but not required, that the title should
	  incorporate your username; in the case of multiple authors,
	  consider using parts of the usernames of the authors.

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same  |
	  title and entry number as submittion that is being corrected.  Be
	  sure that you note the resubmittion in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files			      |
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---       |
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.      |

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Entries that cannot be compiled by an ANSI C compiler will be rejected.
       Use of common C (K&R + extensions) is permitted, as long as it does not
       cause compile errors for ANSI C compilers.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 8-May-94 23:59 UTC.  (UTC is	      |
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

		...!{apple,pyramid,sun,uunet}!hoptoad!obfuscate
		obfuscate@toad.com

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on EMailing your entries
       until 4-Mar-94 12:00 UTC.  Early entries will be accepted, however.    |
       We will attempt to email a confirmation to the sender of any entry     |
       received after 4-Mar-94 12:00 UTC and before the close of the contest. |

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.
       Making an entry must produce a file (or files) which may be executed.  |

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in    |
       the opinion of the judges, violates the rules will be disqualified.    |
       Entries that attempt to abuse the rules must try to justify why 	      |
       their rule abuse is legal in the ---remark--- section.		      |


FOR MORE INFORMATION:

    The Judging will be done by Landon Noll and Larry Bassel.  Please send
    questions or comments about the contest, to:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for  |
	judges@toad.com					 submitting entries)  |

    Comments about confusing rules and guidelines are also welcome.    	      |

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address   |
    above and use the subject 'send rules'.				      |

    One may obtain winners of previous contests (1984 to date), via ftp from: |

	host: ftp.uu.net	(192.48.96.9)				      |
	user: anonymous
	pass: yourname@yourhost
	dir:  pub/ioccc							      |

    As a last resort, previous winners may be obtained by sending EMail	      |
    to the above address.  Please use the subject 'send YEAR winners',	      |
    where YEAR is a single 4 digit year, a year range, or 'all'.	      |


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	lab@sun.com
11th International Obfuscated C Code Contest Guidelines, Hints and Comments 

Copyright (c) Landon Curt Noll & Larry Bassel, 1994.
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the original 1993 rules are denoted by change bars.  --->    |


WHAT IS NEW IN 1994:							      |

    It now appears that most ANSI C compilers allow indexes to be of          |
    non-integral type.  Unlike last year, we now allow one to use             |
    constructs such as:							      |

	int h;								      |
	char *i;							      |
	...								      |
	h[i] = (h+3)["string"];						      |

    The ---build--- section may use "gcc" or "cc" commands.  However, your    |
    entry should be compilable with any ANSI C compiler.  You should not       |
    depend on a gcc specific feature.					      |

    The order of your entry's sections must be the same as the order of       |
    the rule template or the example below.				      |

    We have added a new rule regarding rule abuse.  The guidelines expand     |
    on the rule abuse aspect of the contest.				      |

    A suggestion regarding VTxxx/ANSI escape sequences has been given.	      |


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not do well under all, or in most tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical	      |
    function or state machine to spell out something such as "hello,	      |
    world!" may want to try and be more creative.			      |

    Ultra-obfuscated programs are in some cases some cases easier to	      |
    deobfuscate than subtly-obfuscated programs.  Consider using	      |
    misleading or subtitle tricks layered on top of or under an		      |
    appropriate level of obfuscation.					      |

    Programs that use VTxxx/ANSI sequences that are NOT limited to a          |
    specific terminal brand and that can also work in a standard xterm 	      |
    are considered portable.						      |


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:    |

	int this_is_ok;							      |
	this_is_not;	   <-- don't use such implicit type declaration       |

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first character on a line.  While some
    C preprocessors allow whitespace the leading '#', many do not.

    Because the exit() function returns void on some systems, entries
    must not assume that it returns an int.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS or Un*x version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile under both BSD or SYS V like Un*x systems	      |
	* abusing the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We want to get away from source that is simply a compact blob of          |
    characters.  To help, we give a break to source that contains             |
    whitespace, and in certain cases ; { or } characters.  While the          |
    number of characters excluding whitespace (tab, space, newline),          |
    and excluding any ; { or } followed by either whitespace or end of        |
    file, must be <= 1536, the total size may be less than 3217               |
    bytes.  This means that one may use "free of charge" up to 1681           |
    bytes of whitespace, or ; { or } followed by either whitespace	      |
    or end of file.							      |

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    program.  We are amazed at the many different sizes that claim
    to be the smallest.  There is nothing wrong with self-replicating
    programs.  In fact, a number of winners have been self-replicating.
    You might want to avoid the claim of 'smallest', lest we (or others)
    know of a smaller one!

    We tend to dislike writable strings.  That is, we want to avoid:	      |

	char *T = "So many primes, so little time!";			      |
	...								      |
	T[14] = ';';							      |
    
    You may use writable strings if you really must.  If you do depend	      |
    on them, you must say do in the ---remark--- section.  		      |
    
    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section helps your chance of winning.  If you had to
    read of many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.

    Be creative!


ABUSING THE RULES:							      |

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may    |
    involve, but is not limited to, doing things that are technically	      |
    allowed by the rules and yet do not fit the spirit of what we 	      |
    intended to be submitted.						      |

    Legal rule abuse is encouraged to help promote creativity.  Rule	      |
    abuse entries, regardless of if they receive an award, result in	      |
    changes to the next year's rules and guidelines.			      |

    Legal abuse of the rules is NOT an invitation to violate the	      |
    rules.  An entry that violates the rules in the opinion of the	      |
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL	      |
    OF RISK!  If you have an entry that might otherwise be interesting,       |
    you might want to submit two versions; one that does not abuse the	      |
    rules and one that does.						      |

    If you intend to abuse the rules, indicate so in the ---remark---         |
    section.  You must try to justify why you consider your rule abuse        |
    to be allowed under the rules.  That is, you must plead your case         |
    as to why your entry is valid.  Humor and/or creativity help plead        |
    a case.								      |

    Abusing the entry format tends to annoy us more than amuse us.	      |

    We are often asked why the contest rules and guidelines seem to	      |
    strange or contain mistakes, flaws or grammatical errors.		      |
    One reason is that we sometimes make genuine mistakes.  But in many	      |
    cases such problems, flaws or areas of confusion are deliberate.	      |
    Changes to rules and guidelines in response to a rule abuses, are	      |
    done in a minimal fashion.  Often the we will deliberately leave	      |
    behind holes (or introduce new ones) so that future rule abuse may	      |
    continue.

    At the risk of stating the obvious, this contest is a parity the	      |
    software development process.  The rules and guidelines are		      |
    only a small part of the overall contest.  Even so, one may think	      |
    the contest rule and guideline process as a parody of the sometimes      |
    tragic mismatch between what a customer (or marketing) wants and	      |
    what engineering delivers.						      |


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry:

---entry---
rule:	1994
fix:	n
title:	chonglab
entry:	0
date:	Thu Mar  3 13:23:14 1994
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a non-obfuscated obfuscated C program.

    It is likely not to win a prize.  But what do you expect from
    a short example!
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	{chongo,noll}@{toad,sgi}.com
anon:	n
---author---
name:	Larry Bassel
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	hoptoad!sun!lab
	lab@sun.com
anon:	n
---info---
begin 444 info.file
M0V]P>7)I9VAT("AC*2!,86YD;VX@0W5R="!.;VQL+"`Q.3DS+@I!;&P@4FEG
M:'1S(%)E<V5R=F5D+B`@4&5R;6ES<VEO;B!F;W(@<&5R<V]N86PL(&5D=6-A
M=&EO;B!O<B!N;VXM<')O9FET('5S92!I<PIG<F%N=&5D('!R;W9I9&5D('1H
M:7,@=&AI<R!C;W!Y<FEG:'0@86YD(&YO=&EC92!A<F4@:6YC;'5D960@:6X@
M:71S(&5N=&ER971Y"F%N9"!R96UA:6YS('5N86QT97)E9"X@($%L;"!O=&AE
M<B!U<V5S(&UU<W0@<F5C96EV92!P<FEO<B!P97)M:7-S:6]N(&EN('=R:71I
M;F<*9G)O;2!,86YD;VX@0W5R="!.;VQL+@H*5&AA="!T:&%T(&ES+"!I<RX*
M5&AA="!T:&%T(&ES(&YO="P*("`@(&ES(&YO="!T:&%T('1H870@;F]T(&ES
M+@I4:&%T(&ES+"!T:&%T('1H870@:7,@;F]T+"!I<R$*"@D)+2T@8VAO;F=O
M(#$Y-S0*"DEN(#$Y.3(L(&]N92!P97)S;VX@=&]L9"!U<R!T:&%T('1H97D@
M86-T=6%L;'D@9&5C;V1E9"!T:&ES(&9I;&4N("!);@HQ.3DS(&$@9F5W(&UO
M<F4@9&ED('1H92!S86UE+B`@22!W;VYD97(@:&]W(&UA;GD@=VEL;"!D;R!I
-="!T:&ES('EE87(_"@``
`
end
---build---
begin 444 build
99V-C("UA;G-I('!R;V<N8R`M;R!P<F]G"@``
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*(VEF("%D969I;F5D*$Y/5%]!7U)%1TE35$52141?5D]415)?
M24Y?4U5.3EE604Q%7T-!3$E&3U).24%?55-!*0H@("`@<')I;G1F*"),86YD
M;VX@3F]L;"!W87,@96QE8W1E9"!T;R!A(#0@>65A<B!T97)M(&]N('1H92!3
M=6YN>79A;&5<;B(I.PH@("`@<')I;G1F*")#:71Y($-O=6YC:6PN("!4:&%N
M:R!Y;W4A7&Y<;B(I.PHC96YD:68*("`@('!R:6YT9B@B4W5N;GEV86QE(')E
M;&%T960@14UA:6P@;6%Y(&)E('-E;G0@=&\Z(&YO;&Q`;F-D+F-O;2Y<;EQN
M(BD["@H@("`@<')I;G1F*")!="!T:&4@=&EM92!T:&ES('=A<R!W<FET=&5N
M+"!3=6YN>79A;&4@:&%D(&YO="!Y970@;V)T86EN961<;B(I.PH@("`@<')I
M;G1F*")A(&1O;6%I;BP@8G5T('!L86YN960@=&\@9&\@<V\@:6X@9G5T=7)E
@+EQN(BD["B`@("!E>&ET*#(Q-S`Q("4@,3(W*3L*?0H`
`
end
---end---

    Your entry's sections must be the same order as in the above example.     |

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name			  	      |

	    or  rm -f special_src.c			  		      |
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build				  	      |
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.		      |

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.	      |
    It is also ok to use a "gcc" command (and gcc args).  However keep	      |
    in mind that your entry should be compilable by any standard ANSI C	      |
    compiler and thus should not depend on a special gcc feature.	      |

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect the us to see it.  (Our decoding tools are		      |
    not AI progs!) If you need tell the the something, put it in 	      |
    the	 ---remark--- section, or send a EMail to the us at:		      |

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for
	judges@toad.com					 submitting entries)

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Fri Apr 01 00:47:00 1994					      |

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 19%y"
	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmittion uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.


JUDGING PROCESS:

    Entries are judged by Larry Bassel and Landon Curt Noll.

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections are not read until the judging process is
    complete, and then only from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (for the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes, typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    shipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    shipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing misc tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often that not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entry.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at a Summer Usenix conference.  By tradition,
    this is done during the latter part of the UUNET/IOCCC BOF, just prior to
    the Berkeley BSD, and BSDI BOF.

    Winning entries will be posted in late June to the following groups:

	    comp.lang.c		  comp.unix.wizards	alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.d	  alt.sources.d		misc.misc
	    comp.sources.misc	  comp.windows.x

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines.  Winners
    have appeared in books ("The New Hackers Dictionary") and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for
	judges@toad.com					 submitting entries)

    Questions and comments about the contest are welcome.  Comments about     |
    confusing rules and guidelines are also welcome.			      |

    The rules and the guidelines may (and often do) change from year to	      |
    year.  You should be sure you have the current rules and guidelines	      |
    prior to submitting entries.


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	lab@sun.com
12th International Obfuscated C Code Contest Rules			       |

Copyright (c) Landon Curt Noll, Larry Bassel and Sriram Srinivasan, 1995.      |
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from Landon Curt Noll, Larry Bassel and Sriram Srinivasan.		       |

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)


NOTE: Some if the changes from the 1994 rules are denoted by change bars. ---> |
NOTE: The original 1995 mkentry.c contained a bug.  We have remained this      |
      rule set 1995-1 to distinguish it from the previous set.		       |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       immediately followed by whitespace or end of file, must be <= 1536.     |

    3) Your entry must be submitted in the following format:

---entry---
rule:	1995-1								       |
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
anon:	y or n   (y => remain anonymous, n => OK to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression: [a-zA-Z0-9_=][a-zA-Z0-9_=+-]*
	  and must be 1 to 12 characters in length.

	  It is suggested, but not required, that the title should	       |
	  incorporate the author(s) username(s).		               |

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same
	  title and entry number as submission that is being corrected.  Be    |
	  sure that you note the re-submission in the ---remark--- as well.    |

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need to tell the judges |
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.

	* Because the original 1995 mkentry.c program contained a bug,	       |
	  the rule set was changed to 1995-1.				       |

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) The uudecoded ---program--- section must be able to be compiled         |
       cleanly by an ANSI C compiler, or if there are any compile errors,      |
       they must be documented in the ---remark--- section.  		       |

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 08-Dec-95 23:59 UTC.  (UTC is	       |
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

		...!{apple,sun,uunet}!hoptoad!obfuscate			       |
		obfuscate@toad.com

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on EMailing your entries
       until 19-Oct-95 12:00 UTC.  Early entries will be accepted, however.    |
       We will attempt to EMail a confirmation to the sender of any entry
       received after 19-Oct-95 12:00 UTC and before the close of the contest. |

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.        |

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the ---remark--- section.


FOR MORE INFORMATION:

    The judging will be done by Landon Noll, Larry Bassel and Sriram	       |
    Srinivasan.  Please send questions or comments about the contest, to:      |

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for   |
	judges@toad.com					 submitting entries)

    Comments about confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address
    above and use the subject 'send rules'.

    Check out the IOCCC Web page:					       |

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).  |


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	labbmf@ix.netcom.com		       |
Sriram Srinivasan			sriram@tcs.com			       |
12th International Obfuscated C Code Contest Guidelines, Hints and Comments    |

Copyright (c) Landon Curt Noll, Larry Bassel and Sriram Srinivasan, 1995.      |
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from Landon Curt Noll, Larry Bassel and Sriram Srinivasan.		       |


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 1994 rules are denoted by change bars.  --->    	       |
    Not every change is marked in this file is marked, but
    most are. :-)							       |


WHAT IS NEW IN 1995:							       |

    A number of small rules changes were made.  See rule #6 and #10 for        |
    more information.							       |

    A loophole in the size rule (#2) was plugged.			       |

    We have clarified the environment under which the C programs are assumed   |
    to be run.  See comments about POSIX in "OUR LIKES AND DISLIKES" below.    |

    Sriram Srinivasan was added to the judging team.			       |

    We are thinking about C++ in a future contest.  Ideas are welcome, C++     |
    entries are not (yet).						       |

    Windows 95 (see Dislikes).						       |

    The original 1995 mkentry.c contained a bug.  We have remained this        |
    rule set 1995-1 to distinguish it from the previous set.		       |


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain	       |
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an		       |
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declaration

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first character on a line.  While some
    C preprocessors allow whitespace the leading '#', many do not.

    Because the exit() function returns void on some systems, entries
    must not assume that it returns an int.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific					       |
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems      |
	* depend on a utility or application not normally found on most	       |
	  most POSIX P1003.1/P1003.2 like systems			       |
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)
	* are identical to future losers (Windows 95) :-)		       |

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace       |
    or end of file, must be <= 1536, the total size may be less than 3217      |
    bytes.  This means that one may use "free of charge" up to 1681
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.  [[Q: What is special about 1681?]]			       |

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'       |
    source.  The smallest, a zero byte entry, won in 1994.      	       |

    We tend to dislike writable strings.  That is, we want to avoid:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';
    
    You may use writable strings if you really must.  If you do depend
    on them, you must say do in the ---remark--- section.
    
    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    While we recognize that UN*X is not a universal operating system, the      |
    contest does have a bias towards such systems.  In an effort to expand     |
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1     |
    and P1003.2 standards.  This will allow certain non-UN*X OS users to       |
    submit entries.  On the other hand, this is a guideline and not a rule.    |
    We will not reject an entry based on some POSIX technicality.	       |

    When dealing with OS and application environments, we suggest that you     |
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will    |
    evolve but not as much as the contest, so avoid stuff like POSIX real      |
    time, security, etc.						       |

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel (tm) in some areas.  Of course, your    |
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section help your chances of winning.  If you had to      |
    read so many twisted entries, you too would enjoy a good laugh or two.     |
    We think the readers of the contest winners do as well.

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we
    intended to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule
    abuse entries, regardless of if they receive an award, result in
    changes to the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the
    rules.  An entry that violates the rules in the opinion of the
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL
    OF RISK!  If you have an entry that might otherwise be interesting,
    you might want to submit two versions; one that does not abuse the
    rules and one that does.

    If you intend to abuse the rules, indicate so in the ---remark---
    section.  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case
    as to why your entry is valid.  Humor and/or creativity help plead
    a case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too	       |
    strange or contain mistakes, flaws or grammatical errors.
    One reason is that we sometimes make genuine mistakes.  But in many
    cases such problems, flaws or areas of confusion are deliberate.
    Changes to rules and guidelines in response to rule abuses, are	       |
    done in a minimal fashion.  Often we will deliberately leave	       |
    behind holes (or introduce new ones) so that future rule abuse may
    continue.

    At the risk of stating the obvious, this contest is a parity of the        |
    software development process.  The rules and guidelines are
    only a small part of the overall contest.  Even so, one may think
    the contest rule and guideline process as a parody of the sometimes
    tragic mismatch between what a customer (or marketing) wants and
    what engineering delivers.


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry (the | change bars are not part	       |
    of the example, don't add them to your entry!)			       |

---entry---
rule:	1995-1
fix:	y
title:	chonglabram
entry:	0
date:	Mon Oct 23 07:04:32 1995
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a not-very-obfuscated C program.  It is likely not to win a
    prize, because it doesn't have what it takes to win and because the
    author plans to forget to send it in before the deadline!  :-)

    Note that the rule is 1995-1 because 1995's old mkentry.c was buggy.
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
	Earth
email:	{chongo,noll}@{toad,sgi}.com
anon:	y
---author---
name:	Larry Bassel
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	labbmf@ix.netcom.com
anon:	n
---author---
name:	Sriram Srinivasan
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	sriram@tcs.com
anon:	n
---info---
begin 444 info.file
M0V]P>7)I9VAT("AC*2!,86YD;VX@0W5R="!.;VQL+"`Q.3DU+@I!;&P@4FEG
M:'1S(%)E<V5R=F5D+B`@4&5R;6ES<VEO;B!F;W(@<&5R<V]N86PL(&5D=6-A
M=&EO;B!O<B!N;VXM<')O9FET('5S92!I<PIG<F%N=&5D('!R;W9I9&5D('1H
M:7,@=&AI<R!C;W!Y<FEG:'0@86YD(&YO=&EC92!A<F4@:6YC;'5D960@:6X@
M:71S(&5N=&ER971Y"F%N9"!R96UA:6YS('5N86QT97)E9"X@($%L;"!O=&AE
M<B!U<V5S(&UU<W0@<F5C96EV92!P<FEO<B!P97)M:7-S:6]N(&EN('=R:71I
M;F<*9G)O;2!,86YD;VX@0W5R="!.;VQL+@H*5&AA="!T:&%T(&ES+"!I<RX*
M5&AA="!T:&%T(&ES(&YO="P*("`@(&ES(&YO="!T:&%T('1H870@;F]T(&ES
M+@I4:&%T(&ES+"!T:&%T('1H870@:7,@;F]T+"!I<R$*"@D)+2T@8VAO;F=O
M(#$Y-S0*"D$@9F5W('!E;W!L92!O8FIE8W1E9"!T;R!T:&4@8V]M;6$@:6X@
M(E1H870@=&AA="!I<RP@:7,B+"!S;R!W92!C;VYS=6QT960*=V5L;"!K;F]W
M;B!S='EL92!G=6ED92!A<R!W96QL(&%S(&%N(&5X<&5R="!O;B!T:&4@<W5B
M:F5C="!O9B!P=6YC='5A=&EO;BX*5&AE(&-O;F-L=7-I;VX@9G)O;2!A;&P@
M<V]U<F-E<R!W87,@=&AA="!T:&4@8V]M;6$@:7,@86QL;W=E9"X*"DEN(#$Y
M.3(L(&]N92!P97)S;VX@=&]L9"!U<R!T:&%T('1H97D@86-T=6%L;'D@9&5C
M;V1E9"!T:&ES(&9I;&4N("!);@HQ.3DS(&%N9"`Q.3DT(&$@9F5W(&UO<F4@
M9&ED('1H92!S86UE+B`@26X@,3DY-2P@82!N=6UB97(@;V8@<&5O<&QE(&9R
M;VT*16%S=&5R;B!%=7)O<&4@=&]L9"!U<R!T:&%T('1H97D@9&5C;V1E9"!T
M:&ES(&9I;&4N("!3965M<R!T:&5R92!I<R!A"G-M86QL('5U9&5C;V1E(&=R
M;W5P(&]U="!T:&5R92$@(#HM*0H*22!W;VYD97(@:&]W(&UA;GD@=VEL;"!D
0;R!I="!T:&ES('EE87(_"@``
`
end
---build---
begin 444 build
<9V-C("UA;G-I('!R;V<N8R`M3R`M;R!P<F]G"@``
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*("`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U<V-A=&5D(&)U
M="!T:&5N('=H870@9&ED('EO=2!E>'!E8W0_("!3;R!H97)E(&%R92!A"B`@
M("`@*B!F97<@<&5R<V]N86P@=&ED8FET<R!B96-A=7-E($D@*$QA;F1O;BD@
M;F5E9&5D('1O('=A<W1E(&$@9F5W(&)Y=&5S+@H@("`@("HO"B-I9B`A9&5F
M:6YE9"A.3U1?05]214=)4U1%4D5$7U9/5$527TE.7U-53DY95D%,15]#04Q)
M1D]23DE!7U5302D*("`@('!R:6YT9B@B22`H3&%N9&]N($YO;&PI('=A<R!E
M;&5C=&5D('1O(&$@-"!Y96%R('1E<FT@;VX@=&AE(%-U;FYY=F%L95QN(BD[
M"B`@("!P<FEN=&8H(D-I='D@0V]U;F-I;"X@(%1H86YK('EO=2$@($UY('1E
M<FT@96YD<R!I;B`Q.3DW+EQN7&XB*3L*(V5N9&EF"B`@("!P<FEN=&8H(E-U
M;FYY=F%L92!R96QA=&5D($5-86EL(&UA>2!B92!S96YT('1O.B!N;VQL0'1O
M860N8V]M+EQN(BD["B`@("!P<FEN=&8H(F]R(&-O=6YC:6Q`8VDN<W5N;GEV
M86QE+F-A+G5S7&Y<;B(I.PH*("`@('!R:6YT9B@B070@=&AE('1I;64@=&AI
M<R!W87,@=W)I='1E;BP@4W5N;GEV86QE(&AA<R!A('1E;7`@5V5B('-I=&5<
M;B(I.PH@("`@<')I;G1F*")H='1P.B\O=W=W+G-V<&%L+F]R9R]S=6YN>79A
M;&4N("!4:&ES('=I;&P@8VAA;F=E(&EN('1H92!N96%R7&XB*3L*("`@('!R
M:6YT9B@B9G5T=7)E(&%S($QA;F1O;B=S(&UO=&EO;B!T;R!S971U<"!A('-E
M<G9E<B!W:71H(&$@5#$@;&EN:UQN(BD["B`@("!P<FEN=&8H(G!A<W-E9"`W
M+3`N("!3;R!E>'!E8W0@9&ER96-T(%-U;FYY=F%L92!54DP@<V]M971I;64@
M<V]O;B%<;EQN(BD["@H@("`@<')I;G1F*")))VT@9&]I;F<@;6]R92!O8G-E
M<G9I;F<@;F]W('1H870@22!H879E(&UY(#,P;6T@3%@R,#`N("!!9G1E<EQN
M(BD["B`@("!P<FEN=&8H(B5D*R!Y<G,@;V8@;6%N=6%L('-T87(@:&]P<&EN
M9RP@:70@:7,@;FEC92!T;R!L970@82!C;VUP=71E<EQN(BPR,"D["B`@("!P
M<FEN=&8H(F1O(&ET(5QN7&XB*3L*"B`@("!P<FEN=&8H(E-P96%K:6YG(&]F
M(&-O;7!U=&5R<RP@22=M('5S:6YG(&UY($-O=6YC:6P@<&]S:71I;VX@=&\@
M;&]B8GE<;B(I.PH@("`@<')I;G1F*")T:&4@55,@1V]V97)N;65N="!T;R!C
M:&%N9V4@=&AE:7(@<W1U<&ED(&-R>7!T;R!E>'!O<G0@;&%W<RY<;B(I.PH@
M("`@<')I;G1F*")54R!C:71I>F5N<R!W:7-H(&UE(&QU8VLL(&YO;BU54R!C
M:71I>F5N<R!P87)D;VX@;7E<;B(I.PH@("`@<')I;G1F*")G;W9E<FYM96YT
M)W,@;&%C:R!O9B!A<'!R96-I871I;VX@;V8@=&AE(')I9VAT(&]F('!R:79A
M8WDN7&Y<;B(I.PH*("`@('!R:6YT9B@B22=M('=O<FMI;F<@870@4T=)('1H
M97-E(&1A>7,N("!&=6X@<&QA8V4N(&-O;VP@<&5O<&QE(&%N9%QN(BD["B`@
M("!P<FEN=&8H(GEU;6UO(&AA<F1W87)E+B`@3&]T<R!O9B!#4%4@8WEC;&5S
M('1O('=O<FL@;VX@8F5T=&5R('=A>7-<;B(I.PH@("`@<')I;G1F*")T;R!C
M<GEP=&]G<F%P:&EC86QL>2!P<F]T96-T(&]N92=S('!R:79A8WD@87,@=V5L
M;"!A<R!D;VEN9UQN(BD["B`@("!P<FEN=&8H(G-O;64@3G5M8F5R(%1H96]R
M>2`M/B!W871C:"!F='`Z+R]F='`N=74N;F5T+W!U8B]I;V-C8UQN(BD["B`@
M("!P<FEN=&8H(F9O<B!A(&YE=R!C86QC(')E;&5A<V4@<V]O;BX@(%=A:70@
M9F]R(&%T(&QE87-T('9E<G-I;VX@,BXQ,%QN(BD["B`@("!P<FEN=&8H(F)E
M8V%U<V4@=&AE(&]L9"`R+CD@<W1U9F8@:7,@82!B:70@;W5T(&]F(&1A=&4N
?7&XB*3L*("`@(&5X:70H,C$W,#$@)2`Q,C<I.PI]"@``
`
end
---end---

    Your entry's sections must be the same order as in the above example.

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name

	    or  rm -f special_src.c
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.
    It is also ok to use a "gcc" command (and gcc args).  However keep
    in mind that your entry should be compilable by any standard ANSI C
    compiler and thus should not depend on a special gcc feature.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect us to see it.  (Our decoding tools are not AI	       |
    progs!) If you need tell the judges something, put it in the	       |
    ---remark--- section, or send a EMail to:				       |

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for   |
	judges@toad.com					 submitting entries)

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Fri Apr 01 00:47:00 1995					       |

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 19%y"
	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmittion uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.


JUDGING PROCESS:

    Entries are judged by Larry Bassel, Landon Curt Noll and Sriram	       |
    Srinivasan.								       |

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections and the title from the ---entry--- section           |
    are not read until the judging process is complete, and then only          |
    from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,	       |
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We       |
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    skipping over any #include files				       |
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files				       |

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary	       |

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out       |
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the     |
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at the main Usenix conference.  By	       |
    tradition, this is done during the IOCCC BOF.	 		       |

    Winning entries will be posted in February to the following groups:

	    comp.lang.c		  comp.unix.wizards	alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.d	  alt.sources.d		misc.misc
	    comp.sources.misc	  comp.windows.x	comp.lang.c++	       |
	    comp.programming						       |

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines from around     |
    the world.  Winners have appeared in books ("The New Hackers Dictionary")  |
    and on T-Shirts.							       |

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for   |
	judges@toad.com					 submitting entries)

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address
    above and use the subject 'send rules'.

    Check out the IOCCC Web page:					       |

	http://reality.sgi.com/csp/ioccc				       |

    It has rules, guidelines and winners of previous contests (1984 to date).  |

    One may also obtain previous winners via ftp from:			       |

	host: ftp.uu.net						       |
	user: anonymous
	pass: yourname@yourhost
	dir:  pub/ioccc

    As a last resort, previous winners may be obtained by sending EMail
    to the above address.  Please use the subject 'send YEAR winners',
    where YEAR is a single 4 digit year, a year range (1993-1994), or 'all'.   |


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	labbmf@ix.netcom.com		       |
Sriram Srinivasan			sriram@tcs.com			       |
	    13th International Obfuscated C Code Contest Rules

Copyright (c) Landon Curt Noll, Larry Bassel and Sriram Srinivasan, 1996.
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from Landon Curt Noll, Larry Bassel and Sriram Srinivasan.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 13th IOCCC contest window is:					       |

		01-Oct-96 12:00 UTC  to  01-Dec-96 12:00 UTC		       |

NOTE: Some of the changes from the 1995 rules are denoted by change bars. ---> |
      However some changes such as 1995 to 1996 are not marked.		       |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       immediately followed by whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	1996-1
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
url:	http://your/home/page.html or say none if you don't have one	       |
anon:	y or n   (y => remain anonymous, n => OK to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression:				       |
	
		^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$				       |

	  and must be 1 to 12 characters in length.

	  It is suggested, but not required, that the title should
	  incorporate the author(s) username(s).

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same
	  title and entry number as submission that is being corrected.  Be
	  sure that you note the re-submission in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need to tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The home page URL in the ---author--- section must be fully	       |
	  qualified or must be the word `none'.				       |

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) The uudecoded ---program--- section must be able to be compiled
       cleanly by an ANSI C compiler, or if there are any compile errors,
       they must be documented in the ---remark--- section.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 01-Dec-96 12:00 UTC.  (UTC is	       |
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

		...!{apple,sun,uunet}!hoptoad!obfuscate
		obfuscate@toad.com

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on EMailing your entries
       until 01-Oct-96 12:00 UTC.  Early entries will be accepted, however.    |
       We will attempt to EMail a confirmation to the sender of any entry
       received after 01-Oct-96 12:00 UTC and before the close of the contest. |

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the ---remark--- section.


FOR MORE INFORMATION:

    The judging will be done by Landon Noll, Larry Bassel and Sriram
    Srinivasan.  Please send questions or comments about the contest, to:

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for
	judges@toad.com					 submitting entries)

    Comments about confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address
    above and use the subject 'send rules'.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	labbmf@ix.netcom.com
Sriram Srinivasan			sriram@tcs.com
13th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (c) Landon Curt Noll, Larry Bassel and Sriram Srinivasan, 1996.
All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from Landon Curt Noll, Larry Bassel and Sriram Srinivasan.


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 1995 rules are denoted by change bars.  --->	       |
    Not every change is marked in this file is marked, but
    most are. :-)


WHAT IS NEW IN 1996:

    A number of small rules changes were made.  See rule #3.		       |

    We clarified what is a legal title by using a stronger regexp.	       |

    We expanded on the value of the --remark--- section in the		       |
    guidelines below.							       |

    We now ask for an author's home page URL in the --entry-- section.	       |

    We declared that use of local funcions are not allowed this year due       |
    to the lack of portability.						       |

    Windows 95 (see Dislikes).  This is not really new but we like to	       |
    say it anyway.							       |


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declaration

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc	       |
    local function declarations, such as:				       |

	void main() {							       |
		void blah() { printf("blah\n"); }			       |
		blah();							       |
	}								       |

    are not allowed even though their existence seems tailor made for	       |
    this contest!   But for now, since they are not in wide spread use	       |
    we cannot accept entries that use them.				       |

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first character on a line.  While some
    C preprocessors allow whitespace the leading '#', many do not.

    Because the exit() function returns void on some systems, entries
    must not assume that it returns an int.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)
	* are identical to future losers (Windows 95) :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 1536, the total size may be less than 3217
    bytes.  This means that one may use "free of charge" up to 1681
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.  [[Q: What is special about 1681?]]

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We tend to dislike writable strings.  That is, we want to avoid:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    You may use writable strings if you really must.  If you do depend
    on them, you must say do in the ---remark--- section.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION
	* make us laugh and/or throw up  :-)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the 		       |
    ---remark--- section rather than leaving it obscure for the judges         |
    as we might miss something and/or be too tired to notice.		       |

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read	       |
    the ---remark--- section during the judging process, so it is worth	       |
    your while to write a remarkable ---remark--- section.		       |

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we
    intended to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule
    abuse entries, regardless of if they receive an award, result in
    changes to the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the
    rules.  An entry that violates the rules in the opinion of the
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL
    OF RISK!  If you have an entry that might otherwise be interesting,
    you might want to submit two versions; one that does not abuse the
    rules and one that does.

    If you intend to abuse the rules, indicate so in the ---remark---
    section.  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case
    as to why your entry is valid.  Humor and/or creativity help plead
    a case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.
    One reason is that we sometimes make genuine mistakes.  But in many
    cases such problems, flaws or areas of confusion are deliberate.
    Changes to rules and guidelines in response to rule abuses, are
    done in a minimal fashion.  Often we will deliberately leave
    behind holes (or introduce new ones) so that future rule abuse may
    continue.

    At the risk of stating the obvious, this contest is a parity of the
    software development process.  The rules and guidelines are
    only a small part of the overall contest.  Even so, one may think
    the contest rule and guideline process as a parody of the sometimes
    tragic mismatch between what a customer (or marketing) wants and
    what engineering delivers.


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry (the | change bars are not part
    of the example, don't add them to your entry!)

---entry---
rule:	1996-1
fix:	y
title:	chonglabram
entry:	0
date:	Mon Oct 28 00:47:00 1996
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a not-very-obfuscated C program.  It is likely not to win a
    prize, because it doesn't have what it takes to win and because the
    author plans to forget to send it in before the deadline!  :-)

    Note that the rule is 1996-1 because 1996's old mkentry.c was buggy.
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
	Earth
email:	{chongo,noll}@{toad,sgi}.com
url:	http:///www.isthe.com/chongo/index.html
anon:	y
---author---
name:	Larry Bassel
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	labbmf@ix.netcom.com
url:	none
anon:	n
---author---
name:	Sriram Srinivasan
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	sriram@tcs.com
url:	none								       |
anon:	n
---info---
begin 444 info.file
M0V]P>7)I9VAT("AC*2!,86YD;VX@0W5R="!.;VQL+"`Q.3DU+@I!;&P@4FEG
M:'1S(%)E<V5R=F5D+B`@4&5R;6ES<VEO;B!F;W(@<&5R<V]N86PL(&5D=6-A
M=&EO;B!O<B!N;VXM<')O9FET('5S92!I<PIG<F%N=&5D('!R;W9I9&5D('1H
M:7,@=&AI<R!C;W!Y<FEG:'0@86YD(&YO=&EC92!A<F4@:6YC;'5D960@:6X@
M:71S(&5N=&ER971Y"F%N9"!R96UA:6YS('5N86QT97)E9"X@($%L;"!O=&AE
M<B!U<V5S(&UU<W0@<F5C96EV92!P<FEO<B!P97)M:7-S:6]N(&EN('=R:71I
M;F<*9G)O;2!,86YD;VX@0W5R="!.;VQL+@H*5&AA="!T:&%T(&ES+"!I<RX*
M5&AA="!T:&%T(&ES(&YO="P*("`@(&ES(&YO="!T:&%T('1H870@;F]T(&ES
M+@I4:&%T(&ES+"!T:&%T('1H870@:7,@;F]T+"!I<R$*"@D)+2T@8VAO;F=O
M(#$Y-S0*"D$@9F5W('!E;W!L92!O8FIE8W1E9"!T;R!T:&4@8V]M;6$@:6X@
M(E1H870@=&AA="!I<RP@:7,B+"!S;R!W92!C;VYS=6QT960*=V5L;"!K;F]W
M;B!S='EL92!G=6ED92!A<R!W96QL(&%S(&%N(&5X<&5R="!O;B!T:&4@<W5B
M:F5C="!O9B!P=6YC='5A=&EO;BX*5&AE(&-O;F-L=7-I;VX@9G)O;2!A;&P@
M<V]U<F-E<R!W87,@=&AA="!T:&4@8V]M;6$@:7,@86QL;W=E9"X*"DEN(#$Y
M.3(L(&]N92!P97)S;VX@=&]L9"!U<R!T:&%T('1H97D@86-T=6%L;'D@9&5C
M;V1E9"!T:&ES(&9I;&4N("!);@HQ.3DS(&%N9"`Q.3DT(&$@9F5W(&UO<F4@
M9&ED('1H92!S86UE+B`@26X@,3DY-2P@82!N=6UB97(@;V8@<&5O<&QE(&9R
M;VT*16%S=&5R;B!%=7)O<&4@=&]L9"!U<R!T:&%T('1H97D@9&5C;V1E9"!T
M:&ES(&9I;&4N("!3965M<R!T:&5R92!I<R!A"G-M86QL('5U9&5C;V1E(&=R
M;W5P(&]U="!T:&5R92$@(#HM*0H*22!W;VYD97(@:&]W(&UA;GD@=VEL;"!D
0;R!I="!T:&ES('EE87(_"@``
`
end
---build---
begin 444 build
<9V-C("UA;G-I('!R;V<N8R`M3R`M;R!P<F]G"@``
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*("`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U<V-A=&5D(&)U
M="!T:&5N('=H870@9&ED('EO=2!E>'!E8W0_("!3;R!H97)E(&%R92!A"B`@
M("`@*B!F97<@<&5R<V]N86P@=&ED8FET<R!B96-A=7-E($D@*$QA;F1O;BD@
M;F5E9&5D('1O('=A<W1E(&$@9F5W(&)Y=&5S+@H@("`@("HO"B-I9B`A9&5F
M:6YE9"A.3U1?05]214=)4U1%4D5$7U9/5$527TE.7U-53DY95D%,15]#04Q)
M1D]23DE!7U5302D*("`@('!R:6YT9B@B22`H3&%N9&]N($YO;&PI('=A<R!E
M;&5C=&5D('1O(&$@-"!Y96%R('1E<FT@;VX@=&AE(%-U;FYY=F%L95QN(BD[
M"B`@("!P<FEN=&8H(D-I='D@0V]U;F-I;"X@(%1H86YK('EO=2$@($UY('1E
M<FT@96YD<R!I;B`Q.3DW+EQN7&XB*3L*(V5N9&EF"B`@("!P<FEN=&8H(E-U
M;FYY=F%L92!R96QA=&5D($5-86EL(&UA>2!B92!S96YT('1O.B!N;VQL0'1O
M860N8V]M+EQN(BD["B`@("!P<FEN=&8H(F]R(&-O=6YC:6Q`8VDN<W5N;GEV
M86QE+F-A+G5S7&Y<;B(I.PH*("`@('!R:6YT9B@B070@=&AE('1I;64@=&AI
M<R!W87,@=W)I='1E;BP@4W5N;GEV86QE(&AA<R!A('1E;7`@5V5B('-I=&5<
M;B(I.PH@("`@<')I;G1F*")H='1P.B\O=W=W+G-V<&%L+F]R9R]S=6YN>79A
M;&4N("!4:&ES('=I;&P@8VAA;F=E(&EN('1H92!N96%R7&XB*3L*("`@('!R
M:6YT9B@B9G5T=7)E(&%S($QA;F1O;B=S(&UO=&EO;B!T;R!S971U<"!A('-E
M<G9E<B!W:71H(&$@5#$@;&EN:UQN(BD["B`@("!P<FEN=&8H(G!A<W-E9"`W
M+3`N("!3;R!E>'!E8W0@9&ER96-T(%-U;FYY=F%L92!54DP@<V]M971I;64@
M<V]O;B%<;EQN(BD["@H@("`@<')I;G1F*")))VT@9&]I;F<@;6]R92!O8G-E
M<G9I;F<@;F]W('1H870@22!H879E(&UY(#,P;6T@3%@R,#`N("!!9G1E<EQN
M(BD["B`@("!P<FEN=&8H(B5D*R!Y<G,@;V8@;6%N=6%L('-T87(@:&]P<&EN
M9RP@:70@:7,@;FEC92!T;R!L970@82!C;VUP=71E<EQN(BPR,"D["B`@("!P
M<FEN=&8H(F1O(&ET(5QN7&XB*3L*"B`@("!P<FEN=&8H(E-P96%K:6YG(&]F
M(&-O;7!U=&5R<RP@22=M('5S:6YG(&UY($-O=6YC:6P@<&]S:71I;VX@=&\@
M;&]B8GE<;B(I.PH@("`@<')I;G1F*")T:&4@55,@1V]V97)N;65N="!T;R!C
M:&%N9V4@=&AE:7(@<W1U<&ED(&-R>7!T;R!E>'!O<G0@;&%W<RY<;B(I.PH@
M("`@<')I;G1F*")54R!C:71I>F5N<R!W:7-H(&UE(&QU8VLL(&YO;BU54R!C
M:71I>F5N<R!P87)D;VX@;7E<;B(I.PH@("`@<')I;G1F*")G;W9E<FYM96YT
M)W,@;&%C:R!O9B!A<'!R96-I871I;VX@;V8@=&AE(')I9VAT(&]F('!R:79A
M8WDN7&Y<;B(I.PH*("`@('!R:6YT9B@B22=M('=O<FMI;F<@870@4T=)('1H
M97-E(&1A>7,N("!&=6X@<&QA8V4N(&-O;VP@<&5O<&QE(&%N9%QN(BD["B`@
M("!P<FEN=&8H(GEU;6UO(&AA<F1W87)E+B`@3&]T<R!O9B!#4%4@8WEC;&5S
M('1O('=O<FL@;VX@8F5T=&5R('=A>7-<;B(I.PH@("`@<')I;G1F*")T;R!C
M<GEP=&]G<F%P:&EC86QL>2!P<F]T96-T(&]N92=S('!R:79A8WD@87,@=V5L
M;"!A<R!D;VEN9UQN(BD["B`@("!P<FEN=&8H(G-O;64@3G5M8F5R(%1H96]R
M>2`M/B!W871C:"!F='`Z+R]F='`N=74N;F5T+W!U8B]I;V-C8UQN(BD["B`@
M("!P<FEN=&8H(F9O<B!A(&YE=R!C86QC(')E;&5A<V4@<V]O;BX@(%=A:70@
M9F]R(&%T(&QE87-T('9E<G-I;VX@,BXQ,%QN(BD["B`@("!P<FEN=&8H(F)E
M8V%U<V4@=&AE(&]L9"`R+CD@<W1U9F8@:7,@82!B:70@;W5T(&]F(&1A=&4N
?7&XB*3L*("`@(&5X:70H,C$W,#$@)2`Q,C<I.PI]"@``
`
end
---end---

    Your entry's sections must be the same order as in the above example.

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    Please note that the title must match the following regexp:		       |

	^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$					       |

    and must be 1 to 12 chars in length.  Titles such as:		       |

	foo.c								       |
	this is my invalid title name					       |
	/dev/null							       |

    are right out!  :-)							       |

    It is suggested, but not required, that the title should incorporate       |
    the author(s) username(s).						       |

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name

	    or  rm -f special_src.c
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.
    It is also ok to use a "gcc" command (and gcc args).  However keep
    in mind that your entry should be compilable by any standard ANSI C
    compiler and thus should not depend on a special gcc feature.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect us to see it.  (Our decoding tools are not AI
    progs!) If you need tell the judges something, put it in the
    ---remark--- section, or send a EMail to:

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for
	judges@toad.com					 submitting entries)

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Mon Oct 28 00:47:00 1996

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 19%y"
	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmission uses the same title and entry number	       |
    as well, as these are used to determine which entry is to be
    replaced.

JUDGING PROCESS:

    Entries are judged by Larry Bassel, Landon Curt Noll and Sriram
    Srinivasan.

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections and the title from the ---entry--- section
    are not read until the judging process is complete, and then only
    from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at the main Usenix conference.  By
    tradition, this is done during the IOCCC BOF.

    Winning entries will be posted in February to the following groups:

	    comp.lang.c		  comp.unix.wizards	alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.d	  alt.sources.d		misc.misc
	    comp.sources.misc	  comp.windows.x	comp.lang.c++
	    comp.programming

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	...!{apple,sun,uunet}!hoptoad!judges		(not the address for
	judges@toad.com					 submitting entries)

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address
    above and use the subject 'send rules'.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).


chongo <Landon Curt Noll> /\cc/\  	{chongo,noll}@{toad,sgi}.com
Larry Bassel			  	labbmf@ix.netcom.com
Sriram Srinivasan			sriram@tcs.com
	    14th International Obfuscated C Code Contest Rules		       |

Copyright (c) Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll and	       |
Peter Seebach, 1998.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is  |
granted provided this this copyright and notice are included in its entirety   |
and remains unaltered.  All other uses must receive prior permission in	       |
writing from the contest judges.					       |

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 14th IOCCC contest window is:					       |

		26-Nov-98 12:00 UTC  to  31-Jan-99 23:59:59 UTC		       |

NOTE: Some of the changes from the 1998 rules are denoted by change bars. ---> |
      However some changes such as 1996 to 1998 are not marked.		       |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       immediately followed by whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	1998
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
url:	http://your/home/page.html or say none if you don't have one
anon:	y or n   (y => remain anonymous, n => OK to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression:				       |

		^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$				       |

	  and must be 1 to 31 characters in length.			       |

	  It is suggested, but not required, that the title should
	  incorporate the author(s) username(s).

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same
	  title and entry number as submission that is being corrected.  Be
	  sure that you note the re-submission in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need to tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The home page URL in the ---author--- section must be fully	       |
	  qualified or must be the word `none'.				       |

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) The uudecoded ---program--- section must be able to be compiled
       cleanly by an ANSI C compiler, or if there are any compile errors,
       they must be documented in the ---remark--- section.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 31-Jan-99 23:59:59 UTC. (UTC is       |
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

	    entry@ioccc.org						       |

       You must include the words ``ioccc entry'' in the subject
       of your EMail when sending in your entry!  Failure to do so may
       result in the loss of your entry!

       If possible, we request that you hold off on EMailing your entries
       until 26-Nov-98 12:00 UTC.  Early entries will be accepted, however.    |
       We will attempt to EMail a confirmation to the sender of any entry
       received after 26-Nov-98 12:00 UTC and before the close of the contest. |

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the ---remark--- section.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Jeremy Horn, Landon
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

	    questions@ioccc.org	   (not the address for submitting entries)    |

    Comments about confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:    |

	http://www.ioccc.org						       |

    It has rules, guidelines and winners of previous contests (1984 to date).
14th International Obfuscated C Code Contest Guidelines, Hints and Comments    |

Copyright (c) Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll and	       |
Peter Seebach, 1998.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is  |
granted provided this this copyright and notice are included in its entirety   |
and remains unaltered.  All other uses must receive prior permission in        |
writing from the contest judges.					       |


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 1996 rules are denoted by change bars.  --->	       |
    Not every change is marked in this file is marked, but
    most are. :-)


WHAT IS NEW IN 1998:

    The EMail addresses (entry@ioccc.org and questions@ioccc.org) are	       |
    different.  Contest entries (in the proper form) go to entry@ioccc.org     |
    and questions to the judges go to questions@ioccc.org.		       |

    There is a new web URL:   http://www.ioccc.org			       |

    We have a new IOCCC judging team.  See http://www.ioccc.org/judges.html    |
    for more information.

    We added a more explicit comment against using gzip to get around the      |
    contest entry size limit.						       |

    We warn against assuming that string constants are writable.	       |

    There are some stuff about exit() returning void in the guidelines.	       |

    There are some stuff about #'s as the first char of a line in 	       |
    C-preprocessor directives.  See below.				       |

    Titles can be 31 chars now ... but please try to keep then short.	       |

    To provide you with a little more time, we have extended the deadline      |
    to 31-Jan-99, which due to the leap second of 31-Dec-98 23:59:60 UTC       |
    gives you just a little more time to complete your entry.		       |

    Some may complain about the use of 2 digit years in our contest start      |
    and stop dates.  These dates have nothing to do with the current Y2K       |
    hype.  In fact this contest is currently certified 99.9% Y2K hype free!    |
    We use 2 digit years because they are more obfuscated.  :-)		       |


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declaration

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int 								       |
	main() {							       |
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),	       |
    the leading '#' must be the first non-whitespace character on a line.      |
    While some broken C preprocessors do not allow whitespace before a 	       |
    '#', most do.							       |

    The exit() function returns void.  On some broken systems have exit()      |
    return int.  Your entry should assume that exit() returns a void.	       |

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)
	* are identical to future losers (Windows 95) :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 1536, the total size may be less than 3217
    bytes.  This means that one may use "free of charge" up to 1681
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.  [[Q: What is special about 1681?]]

    Please do not use things like gzip to get around the size limit.	       |

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:       |

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.      |

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!   |
	* make us laugh and/or throw up  :-)  (humor helps!)		       |

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the
    ---remark--- section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the ---remark--- section during the judging process, so it is worth
    your while to write a remarkable ---remark--- section.

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we
    intended to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule
    abuse entries, regardless of if they receive an award, result in
    changes to the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the
    rules.  An entry that violates the rules in the opinion of the
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL
    OF RISK!  If you have an entry that might otherwise be interesting,
    you might want to submit two versions; one that does not abuse the
    rules and one that does.

    If you intend to abuse the rules, indicate so in the ---remark---
    section.  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case
    as to why your entry is valid.  Humor and/or creativity help plead
    a case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.
    One reason is that we sometimes make genuine mistakes.  But in many
    cases such problems, flaws or areas of confusion are deliberate.
    Changes to rules and guidelines in response to rule abuses, are
    done in a minimal fashion.  Often we will deliberately leave
    behind holes (or introduce new ones) so that future rule abuse may
    continue.

    At the risk of stating the obvious, this contest is a parity of the
    software development process.  The rules and guidelines are
    only a small part of the overall contest.  Even so, one may think
    the contest rule and guideline process as a parody of the sometimes
    tragic mismatch between what a customer (or marketing) wants and
    what engineering delivers.


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry (the | change bars are not part
    of the example, don't add them to your entry!)

---entry---
rule:	1998
fix:	y
title:	chlejhse
entry:	0
date:	Mon Oct 28 00:47:00 1998
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a not-very-obfuscated C program.  It is likely not to win a
    prize, because it doesn't have what it takes to win and because the
    author plans to forget to send it in before the deadline!  :-)
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
	Earth
email:	chongo@no_spam.fake.address
	nobody@toad.com
url:	http:///www.isthe.com/chongo
anon:	y
---author---
name:	Leonid A. Broukhis
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	leob@no_spam.fake_org
url:	http://www.mailcom.com/main.shtml
anon:	n
---author---
name:	Jeremy Horn
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	jhorn@no_spam.fake_edu
url:	none
anon:	n
---author---
name:	Peter Seebach
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	seebs@no_spam.fake_com
url:	none
anon:	y
---info---
begin 444 info.file
M5&AI<R!F:6QE(&ES(&EN('1H92!P=6)L:6,@9&]M86EN+@H*:'1T<#HO+W)E
M86QI='DN<V=I+F-O;2]C:&]N9V\*:'1T<#HO+W=W=RYI;V-C8RYO<F<*"E1H
M870@=&AA="!I<RP@:7,N"E1H870@=&AA="!I<R!N;W0L"B`@("!I<R!N;W0@
M=&AA="!T:&%T(&YO="!I<RX*5&AA="!I<RP@=&AA="!T:&%T(&ES(&YO="P@
M:7,A"@H)"2TM(&-H;VYG;R`Q.3<T"@I);B`Q.3DW+"!W:&5R92!T:&5R92!W
M87,@;F\@8V]N=&5S="`Z+2@@9'5E('1O(%-R:7)A;2!D<F]P<&EN9R!O9F8@
M=&AE"F9A8V4@;V8@=&AE($5A<G1H("AA;GEO;F4@:VYO=R!W:&5R92!3<FER
M86T@4W)I;FEV87-A;B!W96YT/R`@268@=&\@<V5N9`I%36%I;"!T;R!Q=65S
M=&EO;G-`:6]C8V,N;W)G*2!A;F0@3&%R<GD@0F%S<V5L(&)E:6YG('5N86)L
M92!T;R!C;VYT:6YU90HH9'5E('1O(&AI<R!C=7)R96YT(%!H1"!W;W)K("XN
M+B!B97-T('=I<VAE<R!,87)R>2$I+"!O;F4@;6EG:'0@<V%Y.@H*"3(@:7,@
M=&AE(&=R96%T97-T(&]D9"!P<FEM92!B96-A=7-E(&ET(&ES('1H92!L96%S
M="!E=F5N('!R:6UE+@H*06YD(&9O<B`Q.3DX(&]N92!M:6=H="!S87DZ"@H)
M4V\@;6%N>2!P<FEM97,@+BXN('-O(&QI='1L92!T:6UE(0H*26X@,3DY,BP@
M;VYE('!E<G-O;B!T;VQD('5S('1H870@=&AE>2!A8W1U86QL>2!D96-O9&5D
M('1H:7,@9FEL92X@($EN"C$Y.3,@86YD(#$Y.30@82!F97<@;6]R92!D:60@
M=&AE('-A;64N("!);B`Q.3DU+"!A(&YU;6)E<B!O9B!P96]P;&4@9G)O;0I%
M87-T97)N($5U<F]P92!T;VQD('5S('1H870@=&AE>2!D96-O9&5D('1H:7,@
M9FEL92X@(%-E96US('1H97)E(&ES(&$*<VUA;&P@=75D96-O9&4@9W)O=7`@
M:6X@16%S=&5R;B!%=7)O<&4A("`Z+2D*"E=H>2!D;VXG="!Y;W4@=&5L;"!U
M<R!W:'D@>6]U(&1E8V]D960@=&AI<R!F:6QE(&)Y('-E;F1I;F<@14UA:6P@
M=&\Z"@H)<75E<W1I;VYS0&EO8V-C+F]R9PH*4&5R:&%P<R!Y;W4@;6EG:'0@
M<W5G9V5S="!A(&)E='1E<B!E>&%M<&QE(&9I;&4@86YD('!R;V=R86T@9F]R
M('1H:7,*<V%M<&QE(&5N=')Y/R`@268@>6]U(&1O('-E;F0@:7,@82!B971T
M97(@97AA;7!L92!F:6QE+"!B92!W87)N960@+BXN"G1H870@:70@8V%N;F]T
M(&)E(&-O;G-I9&5R960@87,@82!C;VYT97-T(&5N=')Y+B`@4V\@>6]U(&UI
M9VAT(&YO=`IW86YT('1O('-E;F0@:6X@>6]U<B!B97-T('=O<FL@+BXN('-A
M=F4@=&AA="!F;W(@=&AE(&-O;G1E<W0N("!/;B!T:&4@"F]T:&5R(&AA;F0@
M+BXN('EO=2!M:6=H="!W86YT('1O('-E;F0@=7,@>6]U<B!M;W-T(&AU;6]R
M;W5S('=O<FLN("`@.BTI"E5U96YC;V1E9"!C<F5D:70@=VEL;"!B92!G:79E
;;B!I9B!W92!P:6-K('EO=7(@97AA;7!L92X*
`
end
---build---
begin 444 build
K9V-C("UA;G-I('!R;V<N8R`M3R`M1%-)3$Q97T1%1DE.12`M;R!P<F]G"@``
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*("`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U<V-A=&5D(&)U
M="!T:&5N('=H870@9&ED('EO=2!E>'!E8W0@+BXN('1H:7,@:7,@:G5S=`H@
M("`@("H@82!P;&%C96AO;&1E<B!E>&%M<&QE+@H@("`@("HO"B`@("!P<FEN
M=&8H(E-O;65D87D@22!M:6=H="!W<FET92!A(&)E='1E<B!E>&%M<&QE+EQN
M(BD["B`@("!P<FEN=&8H(D]N('-E8V]N9"!T:&]G=6AT("XN+B!N86@A7&XB
M*3L*("`@('!R:6YT9B@B4V5N9"!U<R!A(&=O;V0@97AA;7!L92!B=70@8F4@
M=V%R;F5D+"!A;GD@97AA;7!L92!Y;W5<;B(I.PH@("`@<')I;G1F*")S96YD
M('5S('=I;&P@;F]T(&)E(&-O;G-I9&5R960@87,@86X@96YT<GD@9F]R('1H
M92!C;VYT97-T(5QN(BD["B`@("!P<FEN=&8H(E-O('EO=2!M:6=H="!N;W0@
M=V%N="!T;R!S96YD(&%N(&5X86UP;&4@;V8@>6]U<B!B97-T('=O<FM<;B(I
M.PH@("`@<')I;G1F*"(N+BX@<V%V92!T:&%T(&9O<B!T:&4@8V]N=&5S="X@
M($)U="!A(&=O;V0@:'5M;W)O=7,@<')O9R!M:6=H=%QN(BD["B`@("!P<FEN
M=&8H(F1O("XN+B!A;F0@=V4@=VEL;"!G:79E('EO=2!U=65N8V]D960@8W)E
M9&ET(&EN(')E='5R;BY<;B(I.PH@("`@+RH@14UA:6PZ('%U97-T:6]N<T!I
M;V-C8RYO<F<@*B\*(VEF("%D969I;F5D*%-)3$Q97T1%1DE.12D*("`@(&UA
F:6XH*3L*(V5N9&EF"B`@("!E>&ET*#(Q-S`Q("4@,3(W*3L*?0H`
`
end
---end---

    Your entry's sections must be the same order as in the above example.

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    Please note that the title must match the following regexp:

	^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$

    and must be 1 to 31 chars in length.  Titles such as:		       |

	foo.c
	this_invalid_title_is_too_long					       !
	/dev/null

    are right out!  :-)

    Titles can be 31 chars long now, but please try to keep them short.	       |
    Why 31?  Because at lesst one of the judges likes Mersenne primes!	       |

    It is suggested, but not required, that the title should incorporate
    the author(s) username(s).

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name

	    or  rm -f special_src.c
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.
    It is also ok to use a "gcc" command (and gcc args).  However keep
    in mind that your entry should be compilable by any standard ANSI C
    compiler and thus should not depend on a special gcc feature.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect us to see it.  (Our decoding tools are not AI
    progs!) If you need tell the judges something, put it in the
    ---remark--- section, or send a EMail to:

	questions@ioccc.org	(not the address for submitting entries)       |

    You must include the words ``ioccc question'' in the subject of your
    EMail message when sending EMail to the judges.

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Mon Oct 28 00:47:00 1998

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 19%y"
	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmission uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.

JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll    |
    and Peter Seebach.							       |

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections and the title from the ---entry--- section
    are not read until the judging process is complete, and then only
    from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at the main Usenix conference.  By
    tradition, this is done during the IOCCC BOF.  However due to the	       |
    schedule change of 1998, an announcement may take place on the	       |
    web first in early 1999.						       |

    Winning entries will be posted in February to the following groups:

	    comp.lang.c		 comp.lang.c.moderated  alt.sources	       |

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming       |
	    misc.misc		 comp.std.c		alt.folklore.computers |

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	questions@ioccc.org	(not the address for submitting entries)       |

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    You must include the words ``ioccc question'' in the subject of your
    EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org						       |

    It has rules, guidelines and winners of previous contests (1984 to date).  |


Leonid A. Broukhis 							       |
Jeremy Horn 								       |
chongo <Landon Curt Noll> /\cc/\
Peter Seebach 								       |
	    15th International Obfuscated C Code Contest Rules		       |

Copyright (c) Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll and	       |
Peter Seebach, 2000.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is  |
granted provided this this copyright and notice are included in its entirety   |
and remains unaltered.  All other uses must receive prior permission in	       |
writing from the contest judges.					       |

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 15th IOCCC contest window is:					       |

		01-Feb-2000 00:00 UTC  to  31-Mar-2000 23:59:59 UTC	       |

NOTE: Some of the changes from the 1998 rules are denoted by change bars. ---> |
      However some changes such as 1998 to 2000 are not marked.		       |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) Your entry must be <= 3217 bytes in length.  The number of characters
       excluding whitespace (tab, space, newline), and excluding any ; { or }
       immediately followed by whitespace or end of file, must be <= 1536.

    3) Your entry must be submitted in the following format:

---entry---
rule:	2000
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
url:	http://your/home/page.html or say none if you don't have one
anon:	y or n   (y => remain anonymous, n => OK to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 255 bytes or less.
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression:				       |

		^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$				       |

	  and must be 1 to 31 characters in length.			       |

	  It is suggested, but not required, that the title should
	  incorporate the author(s) username(s).

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same
	  title and entry number as submission that is being corrected.  Be
	  sure that you note the re-submission in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need to tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The home page URL in the ---author--- section must be fully	       |
	  qualified or must be the word `none'.				       |

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) The uudecoded ---program--- section must be able to be compiled
       cleanly by an ANSI C compiler, or if there are any compile errors,
       they must be documented in the ---remark--- section.

    7) The program must be of original work.  All programs must be in the
       public domain.  All copyrighted programs will be rejected.

    8) Entries must be received prior to 31-Mar-2000 23:59:59 UTC. (UTC is 
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

	    entry@ioccc.org						       

       We request that your message use the subject 'ioccc entry'.

       If possible, we request that you hold off on EMailing your entries
       until 01-Feb-2000 00:00 UTC.  Early entries will be accepted, however.  
       We will attempt to EMail a confirmation to the sender of any entry
       received after 01-Feb-2000 00:00 UTC and before the close             
       of the contest. 

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the ---remark--- section.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Jeremy Horn, Landon
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

	    questions@ioccc.org	   (not the address for submitting entries)    

    Comments about confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:    

	http://www.ioccc.org						       

    It has rules, guidelines and winners of previous contests (1984 to date).

    As a last resort, previous winners may be obtained by sending EMail
    to questions@ioccc.org.  Please use the subject 'send YEAR winners',       
    where YEAR is a single 4 digit year or a year range (such as 1993-1994),   
    or the word 'all'.							       
14th International Obfuscated C Code Contest Guidelines, Hints and Comments    |

Copyright (c) Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll and	       |
Peter Seebach, 1998.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is  |
granted provided this this copyright and notice are included in its entirety   |
and remains unaltered.  All other uses must receive prior permission in        |
writing from the contest judges.					       |


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 1998 rules are denoted by change bars.  --->	       |
    Not every change is marked in this file is marked, but
    most are. :-)

    WHAT'S NEW IN 2000:

    The contest runs from 01-Feb-2000 00:00 UTC to 31-Mar-2000 23:59 UTC.      |

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* lint it
	* compile it
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declaration

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int 								       
	main() {							       
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),	       
    the leading '#' must be the first non-whitespace character on a line.      
    While some broken C preprocessors do not allow whitespace before a 	       
    '#', most do.							       

    The exit() function returns void.  On some broken systems have exit()      
    return int.  Your entry should assume that exit() returns a void.	       

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)
	* are identical to future losers (Windows 95) :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 1536, the total size may be less than 3217
    bytes.  This means that one may use "free of charge" up to 1681
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.  [[Q: What is special about 1681?]]

    Please do not use things like gzip to get around the size limit.	       

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:       

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.      

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.  We ask that such X client
    entries restrict themselves to only the low level Xlib and the
    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).
    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyone
    has them.  Avoid depending on a particular window manager.  Not
    everyone has X11r5, and some people are stuck back in X11r4 (or
    earlier), so try to target X11r5 without requiring X11r5.  Better
    yet, try to make your entry run on all version 11 X Window Systems.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* pass lint without complaint (not a requirement, but it is nice)
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!   
	* make us laugh and/or throw up  :-)  (humor helps!)		       

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the
    ---remark--- section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the ---remark--- section during the judging process, so it is worth
    your while to write a remarkable ---remark--- section.

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we
    intended to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule
    abuse entries, regardless of if they receive an award, result in
    changes to the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the
    rules.  An entry that violates the rules in the opinion of the
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL
    OF RISK!  If you have an entry that might otherwise be interesting,
    you might want to submit two versions; one that does not abuse the
    rules and one that does.

    If you intend to abuse the rules, indicate so in the ---remark---
    section.  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case
    as to why your entry is valid.  Humor and/or creativity help plead
    a case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.
    One reason is that we sometimes make genuine mistakes.  But in many
    cases such problems, flaws or areas of confusion are deliberate.
    Changes to rules and guidelines in response to rule abuses, are
    done in a minimal fashion.  Often we will deliberately leave
    behind holes (or introduce new ones) so that future rule abuse may
    continue.

    At the risk of stating the obvious, this contest is a parity of the
    software development process.  The rules and guidelines are
    only a small part of the overall contest.  Even so, one may think
    the contest rule and guideline process as a parody of the sometimes
    tragic mismatch between what a customer (or marketing) wants and
    what engineering delivers.


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry (the | change bars are not part
    of the example, don't add them to your entry!)

---entry---
rule:	2000                                                                   |
fix:	y
title:	chlejhse
entry:	0
date:	Wed Feb 2 00:47:00 2000                                                |
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a not-very-obfuscated C program.  It is likely not to win a
    prize, because it doesn't have what it takes to win and because the
    author plans to forget to send it in before the deadline!  :-)
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
	Earth
email:	chongo@no_spam.fake.address
	nobody@toad.com
url:	http:///reality.sgi.com/chongo
anon:	y
---author---
name:	Leonid A. Broukhis
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	leob@no_spam.fake_org
url:	http://www.mailcom.com/main.shtml
anon:	n
---author---
name:	Jeremy Horn
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	jhorn@no_spam.fake_edu
url:	none
anon:	n
---author---
name:	Peter Seebach
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	seebs@no_spam.fake_com
url:	none
anon:	y
---info---
begin 444 info.file
M5&AI<R!F:6QE(&ES(&EN('1H92!P=6)L:6,@9&]M86EN+@H*:'1T<#HO+W)E
M86QI='DN<V=I+F-O;2]C:&]N9V\*:'1T<#HO+W=W=RYI;V-C8RYO<F<*"E1H
M870@=&AA="!I<RP@:7,N"E1H870@=&AA="!I<R!N;W0L"B`@("!I<R!N;W0@
M=&AA="!T:&%T(&YO="!I<RX*5&AA="!I<RP@=&AA="!T:&%T(&ES(&YO="P@
M:7,A"@H)"2TM(&-H;VYG;R`Q.3<T"@I);B`Q.3DW+"!W:&5R92!T:&5R92!W
M87,@;F\@8V]N=&5S="`Z+2@@9'5E('1O(%-R:7)A;2!D<F]P<&EN9R!O9F8@
M=&AE"F9A8V4@;V8@=&AE($5A<G1H("AA;GEO;F4@:VYO=R!W:&5R92!3<FER
M86T@4W)I;FEV87-A;B!W96YT/R`@268@=&\@<V5N9`I%36%I;"!T;R!Q=65S
M=&EO;G-`:6]C8V,N;W)G*2!A;F0@3&%R<GD@0F%S<V5L(&)E:6YG('5N86)L
M92!T;R!C;VYT:6YU90HH9'5E('1O(&AI<R!C=7)R96YT(%!H1"!W;W)K("XN
M+B!B97-T('=I<VAE<R!,87)R>2$I+"!O;F4@;6EG:'0@<V%Y.@H*"3(@:7,@
M=&AE(&=R96%T97-T(&]D9"!P<FEM92!B96-A=7-E(&ET(&ES('1H92!L96%S
M="!E=F5N('!R:6UE+@H*06YD(&9O<B`Q.3DX(&]N92!M:6=H="!S87DZ"@H)
M4V\@;6%N>2!P<FEM97,@+BXN('-O(&QI='1L92!T:6UE(0H*26X@,3DY,BP@
M;VYE('!E<G-O;B!T;VQD('5S('1H870@=&AE>2!A8W1U86QL>2!D96-O9&5D
M('1H:7,@9FEL92X@($EN"C$Y.3,@86YD(#$Y.30@82!F97<@;6]R92!D:60@
M=&AE('-A;64N("!);B`Q.3DU+"!A(&YU;6)E<B!O9B!P96]P;&4@9G)O;0I%
M87-T97)N($5U<F]P92!T;VQD('5S('1H870@=&AE>2!D96-O9&5D('1H:7,@
M9FEL92X@(%-E96US('1H97)E(&ES(&$*<VUA;&P@=75D96-O9&4@9W)O=7`@
M:6X@16%S=&5R;B!%=7)O<&4A("`Z+2D*"E=H>2!D;VXG="!Y;W4@=&5L;"!U
M<R!W:'D@>6]U(&1E8V]D960@=&AI<R!F:6QE(&)Y('-E;F1I;F<@14UA:6P@
M=&\Z"@H)<75E<W1I;VYS0&EO8V-C+F]R9PH*4&5R:&%P<R!Y;W4@;6EG:'0@
M<W5G9V5S="!A(&)E='1E<B!E>&%M<&QE(&9I;&4@86YD('!R;V=R86T@9F]R
M('1H:7,*<V%M<&QE(&5N=')Y/R`@268@>6]U(&1O('-E;F0@:7,@82!B971T
M97(@97AA;7!L92!F:6QE+"!B92!W87)N960@+BXN"G1H870@:70@8V%N;F]T
M(&)E(&-O;G-I9&5R960@87,@82!C;VYT97-T(&5N=')Y+B`@4V\@>6]U(&UI
M9VAT(&YO=`IW86YT('1O('-E;F0@:6X@>6]U<B!B97-T('=O<FL@+BXN('-A
M=F4@=&AA="!F;W(@=&AE(&-O;G1E<W0N("!/;B!T:&4@"F]T:&5R(&AA;F0@
M+BXN('EO=2!M:6=H="!W86YT('1O('-E;F0@=7,@>6]U<B!M;W-T(&AU;6]R
M;W5S('=O<FLN("`@.BTI"E5U96YC;V1E9"!C<F5D:70@=VEL;"!B92!G:79E
;;B!I9B!W92!P:6-K('EO=7(@97AA;7!L92X*
`
end
---build---
begin 444 build
K9V-C("UA;G-I('!R;V<N8R`M3R`M1%-)3$Q97T1%1DE.12`M;R!P<F]G"@``
`
end
---program---
begin 444 prog.c
M;6%I;B@I"GL*("`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U<V-A=&5D(&)U
M="!T:&5N('=H870@9&ED('EO=2!E>'!E8W0@+BXN('1H:7,@:7,@:G5S=`H@
M("`@("H@82!P;&%C96AO;&1E<B!E>&%M<&QE+@H@("`@("HO"B`@("!P<FEN
M=&8H(E-O;65D87D@22!M:6=H="!W<FET92!A(&)E='1E<B!E>&%M<&QE+EQN
M(BD["B`@("!P<FEN=&8H(D]N('-E8V]N9"!T:&]G=6AT("XN+B!N86@A7&XB
M*3L*("`@('!R:6YT9B@B4V5N9"!U<R!A(&=O;V0@97AA;7!L92!B=70@8F4@
M=V%R;F5D+"!A;GD@97AA;7!L92!Y;W5<;B(I.PH@("`@<')I;G1F*")S96YD
M('5S('=I;&P@;F]T(&)E(&-O;G-I9&5R960@87,@86X@96YT<GD@9F]R('1H
M92!C;VYT97-T(5QN(BD["B`@("!P<FEN=&8H(E-O('EO=2!M:6=H="!N;W0@
M=V%N="!T;R!S96YD(&%N(&5X86UP;&4@;V8@>6]U<B!B97-T('=O<FM<;B(I
M.PH@("`@<')I;G1F*"(N+BX@<V%V92!T:&%T(&9O<B!T:&4@8V]N=&5S="X@
M($)U="!A(&=O;V0@:'5M;W)O=7,@<')O9R!M:6=H=%QN(BD["B`@("!P<FEN
M=&8H(F1O("XN+B!A;F0@=V4@=VEL;"!G:79E('EO=2!U=65N8V]D960@8W)E
M9&ET(&EN(')E='5R;BY<;B(I.PH@("`@+RH@14UA:6PZ('%U97-T:6]N<T!I
M;V-C8RYO<F<@*B\*(VEF("%D969I;F5D*%-)3$Q97T1%1DE.12D*("`@(&UA
F:6XH*3L*(V5N9&EF"B`@("!E>&ET*#(Q-S`Q("4@,3(W*3L*?0H`
`
end
---end---

    Your entry's sections must be the same order as in the above example.

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    Please note that the title must match the following regexp:

	^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$

    and must be 1 to 31 chars in length.  Titles such as:		       |

	foo.c
	this_invalid_title_is_too_long					       !
	/dev/null

    are right out!  :-)

    Titles can be 31 chars long now, but please try to keep them short.	       |
    Why 31?  Because at lesst one of the judges likes Mersenne primes!	       |

    It is suggested, but not required, that the title should incorporate
    the author(s) username(s).

    If the above entry somehow won the 'least likely to win' award,
    we would use chonglab.c and chonglab.

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name

	    or  rm -f special_src.c
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.
    It is also ok to use a "gcc" command (and gcc args).  However keep
    in mind that your entry should be compilable by any standard ANSI C
    compiler and thus should not depend on a special gcc feature.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect us to see it.  (Our decoding tools are not AI
    progs!) If you need tell the judges something, put it in the
    ---remark--- section, or send a EMail to:

	questions@ioccc.org	(not the address for submitting entries)       |

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Wed Feb 2 00:47:00 2000

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 20%y"                                            |
	date -u | sed -e 's/... \(20[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date | sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date | sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date | sed -e "s/... \(20[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmission uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.

JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Jeremy Horn, Landon Curt Noll    
    and Peter Seebach.							       

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections and the title from the ---entry--- section
    are not read until the judging process is complete, and then only
    from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the Usenix announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* linting the source
	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* <anything else so strange that it deserves an award>

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The first announcement, occurs at the main Usenix conference.  By
    tradition, this is done during the IOCCC BOF. Like in 1999, 	       |
    an announcement may take place on the web first in May 2000, just          |
    before the conference.                                                     |

    Winning entries will be posted in June to the following groups:            |

	    comp.lang.c		 comp.lang.c.moderated  alt.sources	       

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming       
	    misc.misc		 comp.std.c		alt.folklore.computers 

    Winning entries will be deposited into the uunet archives.  See
    below for details.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	questions@ioccc.org	(not the address for submitting entries)       

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, send EMail to the address
    above and use the subject 'send rules'.

    Check out the IOCCC Web page:

	http://www.ioccc.org						       

    It has rules, guidelines and winners of previous contests (1984 to date).  

    As a last resort, previous winners may be obtained by sending EMail	       
    to questions@ioccc.org.  Please use the subject 'send YEAR winners',       
    where YEAR is a single 4 digit year or a year range (such as 1993-1994),   
    or the word 'all'.							       

Leonid A. Broukhis 							       
Jeremy Horn 								       
chongo <Landon Curt Noll> /\cc/\
Peter Seebach 								       
	    16th International Obfuscated C Code Contest Rules		       |

Copyright (c) Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and	       |
Peter Seebach, 2001.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 16th IOCCC contest window is:					       |

		01-Oct-2001 00:00 UTC  to  01-Dec-2001 23:59:59 UTC	       |

NOTE: Some of the changes from the 2000 rules are denoted by change bars. ---> |


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The uudecoded size of your program source must be <= 4096 bytes in      |
       length.  The number of characters (after uudecoding your program)       |
       excluding whitespace (tab, space, newline, formfeed, return), and       |
       excluding any ; { or } immediately followed by whitespace or end	       |
       of file, must be <= 2048.

    3) Your entry must be submitted in the following format:
									       |
       NOTE: The change bars are not part of the rules, don't add the	       |
       	     change bars to your entry!					       |

---entry---
rule:	2001								       |
fix:	y or n   (n => this is a new entry, y => this replaces an older entry)
title:	title of entry  		    (see comments below)
entry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)
date:	Date/time of submission in UTC	    (see comments below)
host:	Machine(s) and OS(s) under which your entry was tested
	Use tab indented lines if needed
---remark---
    Place remarks about this entry in this section.  It would be helpful if
    you were to indent your remarks with 4 spaces, though it is not a
    requirement.  Also, if possible, try to avoid going beyond the 79th
    column.  Blank lines are permitted.
---author---
name:	your name
org:	School/Company/Organization
addr:	postal address
	use tab indented lines to continue
	don't forget to include the country
email:  EMail address from a well known site or registered domain.
        If you give several forms, list them on separate tab indented lines.
url:	http://your/home/page.html or say none if you don't have one
anon:	y or n   (y => remain anonymous, n => OK to publish this info)
---info---
If your program needs an info file, place a uuencoded copy of it in
this section.  In the case of multiple info files, use multiple info
sections.  If your entry does not need a info file, skip this section.
---build---
Place a uuencoded copy of the command(s) used to compile/build your program
in this section.  It must uudecode into a file named 'build'.  The resulting
file must be 521 bytes or less.						       |
---program---
Place a uuencoded copy of your program in this section.  It must uudecode
into a file named is 'prog.c'.  The resulting file must follow rule #2.
---end---

      Regarding the above format:

	* The title must match the expression:

		^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$

	  and must be 1 to 31 characters in length.

	  It is suggested, but not required, that the title should
	  incorporate the author(s) username(s).

	* The date in the ---entry--- section should be given with respect
	  to UTC.  The format of the date should be as returned by asctime()
	  using the C locale.  (see guidelines for more info)

	* You may correct/revise a previously submitted entry by sending
	  it to the contest email address.  Be sure to set 'fix' in the
	  ---entry--- section to 'y'.  The corrected entry must use the same
	  title and entry number as submission that is being corrected.  Be
	  sure that you note the re-submission in the ---remark--- as well.

	* With the exception of the header, all text outside of the above
	  format may be ignored by the judges.  If you need to tell the judges
	  something, put it in the ---remark--- section, or send a separate
	  EMail message to the judges.

	* Information from the ---author--- section will be published unless
	  'y' was given to the respective author's 'anon' line.

	* To credit multiple authors, include an ---author--- section for
	  each author.  Each should start with ---author--- line, and
	  should be found between the ---entry--- and ---build--- sections.

	* The home page URL in the ---author--- section must be fully
	  qualified or must be the word `none'.

	* The entry's remarks should include:
	    - note if this entry is a re-submission of a previous entry.
	    - what this program does
	    - how to run the program (sample args or input)
	    - special compile or execution instructions, if any
	    - special filename requirements (see rule 4 and 5)
	    - information about any ---info--- files
	    - why you think the program is obfuscated
	    - any other remarks (humorous or otherwise)

	* Do not rot13 your entry's remarks.  You may suggest that certain
	  portions of your remarks be rot13ed if your entry wins an award.

        * Info files should be used only to supplement your entry.  They
	  should not be required to exist.

	* If your entry does not need an info file, skip the ---info---
	  section.  If your entry needs multiple info files, use multiple
	  ---info--- sections, one per info file.  You should describe
	  each info file in the ---remark--- section.

	* Your sections must in the same order as in the above template.
									       |
	* The size limits of the program source apply to the decoded version   |
	  of the ---program--- section.					       |

    4) If your entry is selected as a winner, it will be modified as follows:

	   'build' is incorporated into a makefile, and 'build' is removed
	   'prog.c' is renamed to your entry's title, followed by an optional
	       digit, followed by '.c'
	   your entry is compiled into a file with the name of your entry's
	       title, possibly followed by a digit

       If your entry requires that a build file exist, state so in your
       entry's remark section.  The makefile will be arranged to execute a
       build shell script containing the 'build' information.  The name of
       this build shell script will be your entry's title, possibly followed
       by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry must
       be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) The uudecoded ---program--- section must be able to be compiled
       cleanly by an ANSI C compiler, or if there are any compile errors,
       they must be documented in the ---remark--- section.

    7) The program must be of original work.  All submitted programs are       |
       are thereby put in the public domain.  All explicitly copyrighted       |
       programs will be rejected.					       |

    8) Entries must be received prior to 01-Dec-2001 23:59:59 UTC. (UTC is     |
       essentially equivalent to Greenwich Mean Time)  EMail your entries to:

	    entry@ioccc.org
									       |
       You must include the words ``ioccc entry'' in the subject	       |
       of your EMail when sending in your entry!  Failure to do so may         |
       result in the loss of your entry!				       !

       If possible, we request that you hold off on EMailing your entries
       until 01-Oct-2001 00:00 UTC.  Early entries will be accepted, however.  |
       We will attempt to EMail a confirmation to the sender of any entry
       received after 01-Oct-2001 00:00 UTC and before the close               |
       of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be sent in a separate EMail letter.

   10) Entries requiring human interaction to be built are not allowed.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not allowed.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the ---remark--- section.
									       |
   13) Your source may not contain unescaped octets with the high bit set.     |
       I.e., your source may not contain octet values between 128 and 255.     |
									       |
   14) Any program that fails to compile because of lines with trailing	       |
       control-M's (\r or \015) will be rejected.			       |


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon       |
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

	    questions@ioccc.org	   (not the address for submitting entries)

    You must include the words ``ioccc question'' in the subject of your       |
    EMail message when sending EMail to the judges.			       |

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).
									       |
    NOTE: A copy of the mkentry program may be found at:		       |
									       |
	http://www.ioccc.org/official/mkentry.c				       |
16th International Obfuscated C Code Contest Guidelines, Hints and Comments    |

Copyright (c) Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and	       |
Peter Seebach, 2001.							       |

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


ABOUT THIS FILE:

    This file is intended to help people who wish to submit entries to
    the International Obfuscated C Code Contest (IOCCC for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    Changes from the 2000 rules are denoted by change bars.  --->	       |
    Not every change is marked in this file is marked, but
    most are. :-)

    WHAT'S NEW IN 2001:							       |

    The contest runs from 01-Oct-2001 00:00 UTC to 01-Dec-2001 23:59 UTC.      |

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)		       |
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations       |

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int
	main() {
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first non-whitespace character on a line.
    While some broken C preprocessors do not allow whitespace before a
    '#', most do.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)
	* are identical to future losers (Windows XP) :-)		       |

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.
									       |
    You should try to restrict commands used on the build file to	       |
    POSIX-like or common Un*x-like commands.  You can also compile	       |
    and use your own programs.  If you do, try to build and execute	       |
    from the current directory.  This restriction is not a hard and	       |
    absolute one.  The intent is to ensure that the building if your	       |
    program is reasonably portable.					       |
									       |
    Don't forget that the building of your program should be done	       |
    ***without human intervention***.  So don't do:			       |
									       |
	cat > prog.c							       |
	cc prog.c -o prog						       |
									       |
    However, you can do something cute such as making your program	       |
    do something dumb (or cute) when build 'automatically'.  However	       |
    when it is run with a human involved, do something more cleaver.	       |
    For example, one could use the build instructions:			       |
									       |
	cc prog.c -DNONHUMAN -o prog					       |
	echo "See remarks section about alternate ways to compile"	       |
									       |
    and then include special notes in the ---remarks--- section for	       |
    alternate / human intervention based building.			       |

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096      |
    bytes.  This means that one may use "free of charge" up to 2048	       |
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:	       |
									       |
	char b[] = "Is this Ok";					       |
	b[9] = 'K';							       |

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    We don't like entries that use proprietary M*tif, Xv*ew, or OpenL*ok       |
    toolkits, since not everyone has them.  Use of OpenMotif is permitted      |
    because it is more widely and freely available.			       |

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the ---remark--- section.

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
	* make us laugh and/or throw up  :-)  (humor helps!)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the
    ---remark--- section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the ---remark--- section help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the ---remark--- section during the judging process, so it is worth
    your while to write a remarkable ---remark--- section.
									       |
    We dislike C code with trailing control-M's (\r or \015) that results      |
    in compilation failures.  Some non-Un*x/non-Linux tools such as	       |
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.	       |
    Users of such tools should strip off such control-M's before submitting    |
    their entries.  In some cases tools have a "Save As" option that will      |
    prevent such trailing control-M's being added.			       |
									       |
    We dislike entries that depend on non-portable libcurses features such     |
    as halfdelay().  One should restrict libcurses to portable features	       |
    found on BSD and SVR4/System V curses.				       |
									       |
    The rules disallow source that contains unescaped octets with values       |
    between 128 and 255.  You must use \octal or \hex escapes instead:	       |
									       |
		  /* 123456789 123456789 123456789 123456 */		       |
	char *foo = "This string is 36 octets in length \263";		       |
	      /* This octet requires 4 octets of source ^^^^ */		       |
	if (strlen(foo) == 36) printf("foo is 36 octets a final NUL\n");       |

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we
    intended to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule
    abuse entries, regardless of if they receive an award, result in
    changes to the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the
    rules.  An entry that violates the rules in the opinion of the
    judges, WILL be disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL
    OF RISK!  If you have an entry that might otherwise be interesting,
    you might want to submit two versions; one that does not abuse the
    rules and one that does.

    If you intend to abuse the rules, indicate so in the ---remark---
    section.  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case
    as to why your entry is valid.  Humor and/or creativity help plead
    a case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.
    One reason is that we sometimes make genuine mistakes.  But in many
    cases such problems, flaws or areas of confusion are deliberate.
    Changes to rules and guidelines in response to rule abuses, are
    done in a minimal fashion.  Often we will deliberately leave
    behind holes (or introduce new ones) so that future rule abuse may
    continue.

    At the risk of stating the obvious, this contest is a parity of the
    software development process.  The rules and guidelines are
    only a small part of the overall contest.  Even so, one may think
    the contest rule and guideline process as a parody of the sometimes
    tragic mismatch between what a customer (or marketing) wants and
    what engineering delivers.


ENTRY FORMAT:

    In order to help us process the many entries, we must request your
    assistance by formatting your entries in a certain way.  This format,
    in addition, allows us to quickly separate information about the
    author from the program itself.  (see JUDGING PROCESS)

    We have provided the program, mkentry, as an example of how to
    format entries.  You should be aware of the following warning that
    is found in mkentry.c:

	This program attempts to implement the IOCCC rules.  Every
	attempt has been made to make sure that this program produces
	an entry that conforms to the contest rules.  In all cases,
	where this program differs from the contest rules, the
	contest rules will be used.  Be sure to check with the
	contest rules before submitting an entry.
									       |
    NOTE: A copy of the mkentry program may be found at:		       |
									       |
	http://www.ioccc.org/official/mkentry.c				       |

    You are not required to use mkentry.  It is convenient, however,
    as it attempts to uuencode the needed files, and attempt to check
    the entry against the size rules.

    If you have any suggestions, comments, fixes or complaints about
    the mkentry.c program, please send EMail to the judges.  (see below)

    The following is a sample entry (the change bars are not part
    of the example, don't add them to your entry!)

---entry---
rule:	2001								       |
fix:	y
title:	chlejhse
entry:	0
date:	Wed Feb 2 00:47:00 2001						       |
host:	Un*x v6, pdp11/45
	2.9BSD, pdp11/70
---remark---
    This is a not-very-obfuscated C program.  It is likely not to win a
    prize, because it doesn't have what it takes to win and because the
    author plans to forget to send it in before the deadline!  :-)
---author---
name:	Landon Curt Noll
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
	Earth
email:	chongo@no_spam.fake.address
	nobody@toad.com
url:	http://www.isthe.com/chongo/index.html				       |
anon:	y
---author---
name:	Leonid A. Broukhis
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	leob@no_spam.fake_org
url:	http://www.mailcom.com/main.shtml
anon:	n
---author---
name:	Simon Cooper							       |
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	sc@no_spam.fake_edu						       |
url:	http://www.sfik.com						       |
anon:	n
---author---
name:	Peter Seebach
org:	IOCCC Judging Group
addr:	Toad Hall
	PO Box 170608
	San Francisco, California
	94117-0608
	USA
email:	seebs@no_spam.fake_com
url:	none
anon:	y
---info---
begin 664 info.file
M5&AI<R!F:6QE(&ES(&EN('1H92!P=6)L:6,@9&]M86EN+@H*:'1T<#HO+W=W
M=RYI;V-C8RYO<F<*"E1H870@=&AA="!I<RP@:7,N"E1H870@=&AA="!I<R!N
M;W0L"B`@("!I<R!N;W0@=&AA="!T:&%T(&YO="!I<RX*5&AA="!I<RP@=&AA
M="!T:&%T(&ES(&YO="P@:7,A"@H)"2TM(&-H;VYG;R`Q.3<T"@I/;F4@;6EG
M:'0@<V%Y.@H*"3(@:7,@=&AE(&=R96%T97-T(&]D9"!P<FEM92!B96-A=7-E
M(&ET(&ES('1H92!L96%S="!E=F5N('!R:6UE+@H)4V\@;6%N>2!P<FEM97,@
M+BXN('-O(&QI='1L92!T:6UE(0H*26X@,3DY,BP@;VYE('!E<G-O;B!T;VQD
M('5S('1H870@=&AE>2!A8W1U86QL>2!D96-O9&5D('1H:7,@9FEL92X@($EN
M"C$Y.3,@86YD(#$Y.30@82!F97<@;6]R92!D:60@=&AE('-A;64N("!);B`Q
M.3DU+"!A(&YU;6)E<B!O9B!P96]P;&4@9G)O;0I%87-T97)N($5U<F]P92!T
M;VQD('5S('1H870@=&AE>2!D96-O9&5D('1H:7,@9FEL92X@(%-E96US('1H
M97)E(&ES(&$*<VUA;&P@=75D96-O9&4@9W)O=7`@:6X@16%S=&5R;B!%=7)O
M<&4A("`Z+2D*"E=H>2!D;VXG="!Y;W4@=&5L;"!U<R!W:'D@>6]U(&1E8V]D
M960@=&AI<R!F:6QE(&)Y('-E;F1I;F<@14UA:6P@=&\Z"@H)<75E<W1I;VYS
M0&EO8V-C+F]R9PH*4&5R:&%P<R!Y;W4@;6EG:'0@<W5G9V5S="!A(&)E='1E
M<B!E>&%M<&QE(&9I;&4@86YD('!R;V=R86T@9F]R('1H:7,*<V%M<&QE(&5N
M=')Y/R`@268@>6]U(&1O('-E;F0@:7,@82!B971T97(@97AA;7!L92!F:6QE
M+"!B92!W87)N960@+BXN"G1H870@:70@8V%N;F]T(&)E(&-O;G-I9&5R960@
M87,@82!C;VYT97-T(&5N=')Y+B`@4V\@>6]U(&UI9VAT(&YO=`IW86YT('1O
M('-E;F0@:6X@>6]U<B!B97-T('=O<FL@+BXN('-A=F4@=&AA="!F;W(@=&AE
M(&-O;G1E<W0N("!/;B!T:&4@"F]T:&5R(&AA;F0@+BXN('EO=2!M:6=H="!W
M86YT('1O('-E;F0@=7,@>6]U<B!M;W-T(&AU;6]R;W5S('=O<FLN("`@.BTI
M"E5U96YC;V1E9"!C<F5D:70@=VEL;"!B92!G:79E;B!I9B!W92!P:6-K('EO
6=7(@97AA;7!L92X*"D9I>GIB:6XA"@``
`
end
---build---
begin 664 build
M9V-C("UA;G-I('!R;V<N8R`M3R`M1%9%4EE?4TE,3%E?1$5&24Y%("UO('!R
#;V<*
`
end
---program---
begin 664 prog.c
M;6%I;B@I"GL*("`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U<V-A=&5D(&)U
M="!T:&5N('=H870@9&ED('EO=2!E>'!E8W0@+BXN('1H:7,@:7,@:G5S=`H@
M("`@("H@82!P;&%C96AO;&1E<B!E>&%M<&QE+@H@("`@("HO"B`@("!P<FEN
M=&8H(E-O;65D87D@22!M:6=H="!W<FET92!A(&)E='1E<B!E>&%M<&QE+EQN
M(BD["B`@("!P<FEN=&8H(D]N('-E8V]N9"!T:&]G=6AT("XN+B!N86@A7&XB
M*3L*("`@('!R:6YT9B@B4V5N9"!U<R!A(&=O;V0@97AA;7!L92!B=70@8F4@
M=V%R;F5D+"!A;GD@97AA;7!L92!Y;W5<;B(I.PH@("`@<')I;G1F*")S96YD
M('5S('=I;&P@;F]T(&)E(&-O;G-I9&5R960@87,@86X@96YT<GD@9F]R('1H
M92!C;VYT97-T(5QN(BD["B`@("!P<FEN=&8H(E-O('EO=2!M:6=H="!N;W0@
M=V%N="!T;R!S96YD(&%N(&5X86UP;&4@;V8@>6]U<B!B97-T('=O<FM<;B(I
M.PH@("`@<')I;G1F*"(N+BX@<V%V92!T:&%T(&9O<B!T:&4@8V]N=&5S="X@
M($)U="!A(&=O;V0@:'5M;W)O=7,@<')O9R!M:6=H=%QN(BD["B`@("!P<FEN
M=&8H(F1O("XN+B!A;F0@=V4@=VEL;"!G:79E('EO=2!U=65N8V]D960@8W)E
M9&ET(&EN(')E='5R;BY<;B(I.PH@("`@+RH@14UA:6PZ('%U97-T:6]N<T!I
M;V-C8RYO<F<@*B\*(VEF("%D969I;F5D*%9%4EE?4TE,3%E?1$5&24Y%*0H@
K("`@;6%I;B@I.PHC96YD:68*("`@(&5X:70H,C,R,#D@)2`Q,C<I.PI]"@``
`
end
---end---

    Your entry's sections must be the same order as in the above example.

    Typically the build file should assume that the source is prog.c
    and will compile into prog.  If an entry wins, we will rename
    its source and binary to avoid filename collision.  By tradition,
    we use the name of the entry's title, followed by an optional
    digit in case of name conflicts.

    Please note that the title must match the following regexp:

	^[a-zA-Z0-9_=][a-zA-Z0-9_=+-]*$

    and must be 1 to 31 chars in length.  Titles such as:

	foo.c
	this_invalid_title_is_too_long
	/dev/null

    are right out!  :-)

    Titles can be 31 chars long now, but please try to keep them short.
    Why 31?  Because at least one of the judges likes Mersenne primes!

    It is suggested, but not required, that the title should incorporate
    the author(s) username(s).

    If the above entry somehow won the 'least likely to win' award,
    we would use chlejhse.c and chlejhse.				       |

    If your entry depends on, or requires that your build, source
    and/or binary files be a particular name, please say so in the
    ---remark--- section.  If this case applies, it would be be helpful
    if you did one of the following:

	* Tell us how to change the filename(s) in your entry.

	* Have the build file make copies of the files.  For example:

		cc prog.c -o special_name

	    or  rm -f special_src.c
		cp prog.c special_src.c
		cc special_src.c -o special_name

	    or  rm -f special_build
		tail +4 build > special_build
		sh < special_build

	* Assume that we will use the entry title.  Send us a version of
	  your build/program files that uses the name convention.  You
	  should uuencode these files in ---info--- sections.

    If your entry needs to modify its source, info or binary files,
    please say so in the ---remark--- section.  You should try to avoid
    touching your original build, source and binary files.  You should
    arrange to make copies of the files you intend to modify.  This
    will allow people to re-generate your entry from scratch.

    Remember that your entry may be built without a build file.  We
    typically incorporate the build lines into a Makefile.  If the
    build file must exist, say so in the ---remark--- section.

    Typically the ---build--- command will contain a "cc" command.
    It is also ok to use a "gcc" command (and gcc args).  However keep
    in mind that your entry should be compilable by any standard ANSI C
    compiler and thus should not depend on a special gcc feature.

    If your entry needs special info files, you should uuencode them
    into ---info--- sections.  In the case of multiple info files,
    use multiple ---info--- sections.  If no info files are needed,
    then skip the ---info--- section.

    Info files are intended to be input, or detailed information that
    does not fit well into the ---remark--- section.  For example, an
    entry that implements a compiler might want to provide some sample
    programs for the user to compile.  An entry might want to include a
    lengthy design document, that might not be appropriate for a
    'hints' file.

    Info files should be used only to supplement your entry.  For
    example, info files may provide sample input or detailed
    information about your entry.  Because they are supplemental,
    the entry should not require them exist.

    In some cases, your info files might be renamed to avoid name
    conflicts.  If info files should not be renamed for some reason,
    say so in the ---remark--- section.

    Info files must uudecode into the current directory.  If they
    absolutely must be renamed, or moved into a sub-directory, say
    so in the ---remark--- section.

    When submitting multiple entries, be sure that each entry has
    a unique entry number from 0 to 7.  Your first entry should
    have entry number 0.

    With the exception of the header, all text outside of the entry
    format may be ignored.  That is, don't place text outside of the
    entry and expect us to see it.  (Our decoding tools are not AI
    progs!) If you need tell the judges something, put it in the
    ---remark--- section, or send a EMail to:

	questions@ioccc.org	(not the address for submitting entries)
									       |
    You must include the words 'ioccc question'	in the subject of your         |
    EMail message when sending EMail to the judges.			       |

    The date should be given with respect to UTC.  (Some systems refer
    to this as GMT or GMT0)  The format of the date should be that as
    returned by asctime() in the C locale.  An example of such a string is:

	Wed Feb 2 00:47:00 2001

    This format is similar to the output of the date(1) command.  The
    string does not include the timezone name before the year.  On many
    systems, one of the following command will produce a similar string:

	date -u "+%a %h %d %T 20%y"
	date -u sed -e 's/... \(20[0-9][0-9]\)$/\1/'
	sh -c 'TZ=UTC date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
	sh -c 'TZ=GMT0 date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'

    You are allowed to update/fix/revise your entry.  To do so, set
    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
    Be sure that the resubmission uses the same title and entry number
    as well, as these are used to determine which entry is to be
    replaced.

    Again, you may want to use the mkentry program may be found at:	       |
									       |
	http://www.ioccc.org/official/mkentry.c				       |
									       |
    to format your entry.						       |

									       |
JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll
    and Peter Seebach.

    Entries are unpacked into individual directories.  The EMail message
    is unpacked into individual files, each containing:

	---entry--- section
	all ---author--- sections
	all ---info--- sections
	---build--- section
	---program--- section
	any other text, including the EMail message headers

    Prior to judging, the 'any other text' file is scanned to be sure
    it does not contain useful information (or in case the entry was
    malformed and did not unpack correctly).  Information from the
    ---author--- sections and the title from the ---entry--- section
    are not read until the judging process is complete, and then only
    from entries that have won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the ---entry--- section
	* reading the uudecoded ---build--- section
	* reading the uudecoded ---program--- section
	* reading the uudecoded ---info--- section(s), if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry often will compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    In Jan or Feb 2002 the judges will post an initial announcement of who     |
    won, the name of their award, and a very brief description of the	       |
    winning entry on the IOCCC web site:				       |
									       |
	    http://www.ioccc.org/whowon.html				       |
									       |
    We will also submit a brief announcement story to /.:		       |
									       |
	    http://www.slashdot.org					       |
									       |
    that, depending on the willingness of the /. editors, may be posted	       |
    to their site at the same time.					       |
									       |
    Note that initial announcement will NOT contain source.  This is because   |
    the winning authors are given a chance to review the judges comments,      |
    and test our Makefile.  This review process typically takes a few weeks.   |
									       |
    Sometime after the initial announcement, and once the the review by	       |
    the winners has been completed (perhaps Feb or Mar 2002), the winning      |
    source will be posted to the IOCCC web site:		               |
									       |
	    http://www.ioccc.org/years.html				       |
									       |
    	    NOTE: previous winners are available at that URL		       |
									       |
    We will submit a story announcing the availability of the winners	       |
    to /. at the same time.						       |

    Finally (again perhaps Feb or Mar 2002) the winning entries will be        |
    posted to the following groups:					       |

	    comp.lang.c		 comp.lang.c.moderated  alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming
	    misc.misc		 comp.std.c		alt.folklore.computers

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	questions@ioccc.org	(not the address for submitting entries)

    You must include the words 'ioccc question'	in the subject of your         |
    EMail message when sending EMail to the judges.			       |
									       |
    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach
	    17th International Obfuscated C Code Contest Rules

Copyright (C) 2004 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 17th IOCCC contest window is:

		07-Jan-2004 00:00 UTC to 29-Feb-2004 23:59:59 UTC

RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.
       The number of characters excluding whitespace (tab, space,
       newline, formfeed, return), and excluding any ; { or } immediately
       followed by whitespace or end of file, must be <= 2048.

    3) Submissions should be performed using the instructions outlined at,

       http://www.ioccc.org/2004/submit

       NOTE: After 26-Jan-2004, 00:00 UTC an online submission mechanism will
       be available.  See the above URL for details.

    4) If your entry is selected as a winner, it will be modified as follows:

	   Your 'build' instructions will be incorporated into a
           makefile.  If your build instructions *is* a makefile then
           it should be portable and usable from within a master
           makefile.

	   Your program source will be renamed using an identifier of
           our choice (usually your family name or anonymous) followed
           by an optional digit, followed by '.c'

	   Your entry will be compiled into a file with the above name
           minus the '.c'.

       If your entry requires that a build file exist, state so in
       your entry's remark section.  The makefile will be arranged to
       execute a build shell script containing the 'build'
       information.  The name of this build shell script will be your
       entry's title, possibly followed by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry
       must be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Your program source must be able to be compiled cleanly by an ANSI C
       compiler, or if there are any compile errors, they must be documented
       in the "remarks" section of your submission.

    7) The program must be of original work.  All submitted programs are
       are thereby put in the public domain.  All explicitly copyrighted
       programs will be rejected.

    8) Entries must be received prior to 29-Feb-2004 23:59:59 UTC. (UTC is
       essentially equivalent to Greenwich Mean Time).

       An EMail a confirmation of submission will be sent to the sender
       before the close of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be submitted separately.

   10) Entries requiring human interaction to be built are not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner or group) are not permitted.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the submitted "remarks".

   13) Your source may not contain unescaped octets with the high bit set.
       I.e., your source may not contain octet values between 128 and 255.

   14) Any program that fails to compile because of lines with trailing
       control-M's (\r or \015) will be rejected.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.  
       Submissions that are similar to previous entries are discouraged.

FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

	    q.2004@ioccc.org	   (not the address for submitting entries)

    You must include the words ``ioccc 2004 question'' in the subject of
    your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    Detail of how to submit your entry are located at,

        http://www.ioccc.org/2004/submit
17th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (C) 2004 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC
    for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    WHAT'S NEW IN 2004:

    The contest runs from 07-Jan-2004 00:00 UTC to 29-Feb-2004 23:59:59 UTC

    An online submission mechanism will be available after
    26-Jan-2004, 00:00 UTC.  See the following for details,

       http://www.ioccc.org/2004/submit

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int
	main() {
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first non-whitespace character on a line.
    While some broken C preprocessors do not allow whitespace before a
    '#', most do.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

	cat > prog.c
	cc prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when build 'automatically'.  However
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

	cc prog.c -DNONHUMAN -o prog
	echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096
    bytes.  This means that one may use "free of charge" up to 2048
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

	char b[] = "Is this Ok";
	b[9] = 'K';

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    We don't like entries that use proprietary M*tif, Xv*ew, or OpenL*ok
    toolkits, since not everyone has them.  Use of OpenMotif is permitted
    because it is more widely and freely available.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
	* make us laugh and/or throw up  :-)  (humor helps!)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD and SVR4/System V curses.

    The rules disallow source that contains unescaped octets with values
    between 128 and 255.  You must use \octal or \hex escapes instead:

		  /* 123456789 123456789 123456789 123456 */
	char *foo = "This string is 36 octets in length \263";
	      /* This octet requires 4 octets of source ^^^^ */
	if (strlen(foo) == 36) printf("foo is 36 octets a final NUL\n");

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the entry format tends to annoy us more than amuse us.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll
    and Peter Seebach.

    Each entry submitted is given an id number and subdirectory.  The
    "program", "info", "build" and "remarks" portions of a submission are
    stored and judged from this directory.

    Any "author" and identifiable "entry" information is not read until
    the judging process is complete, and then only from entries that have
    won an award.

    The above process helps keep us biased for/against any one particular
    individual.  We are usually kept in the dark as much as you are
    until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the "build" information
	* reading the "program"
	* reading the program "info", if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry os good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:
									  
	    http://www.ioccc.org/whowon.html				  
									  
    We will also submit a brief announcement story to /.:		  

	    http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

	    http://www.ioccc.org/years.html

    	    NOTE: previous winners are available at that URL

    We will submit a story announcing the availability of the winners
    to /. at the same time.

    Finally the winning entries will be posted to the following groups:

	    comp.lang.c		 comp.lang.c.moderated  alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming
	    misc.misc		 comp.std.c		alt.folklore.computers

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

	q.2004@ioccc.org	(not the address for submitting entries)

    You must include the words 'ioccc 2004 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach
18th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (C) 2005 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC
    for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

|   WHAT'S NEW IN 2005:

|   The contest runs from 21-Mar-2005 00:00 UTC to 22-May-2005 23:59:59 UTC.

|   We will only accept online submissions this year.
    See the following for details,

|	http://www.ioccc.org/2005/submit

|  Most of the changes in the rules and guidelines for this year have been
|  marked with a "|" character on the left hand side.

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int
	main() {
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    If you use C preprocessor directives (#define, #if, #ifdef, ...),
    the leading '#' must be the first non-whitespace character on a line.
    While some broken C preprocessors do not allow whitespace before a
    '#', most do.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

	cat > prog.c
	cc prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when build 'automatically'.  However
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

	cc prog.c -DNONHUMAN -o prog
	echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096
    bytes.  This means that one may use "free of charge" up to 2048
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

	char b[] = "Is this Ok";
	b[9] = 'K';

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    We don't like entries that use proprietary M*tif, Xv*ew, or OpenL*ok
    toolkits, since not everyone has them.  Use of OpenMotif is permitted
    because it is more widely and freely available.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
	* make us laugh and/or throw up  :-)  (humor helps!)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD and SVR4/System V curses.

    The rules disallow source that contains unescaped octets with values
    between 128 and 255.  You must use \octal or \hex escapes instead:

		  /* 123456789 123456789 123456789 123456 */
	char *foo = "This string is 36 octets in length \263";
	      /* This octet requires 4 octets of source ^^^^ */
	if (strlen(foo) == 36) printf("foo is 36 octets a final NUL\n");

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

|   Abusing the web submission procedure tends to annoy us more
|   than amuse us.  Spend your creative energy on content of your
|   entry rather than on the submission process itself.    

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll
    and Peter Seebach.

    Each entry submitted is given an id number and subdirectory.  The
    "program", "info", "build" and "remarks" portions of a submission are
    stored and judged from this directory.

    Any "author" and identifiable "entry" information is not read until
    the judging process is complete, and then only from entries that have
    won an award.

    The above process helps keep us biased for/against any one particular
|   individual.  Therefore you MUST refrain from putting any information
|   that reveals your identity in the "program", "info", "build", or "remarks"
|   portions of your entry.  We are usually kept in the dark as much as you
|   are until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the "build" information
	* reading the "program"
	* reading the program "info", if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:
									  
	    http://www.ioccc.org/whowon.html				  
									  
    We will also submit a brief announcement story to /.:		  

	    http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

	    http://www.ioccc.org/years.html

    	    NOTE: previous winners are available at that URL

    We will submit a story announcing the availability of the winners
    to /. at the same time.

    Finally the winning entries will be posted to the following groups:

	    comp.lang.c		 comp.lang.c.moderated  alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming
	    misc.misc		 comp.std.c		alt.folklore.computers

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|	q.2005@ioccc.org	(do not submit entries to this address)

|   You must include the words 'ioccc 2005 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach

	    18th International Obfuscated C Code Contest Rules

Copyright (C) 2005 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 18th IOCCC contest window is:

|		21-Mar-2005 00:00 UTC to 22-May-2005 23:59:59 UTC

RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.
       The number of characters excluding whitespace (tab, space,
       newline, formfeed, return), and excluding any ; { or } immediately
       followed by whitespace or end of file, must be <= 2048.

    3) Submissions should be performed using the instructions outlined at,

|      http://www.ioccc.org/2005/submit

    4) If your entry is selected as a winner, it will be modified as follows:

	   Your 'build' instructions will be incorporated into a
           makefile.  If your build instructions *is* a makefile then
           it should be portable and usable from within a master
           makefile.

	   Your program source will be renamed using an identifier of
           our choice (usually your family name or anonymous) followed
           by an optional digit, followed by '.c'

	   Your entry will be compiled into a file with the above name
           minus the '.c'.

       If your entry requires that a build file exist, state so in
       your entry's remark section.  The makefile will be arranged to
       execute a build shell script containing the 'build'
       information.  The name of this build shell script will be your
       entry's title, possibly followed by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry
       must be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Your program source must be able to be compiled cleanly by an ANSI C
       compiler, or if there are any compile errors, they must be documented
       in the "remarks" section of your submission.

    7) The program must be of original work.  All submitted programs are
       are thereby put in the public domain.  All explicitly copyrighted
       programs will be rejected.

|   8) Entries must be received prior to 22-May-2005 23:59:59 UTC.

       An EMail a confirmation of submission will be sent to the sender
       before the close of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be submitted separately.

   10) Entries requiring human interaction to be built are not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
|       special owner or group) are highly discouraged.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the submitted "remarks".

   13) Your source may not contain unescaped octets with the high bit set.
       I.e., your source may not contain octet values between 128 and 255.

   14) Any program that fails to compile because of lines with trailing
       control-M's (\r or \015) will be rejected.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.  
       Submissions that are similar to previous entries are discouraged.

|  17) The total size of your submission: the sum of the size of the program,
|      hints, comments, build and info files MUST be less than one megabyte
|      in size.

FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

|	    q.2005@ioccc.org	   (for questions only!)

|   You must include the words ``ioccc 2005 question'' in the subject of
    your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    Details of how to submit your entry are located at,

|	http://www.ioccc.org/2005/submit

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach

19th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (C) 2006 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC
    for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

|   WHAT'S NEW IN 2006:

|   The contest runs from 31-Dec-2006 23:59 UTC to 28-Feb-2007 23:59 UTC.

|   Only online submissions will be accepted this year.
    See the following for details,

|	http://www.ioccc.org/2006/submit

|  Most of the changes in the rules and guidelines for this year have been
|  marked with a "|" character on the left hand side.

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer, that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many ANSI C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations

    We suggest that you compile your entry with an ANSI C compiler.  If you
    must use non-ANSI C, such as K&R C, you must avoid areas that result in
    compile/link errors for ANSI C compilers.  For example, using gcc
    local function declarations, such as:

	int
	main() {
		void blah() { printf("blah\n"); }
		blah();
	}

    are not allowed even though their existence seems tailor made for
    this contest!   But for now, since they are not in wide spread use
    we cannot accept entries that use them.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

|   On 28 January 2007, the Judges recinded the following guidline regarding
|   "whitespace" before a preprocessor directive.

|   If you use C preprocessor directives (#define, #if, #ifdef, ...),
|   the leading '#' must be the first non-whitespace character on a line.
|   While some broken C preprocessors do not allow whitespace before a
|   '#', most do.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

	cat > prog.c
	cc prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when build 'automatically'.  However
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

	cc prog.c -DNONHUMAN -o prog
	echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096
    bytes.  This means that one may use "free of charge" up to 2048
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

	char b[] = "Is this Ok";
	b[9] = 'K';

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    We don't like entries that use proprietary M*tif, Xv*ew, or OpenL*ok
    toolkits, since not everyone has them.  Use of OpenMotif is permitted
    because it is more widely and freely available.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
	* make us laugh and/or throw up  :-)  (humor helps!)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD and SVR4/System V curses.

    The rules disallow source that contains unescaped octets with values
    between 128 and 255.  You must use \octal or \hex escapes instead:

		  /* 123456789 123456789 123456789 123456 */
	char *foo = "This string is 36 octets in length \263";
	      /* This octet requires 4 octets of source ^^^^ */
	if (strlen(foo) == 36) printf("foo is 36 octets a final NUL\n");

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

|   Abusing the web submission procedure tends to annoy us more
|   than amuse us.  Spend your creative energy on content of your
|   entry rather than on the submission process itself.    

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll
    and Peter Seebach.

    Each entry submitted is given an id number and subdirectory.  The
    "program", "info", "build" and "remarks" portions of a submission are
    stored and judged from this directory.

    Any "author" and identifiable "entry" information is not read until
    the judging process is complete, and then only from entries that have
    won an award.

    The above process helps keep us biased for/against any one particular
|   individual.  Therefore you MUST refrain from putting any information
|   that reveals your identity in the "program", "info", "build", or "remarks"
|   portions of your entry.  We are usually kept in the dark as much as you
|   are until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the "build" information
	* reading the "program"
	* reading the program "info", if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
	* best abuse of ANSI C
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:
									  
	    http://www.ioccc.org/whowon.html				  
									  
    We will also submit a brief announcement story to /.:		  

	    http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

	    http://www.ioccc.org/years.html

    	    NOTE: previous winners are available at that URL

    We will submit a story announcing the availability of the winners
    to /. at the same time.

    Finally the winning entries will be posted to the following groups:

	    comp.lang.c		 comp.lang.c.moderated  alt.sources

    In addition, pointers to these postings are posted to the following

	    comp.sources.misc	 comp.windows.x 	comp.programming
	    misc.misc		 comp.std.c		alt.folklore.computers

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|	q.2006@ioccc.org	(do not submit entries to this address)

|   You must include the words 'ioccc 2006 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach

	    19th International Obfuscated C Code Contest Rules

Copyright (C) 2006 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 19th IOCCC contest window is:

|	31-Dec-2006 23:59 UTC to 28-Feb-2007 23:59 UTC

RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.
       The number of characters excluding whitespace (tab, space,
       newline, formfeed, return), and excluding any ; { or } immediately
       followed by whitespace or end of file, must be <= 2048.

    3) Submissions should be performed using the instructions outlined at,

|      http://www.ioccc.org/2006/submit

    4) If your entry is selected as a winner, it will be modified as follows:

	   Your 'build' instructions will be incorporated into a
           makefile.  If your build instructions *is* a makefile then
           it should be portable and usable from within a master
           makefile.

	   Your program source will be renamed using an identifier of
           our choice (usually your family name or anonymous) followed
           by an optional digit, followed by '.c'

	   Your entry will be compiled into a file with the above name
           minus the '.c'.

       If your entry requires that a build file exist, state so in
       your entry's remark section.  The makefile will be arranged to
       execute a build shell script containing the 'build'
       information.  The name of this build shell script will be your
       entry's title, possibly followed by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry
       must be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Your program source must be able to be compiled cleanly by an ANSI C
       compiler, or if there are any compile errors, they must be documented
       in the "remarks" section of your submission.

    7) The program must be of original work.  All submitted programs are
       are thereby put in the public domain.  All explicitly copyrighted
       programs will be rejected.

|   8) Entries must be received prior to 28-Feb-2007 23:59 UTC.

       An EMail a confirmation of submission will be sent to the sender
       before the close of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be submitted separately.

   10) Entries requiring human interaction to be built are not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
|       special owner or group) are highly discouraged.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the submitted "remarks".

   13) Your source may not contain unescaped octets with the high bit set.
       I.e., your source may not contain octet values between 128 and 255.

   14) Any program that fails to compile because of lines with trailing
       control-M's (\r or \015) will be rejected.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.  
       Submissions that are similar to previous entries are discouraged.

|  17) The total size of your submission: the sum of the size of the program,
|      hints, comments, build and info files MUST be less than one megabyte
|      in size.

FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll and Peter Seebach.  Please send questions or comments
    about the contest, to:

|	    q.2006@ioccc.org	   (for questions only!)

|   You must include the words ``ioccc 2006 question'' in the subject of
    your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    Details of how to submit your entry are located at,

|	http://www.ioccc.org/2006/submit

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach

20th International Obfuscated C Code Contest Guidelines, Hints and Comments

Copyright (C) 2006,2011 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC
    for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

|   WHAT'S NEW IN 2011:

|   The contest runs from 12-Nov-2011 11:00 UTC to 12-Jan-2012 12:12 UTC.

|   Only online submissions will be accepted this year.
    See the following for details,

|	https://submit.ioccc.org/
|
|	(Will be active 2011-12-01)

|  Most of the changes in the rules and guidelines for this year have been
|  marked with a "|" character on the left hand side.

HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

|   We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
|   working entry is best.  Clever people will note that 16 might be prime.
|   Wise people, when submitting something clever entry that might
|   depend on such a misleading statement, will fully explain such
|   cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" may want to try and be more creative.

    Ultra-obfuscated programs are in some cases some cases easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
|   are considered more portable.

|   The judges quite like "markdown" for formatting text (the 2005 and
|   2006 hints are formatted this way). You are encouraged, but not
|   required to submit remarks and documentation in this format. Future
|   competitions may require this.  For more info on Markdown, see
|
|	http://daringfireball.net/projects/markdown/syntax
|


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations

|   We suggest that you compile your entry with an ISO/IEC 9899-1999
|   ("ISO C99") C compiler or at least an ANSI C compiler.

|   Local function declarations, such as:

	#include <stdio.h>
	int
	main() {
		void blah() { printf("blah\n"); }
		blah();
	}

|   are found in many C compilers (such as gcc v4).  Such a feature
|   often requires one to compile with a flag such as -fnested-functions.
|   If you do use local function declarations, please provide
|   gcc v4 (or later version) compatible compile flags.  I.e.,
|
|	cc -fnested-functions prog.c -o prog
|
|   At least one judge doesn't like to execute instructions if they are
|   on the stack.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

|   On 28 January 2007, the Judges rescinded the requirement that the
|   '#" in a C preprocessor directive must be the first non-whitespace character.


    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    The build file should not be used to try and get around the size
    limit.  It is one thing to make use of a several -D's to help out,
    but it is quite another to use 200+ bytes of -D's in order to
    try and squeeze the source under the size limit.  You should feel
    free to make use of the build file space, but you are better off
    if you show some amount of restraint.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

	cat > prog.c
	cc prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when build 'automatically'.  However
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

	cc prog.c -DNONHUMAN -o prog
	echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096
    bytes.  This means that one may use "free of charge" up to 2048
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

	char b[] = "Is this Ok";
	b[9] = 'K';

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  Don't
    depend on a particular type of display.  For example, don't depend
    on color or a given size.  Don't require backing store.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    We don't like entries that use proprietary M*tif, Xv*ew, or OpenL*ok
    toolkits, since not everyone has them.  Use of OpenMotif is permitted
    because it is more widely and freely available.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest, so avoid stuff like POSIX real
    time, security, etc.

|   You might not be prohibited from failing to not partly misunderstand
|   this particular guideline.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
	* make us laugh and/or throw up  :-)  (humor helps!)

    Some types of programs can't excel (tm) in some areas.  Of course, your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
|   found on BSD or Linux curses.

    The rules disallow source that contains unescaped octets with values
    between 128 and 255.  You must use \octal or \hex escapes instead:

		  /* 123456789 123456789 123456789 123456 */
	char *foo = "This string is 36 octets in length \263";
	      /* This octet requires 4 octets of source ^^^^ */
|	if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");

|   It is a very good idea to, in your remarks file, tell us why you
|   think your entry is obfuscated.  This is particularly true if
|   your entry is has some very subtle obfuscations that we might
|   otherwise overlook.

|   Anyone can format their code into a dense blob.  A really clever
|   author will try format their entry using a "normal" formatting style
|   such that at first glance (if you squint and don't look at the details)
|   the code might pass for non-obfuscated C.  Deceptive comments,
|   and mis-leading formatting, in some cases, may be a plus.  On the
|   other hand, a misleading code style requires more source bytes.
|   If you do elect to use misleading formatting and comments, we
|   suggest you remark on this point in your remarks where you talk
|   about why you think your entry is obfuscated.  On the other hand,
|   if you are pushing up against the size limits, you may be forced
|   into creating a dense blob. Such are the tradeoffs that obfuscators face!

    Be creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

|   Abusing the web submission procedure tends to annoy us more
|   than amuse us.  Spend your creative energy on content of your
|   entry rather than on the submission process itself.    

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.
|   This list may change before the contest closes.

    Each entry submitted is given an id number and subdirectory.  The
    "program", "info", "build" and "remarks" portions of a submission are
    stored and judged from this directory.

    Any "author" and identifiable "entry" information is not read until
    the judging process is complete, and then only from entries that have
    won an award.

    The above process helps keep us biased for/against any one particular
|   individual.  Therefore you MUST refrain from putting any information
|   that reveals your identity in the "program", "info", "build", or "remarks"
|   portions of your entry.  We are usually kept in the dark as much as you
|   are until the final awards are given.  We like the surprise of finding
    out in the end, who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.  (For the curious,
    we do indicate the volume of paper consumed when presenting the IOCCC
    winners at talks)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

	* reading the "build" information
	* reading the "program"
	* reading the program "info", if any
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files

    In later rounds, other actions are performed:

	* compiling/building the source
	* running the program
	* performing miscellaneous tests on the source and binary

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
	* most deceptive C code
	* best X client (see OUR LIKES AND DISLIKES)
|	* best abuse of ISO/IEC 9899-1999 ("ISO C99") C or ANSI C
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry, and an entry that abuses the contest
    rules in some way.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:
									  
	    http://www.ioccc.org/whowon.html				  
									  
    We will also submit a brief announcement story to /.:		  

	    http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

	    http://www.ioccc.org/years.html

    	    NOTE: previous winners are available at that URL

    We will submit a story announcing the availability of the winners
    to /. at the same time.

|   The judges won't promise to post the winning entries to news groups.
|   Does anyone still read any of the following groups?

	    comp.lang.c		 comp.lang.c.moderated  alt.sources

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|	q.2011@ioccc.org	(do not submit entries to this address)

|   You must include the words 'ioccc 2011 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
	    20th International Obfuscated C Code Contest Rules

Copyright (C) 2006,2011 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 20th IOCCC contest window is:

|	12-Nov-2011 11:00:00 UTC to 12-Jan-2012 12:12:12 UTC

RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.
       The number of characters excluding whitespace (tab, space,
       newline, formfeed, return), and excluding any ; { or } immediately
       followed by whitespace or end of file, must be <= 2048.

    3) Submissions should be performed using the instructions outlined at,

|      https://submit.ioccc.org/

|	(Will be available 2011-12-01)

    4) If your entry is selected as a winner, it will be modified as follows:

	   Your 'build' instructions will be incorporated into a
           makefile.  If your build instructions *is* a makefile then
           it should be portable and usable from within a master
           makefile.

	   Your program source will be renamed using an identifier of
           our choice (usually your family name or anonymous) followed
           by an optional digit, followed by '.c'

	   Your entry will be compiled into a file with the above name
           minus the '.c'.

       If your entry requires that a build file exist, state so in
       your entry's remark section.  The makefile will be arranged to
       execute a build shell script containing the 'build'
       information.  The name of this build shell script will be your
       entry's title, possibly followed by a digit, followed by '.sh'.

       If needed, your entry's remarks should indicate how your entry
       must be changed in order to deal with the new filenames.

    5) The build file, the source and the resulting executable should be
       treated as read-only files.  If your entry needs to modify these files,
       it should make and modify a copy of the appropriate file.  If this
       occurs, state so in your entry's remarks.

    6) Your program source must be able to be compiled cleanly by an ANSI C
       compiler, or if there are any compile errors, they must be documented
       in the "remarks" section of your submission.

    7) The program must be of original work.  All submitted programs are
       are thereby put in the public domain.  All explicitly copyrighted
       programs will be rejected.

|   8) Entries must be received prior to 12-Jan-2012 12:12:12 UTC.

       An EMail a confirmation of submission will be sent to the sender
       before the close of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be submitted separately.

   10) Entries requiring human interaction to be built are not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
|       special owner or group) are highly discouraged.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the submitted "remarks".

   13) Your source may not contain unescaped octets with the high bit set.
       I.e., your source may not contain octet values between 128 and 255.

   14) Any program that fails to compile because of lines with trailing
       control-M's (\r or \015) will be rejected.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.  
       Submissions that are similar to previous entries are discouraged.

|  17) The total size of your submission: the sum of the size of the program,
|      hints, comments, build and info files MUST be less than one megabyte
|      in size.

FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
|   Curt Noll, this list may be updated before the close of the competition.
|   Please send questions or comments about the contest, to:

|	    q.2011@ioccc.org	   (for questions only!)

|   You must include the words ``ioccc 2011 question'' in the subject of
    your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    Details of how to submit your entry will be made available on 2011-12-01

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
21st International Obfuscated C Code Contest Official Guidelines, Hints and Comments

Copyright (C) 2006-2012 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.


This guideline file is version 2012-08-15.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC
    for short).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

|   We recommend that you follow the twitter handle:
|
|	    @IOCCC
|
|   to learn about IOCCC news, important IOCCC related alerts, IOCCC
|   reminders, and changes to the rules and these guidelines.  While we
|   try to post use news at:
|
|	http://www.ioccc.org/index.html#news
|
|   such postings may be delayed or obscured by slow to respond mirrors.
|
|   Hint to non-twitter users.  You do not have to be a twitter user
|   to follow the postings of the @IOCCC handle.  Simple visit the URL:
|
|	https://twitter.com/ioccc
|
|   and reload that page every once in a while.

|   WHAT'S NEW IN 2012:

|   The contest runs from 2012-Aug-15 3:14:15 UTC to 2012-Sep-14 9:26:53 UTC.

    Only online submissions will be accepted this year.
    See the following for details,

 	https://submit.ioccc.org/

|	(The above URL will be active by 2012-Aug-15)

|  Most of the changes in the rules and guidelines for this year have been
|  marked with a "|" character on the left hand side.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

	* look at the original source
	* convert ANSI tri-graphs to ASCII
	* C pre-process the source ignoring '#include' lines
	* C pre-process the source ignoring '#define' and '#include' lines
	* run it through a C beautifier
	* examine the algorithm
	* compile it (with flags to enable all warnings)
	* execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 17 reasons why these guidelines are obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
|   under certain conditions.  Wise people, when submitting something clever
|   will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
|   world!" really really, and we do mean really, do need to be more creative.

|   Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
|   appropriate level of obfuscation.  A clean looking program with
|   misleading comments and variable names might be a good start.

    Programs that use VTxxx/ANSI sequences that are NOT limited to a
    specific terminal brand and that can also work in a standard xterm
    are considered more portable.


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

	#define d define
	#d foo		   <-- don't expect this to turn into #define foo

    When declaring local or global variables, you should declare the type:

	int this_is_ok;
	this_is_not;	   <-- don't use such implicit type declarations

|   We suggest that you compile your entry with an ISO/IEC 9899-1999
|   ("ISO C99") C compiler or at least an ANSI C compiler.

|   DO NOT assume that we will use gcc to compile your program.
|   We will first try to compile your program using Clang.

|   It is much better to not use any given obscure compiler flags if
|   you can help it.  We want to discourage the use of obscure compiler
|   flags that would make the program less portable.

|   One side effect of the above is that you cannot assume the use
|   of nested functions such as:

	main() {
|		void do_not_do_this() { printf("blah\n"); }
|		do_not_do_this();
	}

|   This is because such nested functions often requires one to compile with
|   a flag such as -fnested-functions that is not found on some compilers.

|   On 2012 July 20, the judges rescinded the encouragement of
|   nested functions.  Such constructions, while interesting and sometimes
|   amusing, will have to wait until they required by a C standard that are
|   actually implemented in commonly used C compilers.  Sorry!

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

	* assigning a non-va_list variable to/from a va_list variable
	* casting a non-va_list variable into/from a va_list variable
	* passing a va_list variable to a function expecting a non-va_list arg
	* passing a non-va_list variable to a function expecting a va_list arg
	* performing arithmetic on va_list variables
	* using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
    '#" in a C preprocessor directive must be the first non-whitespace character.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs, say around 80
    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.

    We tend to dislike programs that:

	* are very hardware specific
	* are very OS version specific
	     (index/strchr differences are ok, but socket/streams specific
	      code is likely not to be)
	* dump core or have compiler warnings
	     (it is ok only if you warn us in the 'remark' header item)
	* won't compile or run under a POSIX P1003.1/P1003.2 like systems
	* depend on a utility or application not normally found on most
	  most POSIX P1003.1/P1003.2 like systems
	* abuse the build file to get around the size limit
	* obfuscate by excessive use of ANSI tri-graphs
	* are longer than they need to be
	* are similar to previous winners
	* are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

|   At least one judge prefers to maintain the use of the leap-second
|   as part of the world's time standard.

|   The "how to build" make process should not be used to try and get
|   around the size limit.  It is one thing to make use of a several -D's
|   on the compile like to help out, but it is quite another to use many
|   bytes of -D's in order to try and squeeze the source under the size limit.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

|       prog: prog.c
|		#echo this line assumes input from standard input
		cat > prog.c
|		${CC} prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when build 'automatically'.  However
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

|       prog: prog.c
|		${CC} prog.c -DNON_HUMAN_COMPILE -o prog
		@echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    characters.  To help, we give a break to source that contains
    whitespace, and in certain cases ; { or } characters.  While the
    number of characters excluding whitespace (tab, space, newline),
    and excluding any ; { or } followed immediately by either whitespace
    or end of file, must be <= 2048, the total size may be less than 4096
    bytes.  This means that one may use "free of charge" up to 2048
    bytes of whitespace, or ; { or } followed by either whitespace
    or end of file.

    Please do not use things like gzip to get around the size limit.
|   Be more creative.

|   We really dislike entries that make blatant use of including
|   large data files to get around the source code size limit.

|   Did we remember to indicate that programs that blatantly use
|   some complex state machine to do something simple are boring?
|   We think we did.  :-)

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    We do not like writable strings.  That is, we don't want stuff like:

	char *T = "So many primes, so little time!";
	...
	T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

	char b[] = "Is this Ok";
	b[9] = 'K';

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
|   example, don't depend on a particular type or size of display.
|   Don't assume the use of a particular browser.  Instead assume a
|   generic browser that forms to a widely used W3C standard.
|   Don't assume a particular sound sub-system or video driver is installed
|   in the OS. Instead, make use of a well known and widely available open
|   source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

|   We don't like entries that use proprietary toolkits such as the M*tif,
|   Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
|   open source toolkit that is widely and freely available instead.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

|   Try to avoid entries that play silent sound segments or play the
|   Happy Birthday song some people believe is copyrighted even if such
|   copyrights appear to be bogus and blatant abuses of the copyright system.

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
|   evolve but not as much as the contest.

    You might not be prohibited from failing to not partly misunderstand
|   this particular guideline.  You are not required to determine that this
|   or the previous sentence is false and misleading: but it might not hurt
|   to not consider to fail to try to do so.

    We like programs that:

	* are as concise and small as they need to be
	* do something at least quasi-interesting
	* are portable
	* are unique or novel in their obfuscation style
	* MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
|	* make us laugh and/or throw up  :-)  (humor really helps!)

|   Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Avoid this specific individual, individual guideline, if you can.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD or Linux curses.

    The rules disallow source that contains unescaped octets with values
    between 128 and 255.  You must use \octal or \hex escapes instead:

		  /* 123456789 123456789 123456789 123456 */
	char *foo = "This string is 36 octets in length \263";
	      /* This octet requires 4 octets of source ^^^^ */
 	if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
|	else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
|   otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

|   We prefer code that can run on either a 64-bit or 32-bit
|   processor. However, it is unwise to assume it will be an i386 or x86
|   architecture.

|   While programs that only run in a specific bit width are okay, if you have
|   to pick a width, pick 64-bit.

|   If we are feeling ornery we might choose to compile your program
|   for running on an Arduino or a PDP-11.  Heck, should we ever find
|   an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
|   might just try your entry on that emulator as well|  :-)

|   If your entry MUST run only in 32-bit mode on an Intel processor, add the
|   following compiler flag:
|
|	-arch i386
|
|   to your "how to build" make compile line.  For example:
|
|	prog: prog.c
|		${CC} prog.c -arch i386 -o prog

|   Be even more creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
|   new ones) so that future rule abuse may continue.  A cleaver author
|   should be able to read them and "drive a truck through the holes" in
|   the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
|   engineering delivers.  Real programmers must face obfuscated
|   and sometimes conflicting specifications and requirements from marketing,
|   sales, product management an even from customers themselves on a
|   all to regular basis.  This is one of the reasons why the rules and
|   guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

    Each entry submitted is given an id number and subdirectory.  The
|   entry files including, but not limited to prog.c, Makefile (that we
|   form from around your "how to build" information), as well as any
|   data files that you submit are all places under their own directory.
|   stored and judged from this directory.

|   Any information about the authors is not read bu the judges until
    the judging process is complete, and then only from entries that have
    won an award.

|   Because we do not read this information for entries that do not win,
|   do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
|   that reveals your identity in your entry.

|   Now some people point out that coding style might reveal the information
|   about the others.  However we consider this to be simply circumstantial
|   and outside the scope of the above paragraph.

|   Some people, in the past, have attempted to obfuscate their identity by
|   including comments of famous Internet personalities such as Peter Honeyman
|   (http://www.citi.umich.edu/u/honey/).  The judges are on to this
|   trick and therefore consider any obfuscated source or data file
|   claiming to be from Honeyman to not be form Honeyman.  This of course
|   creates an interesting paradox known as the "obfuscated Peter Honeyman
|   paradox".  Should Peter Honeyman actually submit an obfuscated entry,
|   he alone is excluded from above mentioned refrain as we believe
|   it just another attempt at confusion.  This guideline is known
|   as the "Peter Honeyman is exempt" guideline.

|   BTW: None of the entries claiming to be from Peter Honeyman have ever
|   won an award.  So it is theoretically possible that Peter Honeyman
|   did submit an entry in the past.  In the past, Peter had denied
|   submitting anything to the IOCCC.  Perhaps those entries were
|   submitted by one of his students?

|   We seemed to have digressed here ... :-)  Returning to the judging process:

|   We prefer to be kept in the dark as much as you are until the final
|   awards are given.  We enjoy the surprise of finding out in the end,
|   who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
|   reveal the number of entries that we received.

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

|	* reading the "how to build" information and forming a Makefile
|	* reading prog.c, the C source
|	* reviewing the "remarks" information
|	* briefly looking any any supplied data files
	* passing the source thru the C pre-processor
	    skipping over any #include files
	* performing a number of C beautify/cleanup edits on the source
	* passing the beautified source thru the C pre-processor
	    skipping over any #include files
|	* compiling/building the source
|	* running the program
|       * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

	* best small one line program
	* best small program
	* strangest/most creative source layout
	* most useful obfuscated program
	* best game that is obfuscated
	* most creatively obfuscated program
|	* most deceptive C code (code with deceptive comments and source code)
	* best X client (see OUR LIKES AND DISLIKES)
 	* best abuse of ISO/IEC 9899-1999 ("ISO C99") C or ANSI C
|	* best abuse of the C preprocessor
	* worst abuse of the rules
	* (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to 8 or 10
    winners.  Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

|   More than one IOCCC judge has been known to bribe another IOCCC judge
|   into voting for a winning entry by offering a bit high quality chocolate.
|   This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
|   entry that abuses the contest guidelines in an interesting way,
|   or that stretches the content rules that while legal, is
|   nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

|   The judges will tweet initial announcement of who won, the name
|   of their award, and a very brief description of the winning entry
|   from the @IOCCC twitter handle.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

	    http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

	    http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

	    http://www.ioccc.org/years.html

    	    NOTE: previous winners are available at that URL

    We will submit a story announcing the availability of the winners
    to /. at the same time.

|   Don't ask us how many non-winning entries we receive.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
|   and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|	q.2012@ioccc.org	(do not submit entries to this address)

|   You must include the words 'ioccc 2012 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
	21st International Obfuscated C Code Contest Official Rules

Copyright (C) 2006-2012 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
		b.  To darken.  2. To confuse:  his emotions obfuscated his
		judgment.  [LLat. obfuscare, to darken : ob(intensive) +
		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
		obfuscatory adj.


This rules file is version 2012-08-15.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

The 21st IOCCC contest window is:

|	2012-Aug-15 3:14:15 UTC to 2012-Sep-14 9:26:53 UTC

RULES:

|   Lines marked with a "|" indicate changes to the rules.

|   Please note: These rules are preliminary. Any modifications will be
|   announced before the submission server goes live.

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.
       The number of characters excluding whitespace (tab, space,
       newline, formfeed, return), and excluding any ; { or } immediately
       followed by whitespace or end of file, must be <= 2048.

    3) Submissions should be performed using the instructions outlined at,

       https://submit.ioccc.org/

|	(The above URL will be active by 2012-Aug-15)

    4) If your entry is selected as a winner, it will be modified as follows:

|       Your 'build' instructions will be incorporated into a makefile.
|
|       Your source code will be renamed from prog.c to a name
|       of our choice (usually related to your family name or
|       anonymous) followed by a optional digit if there are conflicting
|       winning entries.  The resulting binary will be renamed from prog to a
|       equivalent of our choice.
|
|       If needed, indicate in your remarks file how your entry
|       must be changed to accommodate the above.

|   5) Your entry must not modify the content or filename of any part of your
|      original entry including, but not limited to prog.c, the Makefile
|      (we create from your how to build instructions), as well as any data
|      files you submit.
|
|      If you entry wishes to modify such content, it must first copy the
|      file to a new filename and then modify that copy.

|   6) There is NO rule 6!  OK, there is a rule 6, but we intend to ignore it.

|   7) The obfuscated C program must be an original work that you own.
|
|      You (the authors) must own the contents of your submission OR
|      you must have permission from the owners to submit their content
|      under the Creative Commons Attribution-ShareAlike 3.0 Unported
|      (CC BY-SA 3.0) license (see rule 18).
|
|      If you submit any content that is owned by others, you MUST
|      detail that ownership (i.e., who owns what) and document the
|      permission you obtained.

|   8) Entries must be received prior to 2012-Sep-14 9:26:53 UTC.

|      A confirmation of submission will be sent to the submitter's
|      email address before the close of the contest.

    9) Each person may submit up to 8 entries per contest year.  Each entry
       must be submitted separately.

   10) Entries requiring human interaction to be built are not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
        special owner or group) are highly discouraged.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
|      their rule abuse is legal in the remarks file.

|  13) Any C source that needs to be compiled may not contain unescaped
|      octets with the high bit set (i.e., octet values >= 128).
|
|      This rule applies only to compiled C source.  Your optional data files
|      and your remarks file may contain octets with the high bit set.

|  14) Any C source that fails to compile because of lines with trailing
|      control-M's (i.e., lines with a tailing octet 015) will be rejected.
|
|      Please do not put trailing control-M's in your remarks file.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.
       Submissions that are similar to previous entries are discouraged.

   17) The total size of your submission: the sum of the size of the program,
       hints, comments, build and info files MUST be less than one megabyte
       in size.

|  18) The entirety of your entry must be submitted under the Creative Commons
|      Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):
|
|	    http://creativecommons.org/licenses/by-sa/3.0/
|
|      You must not submit anything that cannot be submitted under that license.

|  19) The remarks file must be written in markdown format. See
|
|	    http://daringfireball.net/projects/markdown/basics
|
|      for more information.

|  20) The how to build instructions must be in make form.
|
|      The target of the make file must be called prog.  The original
|      C source file must be called prog.c.
|
|      To invoke the C compiler, use ${CC}.
|      To invoke the C preprocessor use ${CPP}.
|
|      Do not assume that . (the current working directory) is in the $PATH.
|
|      Use a shell command syntax that is compatible with bash.
|
|      Assume that commands commonly found in POSIX-like / Linux-line systems
|      are available in the search path.
|
|      Do not assume any particular given value of ${CFLAGS} or other
|      commonly used make variables.

|  21) Your entry must not create nor modify files above the current directory
|      with the exception of the /tmp and the /var/tmp directories.  Your entry
|      may create subdirectories below the current directory provided that
|      the name of such directories do not start with the "." character.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll.

    Please send questions or comments about the contest, to:

|	    q.2012@ioccc.org	   (for questions only!)

|   You must include the words ``ioccc 2012 question'' in the subject of
    your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

	http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
| 22nd International Obfuscated C Code Contest Official Guidelines

| Copyright (C) 2006-2013 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

| This guidelines file is version 2013-07-30-v17.

| Most of the changes from the previous IOCCC guidelines
| been marked with a "|" on the left hand side of the line.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
|   submit entries to the International Obfuscated C Code Contest (IOCCC).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    We recommend that you follow the twitter handle:

        @IOCCC

    to learn about IOCCC news, important IOCCC related alerts, IOCCC
    reminders, and changes to the rules and these guidelines.

|   You do not have to be a twitter user to follow @IOCCC.  Non-twitter
|   users should access:

|       https://twitter.com/ioccc

|   Non-twitter users should force their browsers to reload the above URL
|   to be sure they are seeing the most recent tweets.

    While we try to post use news at:

        http://www.ioccc.org/index.html#news

    such postings may be delayed or obscured by slow to respond mirrors.


| WHAT'S NEW IN 2013:

|   The contest runs from 2013-Aug-01 3:14:15 UTC to 2013-Oct-03 9:26:53 UTC.

|   Rule 2 (the size rule) has been changed.  In particular the secondary size
|   limit has changed to use an algorithm implemented by the IOCCC size tool.
|   See below for details.

|   The submission URL:

|       https://submit.ioccc.org/

|   should be active on or slightly before 2013-Aug-01 3:14:15 UTC.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

        * look at the original source
        * convert ANSI tri-graphs to ASCII
        * C pre-process the source ignoring '#include' lines
        * C pre-process the source ignoring '#define' and '#include' lines
        * run it through a C beautifier
        * examine the algorithm
        * compile it (with flags to enable all warnings)
        * execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 19 reasons why these guidelines seem obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
    under certain conditions.  Wise people, when submitting something clever
    will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" really really, and we do mean really, do need to be more creative.

    Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.  A clean looking program with
    misleading comments and variable names might be a good start.

|   When programs use VTxxx/ANSI sequences, they should NOT limited to a
|   specific terminal brand.  Those programs that work in a standard xterm
    are considered more portable.

|   Rule 2 (the size rule) has been changed.  In particular rule 2 refers to
|   the use of an IOCCC size tool.  The source for this tool is found at:

|       http://www.ioccc.org/2013/iocccsize.c

|   The IOCCC size tool should be compiled as:

|       cc -pedantic -Wall -std=c99 iocccsize.c -o iocccsize

|   This tool imposes a 2nd limit on C code size.  To check your program
|   source against the 2nd limit of rule 2, use the -i command line option.
|   For example:

|       ./iocccsize -i < prog.c

|   The IOCCC size tool, when using the -i option, may be summarized as:

|       The size tool counts most C reserved words (keyword, secondary,
|       and selected preprocessor keywords) as 1.  The size tool counts all
|       other octets as 1 excluding ASCII whitespace, and excluding any
|       ';', '{' or '}' followed by ASCII whitespace, and excluding any
|       ';', '{' or '}' octet immediately before the end of file.

|   ASCII whitespace includes ASCII tab, ASCII space, ASCII newline,
|   ASCII formfeed, and ASCII carriage return.

|   In cases where the above summary and the algorithm implemented by
|   the IOCCC size tool source code conflict, the algorithm implemented
|   by the IOCCC size tool source code is preferred by the judges.

|   There are at least 2 other reasons for selecting 2053 as the 2nd limit
|   besides the fact that 2053 is the next prime > 2048.  These reasons
|   may be searched for and discovered if you are "Curios!" about 2053. :-)
|   Moreover, 2053 was the number of the kernel disk pack of one of the
|   judge's BESM-6.

|   Take note that this secondary limit imposed by the IOCCC size tool
|   obviates some of the need to #define C reserved words in an effort
|   to get around the size limits of rule 2.

|   Yes Virginia, that is a hint!


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

        #define d define
|       #d foo             /* <-- don't expect this to turn into #define foo */

    When declaring local or global variables, you should declare the type:

|       int this_is_fine;
|       this_is_not;       /* <-- Try to avoid implicit type declarations */

    We suggest that you compile your entry with an ISO/IEC 9899-1999
    ("ISO C99") C compiler or at least an ANSI C compiler.

    DO NOT assume that we will use gcc to compile your program.
    We will first try to compile your program using Clang.

    It is much better to not use any given obscure compiler flags if
    you can help it.  We want to discourage the use of obscure compiler
    flags that would make the program less portable.

    One side effect of the above is that you cannot assume the use
    of nested functions such as:

        main() {
|               void do_not_do_this() { printf("Lemon Curry?\n"); }
                do_not_do_this();
        }

    This is because such nested functions often requires one to compile with
    a flag such as -fnested-functions that is not found on some compilers.

    On 2012 July 20, the judges rescinded the encouragement of
    nested functions.  Such constructions, while interesting and sometimes
    amusing, will have to wait until they required by a C standard that are
    actually implemented in commonly used C compilers.  Sorry!

|   We prefer programs that don't require a fish license for pet fish.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

        * assigning a non-va_list variable to/from a va_list variable
        * casting a non-va_list variable into/from a va_list variable
        * passing a va_list variable to a function expecting a non-va_list arg
        * passing a non-va_list variable to a function expecting a va_list arg
        * performing arithmetic on va_list variables
        * using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
|   '#" in a C preprocessor directive must be the 1st non-whitespace octet.

    The exit() function returns void.  On some broken systems have exit()
    return int.  Your entry should assume that exit() returns a void.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

|   One line programs should be short one line programs: say around 80 to 120
|   octets long.  Going well beyond 140 octets is a bit too long to be called
|   a one-liner in our vague opinion.

    We tend to dislike programs that:

        * are very hardware specific
        * are very OS version specific
|            (index/strchr differences are OK, but socket/streams specific
              code is likely not to be)
        * dump core or have compiler warnings
|            (it is OK only if you warn us in the 'remark' header item)
        * won't compile or run under a POSIX P1003.1/P1003.2 like systems
        * depend on a utility or application not normally found on most
          most POSIX P1003.1/P1003.2 like systems
        * abuse the build file to get around the size limit
        * obfuscate by excessive use of ANSI tri-graphs
        * are longer than they need to be
|       * are "blob-ier" than they need to be
|       * are too similar to previous winners  :-(
        * are identical to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    At least one judge prefers to maintain the use of the leap-second
    as part of the world's time standard.

    The "how to build" make process should not be used to try and get
    around the size limit.  It is one thing to make use of a several -D's
    on the compile like to help out, but it is quite another to use many
    bytes of -D's in order to try and squeeze the source under the size limit.

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

|   You are in a maze of twisty guidelines, all different.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

        prog: prog.c
|               #echo this next line requires data from standard input
                cat > prog.c
                ${CC} prog.c -o prog

    However, you can do something cute such as making your program
|   do something dumb (or cute) when build 'automatically'.  And
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

        prog: prog.c
                ${CC} prog.c -DNON_HUMAN_COMPILE -o prog
                @echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
|   octets.   Really try to be more creative than blob coding.

    Please do not use things like gzip to get around the size limit.
    Be more creative.

    We really dislike entries that make blatant use of including
    large data files to get around the source code size limit.

    Did we remember to indicate that programs that blatantly use
    some complex state machine to do something simple are boring?
    We think we did.  :-)

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!
|   Remember, you can submit more than one entry.  See the rules for details.

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

|   Programs that claim to be the smallest C source that does something
|   better be the smallest such program or they risk being rejected because
|   they do not work as documented.

|   Please note that the C source below, besides lacking in obfuscation,
|   is NOT the smallest C source file that when compiled and run, dumps core:

|       main;

    We do not like writable strings.  That is, we don't want stuff like:

        char *T = "So many primes, so little time!";
        ...
        T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

|       char b[] = "Is this OK";
        b[9] = 'K';

|   There is a typo in this sentence.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
    example, don't depend on a particular type or size of display.
    Don't assume the use of a particular browser.  Instead assume a
    generic browser that forms to a widely used W3C standard.
    Don't assume a particular sound sub-system or video driver is installed
    in the OS. Instead, make use of a well known and widely available open
    source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

|   This is the only guideline that contains the word fizzbin.

    We don't like entries that use proprietary toolkits such as the M*tif,
    Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
    open source toolkit that is widely and freely available instead.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    Try to avoid entries that play silent sound segments or play the
|   Happy Birthday song; music that some people believe is copyrighted
|   (even if such copyrights appear to be bogus and/or blatant abuses of
|   the copyright system).

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest.

|   You very well might not be prohibited from failing to not partly
|   misunderstand this particular guideline.  You are not required to
|   determine that this or the previous sentence is false and misleading.
|   Nevertheless, it might not hurt to not fail to consider failing to do so.

    We like programs that:

        * are as concise and small as they need to be
        * do something at least quasi-interesting
        * are portable
        * are unique or novel in their obfuscation style
        * MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
        * make us laugh and/or throw up  :-)  (humor really helps!)

    Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Avoid this specific individual guideline, if you can.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD or Linux curses.

|   Rule 13 states any C source that fails to compile because of unescaped
|   octets with the high bit set (octet value >= 128) will be rejected.
|   Instead of unescaped octets, you should use \octal or \hex escapes:

                  /* 123456789 123456789 123456789 123456 */
        char *foo = "This string is 36 octets in length \263";
              /* This octet requires 4 octets of source ^^^^ */
        if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
        else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
    otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

|   We prefer code that can run on either a 64-bit or 32-bit processor.
|   However, it is unwise to assume it will run on an i386 or x86 architecture.

|   While programs that only run in a specific word size are OK.  If you have
|   to pick a 64-bit word size.

    If we are feeling ornery we might choose to compile your program
    for running on an Arduino or a PDP-11.  Heck, should we ever find
    an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
    might just try your entry on that emulator as well|  :-)

    If your entry MUST run only in 32-bit mode on an Intel processor, add the
    following compiler flag:

        -arch i386

    to your "how to build" make compile line.  For example:

        prog: prog.c
                ${CC} prog.c -arch i386 -o prog

    Be even more creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.  A cleaver author
    should be able to read them and "drive a truck through the holes" in
    the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.  Real programmers must face obfuscated
    and sometimes conflicting specifications and requirements from marketing,
    sales, product management an even from customers themselves on a
    all to regular basis.  This is one of the reasons why the rules and
    guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

    Each entry submitted is given an id number and subdirectory.  The
    entry files including, but not limited to prog.c, Makefile (that we
    form from around your "how to build" information), as well as any
    data files that you submit are all places under their own directory.
    stored and judged from this directory.

|   Any information about the authors is not read by the judges until
    the judging process is complete, and then only from entries that have
    won an award.

    Because we do not read this information for entries that do not win,
    do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
    that reveals your identity in your entry.

    Now some people point out that coding style might reveal the information
    about the others.  However we consider this to be simply circumstantial
    and outside the scope of the above paragraph.

    Some people, in the past, have attempted to obfuscate their identity by
    including comments of famous Internet personalities such as Peter Honeyman
    (http://www.citi.umich.edu/u/honey/).  The judges are on to this
    trick and therefore consider any obfuscated source or data file
    claiming to be from Honeyman to not be form Honeyman.  This of course
    creates an interesting paradox known as the "obfuscated Peter Honeyman
    paradox".  Should Peter Honeyman actually submit an obfuscated entry,
|   he alone is excluded from above mentioned refrain as we will likely believe
    it just another attempt at confusion.  This guideline is known
    as the "Peter Honeyman is exempt" guideline.

    BTW: None of the entries claiming to be from Peter Honeyman have ever
    won an award.  So it is theoretically possible that Peter Honeyman
    did submit an entry in the past.  In the past, Peter had denied
    submitting anything to the IOCCC.  Perhaps those entries were
    submitted by one of his students?

 |  We seemed to have digressed ... :-)  Returning to the judging process:

    We prefer to be kept in the dark as much as you are until the final
    awards are given.  We enjoy the surprise of finding out in the end,
    who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.

|   During the judging process. a process that spans multiple sessions
|   over a few weeks, post general updates from our @IOCCC twitter account.

|   Once we have selected the winners, for each category we will tweet:
|
|       category name
|       name(s) of the authors (or anonymous if requested)
|       twitter handle(s) (if provided and if anonymity was not requested)
|       country code(s) of the author(s)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

        * reading the "how to build" information and forming a Makefile
        * reading prog.c, the C source
        * reviewing the "remarks" information
        * briefly looking any any supplied data files
        * passing the source thru the C pre-processor
            skipping over any #include files
        * performing a number of C beautify/cleanup edits on the source
        * passing the beautified source thru the C pre-processor
            skipping over any #include files
        * compiling/building the source
        * running the program
        * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

        * best small one line program
        * best small program
        * strangest/most creative source layout
        * most useful obfuscated program
        * best game that is obfuscated
        * most creatively obfuscated program
        * most deceptive C code (code with deceptive comments and source code)
        * best X client (see OUR LIKES AND DISLIKES)
        * best abuse of ISO/IEC 9899-1999 ("ISO C99") C or ANSI C
        * best abuse of the C preprocessor
        * worst abuse of the rules
        * (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
|   reducing the remaining entries (typically about 25) down to to about
|   half that number: declaring those remaining to be winners.

    Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More than one IOCCC judge has been known to bribe another IOCCC judge
    into voting for a winning entry by offering a bit high quality chocolate.
    This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
    entry that abuses the contest guidelines in an interesting way,
    or that stretches the content rules that while legal, is
    nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will tweet initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
|   from the @IOCCC twitter handle.  Non-twitter users should visit:

|       https://twitter.com/ioccc

|   Non-twitter users should force their browsers to reload the above URL
|   to be sure they are seeing the most recent tweets.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

        http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

        http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

        http://www.ioccc.org/years.html

        NOTE: previous winners are available at that URL

|   We will also tweet, via @IOCCC, when the winning source is available.

|   It is pointless to ask the IOCCC judges how many entries we receive.
|   Other government TLA based snooping organizations may neither confirm
|   not deny any knowledge of this data point.  :-)

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|       q.2013@ioccc.org        (do not submit entries to this address)

|   You must include the words 'ioccc 2013 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

|   For the updates and breaking IOCCC news, you are encouraged to follow
|   the twitter handle:

|       @IOCCC

|   You do not have to be a twitter user to follow @IOCCC.  Non-twitter
|   users should access:

|       https://twitter.com/ioccc

|   Non-twitter users should force their browsers to reload the above URL
|   to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
|       22nd International Obfuscated C Code Contest Official Rules

|  Copyright (C) 2006-2013 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
                b.  To darken.  2. To confuse:  his emotions obfuscated his
                judgment.  [LLat. obfuscare, to darken : ob(intensive) +
                Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
                obfuscatory adj.


| This rules file is version 2013-07-30-v17.

| Most of the changes from the previous IOCCC rules
| been marked with a "|" on the left hand side of the line.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

| The 22nd IOCCC contest entry window is:

|       2013-Aug-01 3:14:15 UTC to 2013-Oct-03 9:26:53 UTC


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.

|      When your program source is fed as input to the current IOCCC size
|      tool, and the IOCCC size tool -i command line option is used, the value
|      printed should be <= 2053.

|      The source to the current IOCCC size tool is found at this URL:

|         http://www.ioccc.org/2013/iocccsize.c

    3) Submissions should be performed using the instructions outlined at:

           https://submit.ioccc.org/

|      That URL should be active on or slightly before 2013-Aug-01 3:14:15 UTC.

    4) If your entry is selected as a winner, it will be modified as follows:

        Your 'build' instructions will be incorporated into a makefile.

        Your source code will be renamed from prog.c to a name
        of our choice (usually related to your family name or
        anonymous) followed by a optional digit if there are conflicting
        winning entries.  The resulting binary will be renamed from prog to a
        equivalent of our choice.

        If needed, indicate in your remarks file how your entry
        must be changed to accommodate the above.

    5) Your entry must not modify the content or filename of any part of your
       original entry including, but not limited to prog.c, the Makefile
       (we create from your how to build instructions), as well as any data
       files you submit.

       If you entry wishes to modify such content, it must first copy the
       file to a new filename and then modify that copy.

    6) There is NO rule 6!  OK, there is a rule 6, but we intend to ignore it.

|      while (!understand(ioccc(rule(6))));

    7) The obfuscated C program must be an original work that you own.

       You (the authors) must own the contents of your submission OR
       you must have permission from the owners to submit their content
       under the Creative Commons Attribution-ShareAlike 3.0 Unported
       (CC BY-SA 3.0) license (see rule 18).

       If you submit any content that is owned by others, you MUST
       detail that ownership (i.e., who owns what) and document the
       permission you obtained.

|   8) Entries must be received prior to 2013-Oct-03 9:26:53 UTC.

       A confirmation of submission will be sent to the submitter's
       email address before the close of the contest.

|   9) Each person may submit up to and including 8.0 entries per contest.
|      Each entry must be submitted separately.

|  10) Entries requiring human interaction to be initially compiled are
|      not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
|      special owner, special group, etc.) are highly discouraged.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the remarks file.

|  13) Any C source that fails to compile because of unescaped octets with
|      the high bit set (octet value >= 128) will be rejected.

   14) Any C source that fails to compile because of lines with trailing
       control-M's (i.e., lines with a tailing octet 015) will be rejected.

       Please do not put trailing control-M's in your remarks file.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

   16) You are STRONGLY encouraged to submit an original entry.
       Submissions that are similar to previous entries are discouraged.

   17) The total size of your submission: the sum of the size of the program,
|      hints, comments, build and info files MUST be less than or equal
|      to 1048576 octets in size.

   18) The entirety of your entry must be submitted under the Creative Commons
       Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):

            http://creativecommons.org/licenses/by-sa/3.0/

       You must not submit anything that cannot be submitted under that license.

|  19) The remarks file must be written in markdown format. See:

            http://daringfireball.net/projects/markdown/basics

       for more information.

   20) The how to build instructions must be in make form.

       The target of the make file must be called prog.  The original
       C source file must be called prog.c.

       To invoke the C compiler, use ${CC}.
       To invoke the C preprocessor use ${CPP}.

       Do not assume that . (the current working directory) is in the $PATH.

       Use a shell command syntax that is compatible with bash.

|      Assume that commands commonly found in POSIX-like / Linux-like systems
       are available in the search path.

       Do not assume any particular given value of ${CFLAGS} or other
       commonly used make variables.

   21) Your entry must not create nor modify files above the current directory
       with the exception of the /tmp and the /var/tmp directories.  Your entry
|      may create subdirectories below the current directory, or in /tmp,
|      or in /var/tmp provided that "." is not the first octet in any
|      directory name.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll.

    Please send questions or comments about the contest, to:

|       q.2013@ioccc.org       (for questions only!)

|   You must include the words:

|       ioccc 2013 question

|   in the subject of your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

|   For the updates and breaking IOCCC news, you are encouraged to follow
|   the twitter handle:

|       @IOCCC

|   You do not have to be a twitter user to follow @IOCCC.  Non-twitter
|   users should access:

|       https://twitter.com/ioccc

|   Non-twitter users should force their browsers to reload the above URL
|   to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
| 23rd International Obfuscated C Code Contest Official Guidelines

| Copyright (C) 2006-2014 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

| This guidelines file is version 2014-08-29-v18.

| Most of the changes from the previous IOCCC guidelines
| been marked with a "|" on the left hand side of the line.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
|   submit entries to the International Obfuscated C Code Contest (IOCCC).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    We recommend that you follow the twitter handle:

        @IOCCC

    to learn about IOCCC news, important IOCCC related alerts, IOCCC
    reminders, and changes to the rules and these guidelines.

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    While we try to post use news at:

        http://www.ioccc.org/index.html#news

    such postings may be delayed or obscured by slow to respond mirrors.


| WHAT'S NEW IN 2014:

|   The contest runs from 2014-Sep-01 02:03:04 UTC to 2014-Oct-19 18:17:16 UTC.

    The submission URL:

        https://submit.ioccc.org/

|   along with the final rules and updated iocccsize.c tool will be avalaible
|   and active on or slightly before 2014-Sep-15 15:15:15 UTC.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

        * look at the original source
        * convert ANSI tri-graphs to ASCII
        * C pre-process the source ignoring '#include' lines
        * C pre-process the source ignoring '#define' and '#include' lines
        * run it through a C beautifier
        * examine the algorithm
        * compile it (with flags to enable all warnings)
        * execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 23 reasons why these guidelines seem obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
    under certain conditions.  Wise people, when submitting something clever
    will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" really really, and we do mean really, do need to be more creative.

    Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.  A clean looking program with
    misleading comments and variable names might be a good start.

    When programs use VTxxx/ANSI sequences, they should NOT limited to a
    specific terminal brand.  Those programs that work in a standard xterm
    are considered more portable.

    Rule 2 (the size rule) has been changed.  In particular rule 2 refers to
    the use of an IOCCC size tool.  The source for this tool is found at:

|       http://www.ioccc.org/2014/iocccsize.c

    The IOCCC size tool should be compiled as:

        cc -pedantic -Wall -std=c99 iocccsize.c -o iocccsize

    This tool imposes a 2nd limit on C code size.  To check your program
    source against the 2nd limit of rule 2, use the -i command line option.
    For example:

        ./iocccsize -i < prog.c

    The IOCCC size tool, when using the -i option, may be summarized as:

        The size tool counts most C reserved words (keyword, secondary,
        and selected preprocessor keywords) as 1.  The size tool counts all
        other octets as 1 excluding ASCII whitespace, and excluding any
        ';', '{' or '}' followed by ASCII whitespace, and excluding any
        ';', '{' or '}' octet immediately before the end of file.

    ASCII whitespace includes ASCII tab, ASCII space, ASCII newline,
    ASCII formfeed, and ASCII carriage return.

    In cases where the above summary and the algorithm implemented by
    the IOCCC size tool source code conflict, the algorithm implemented
    by the IOCCC size tool source code is preferred by the judges.

    There are at least 2 other reasons for selecting 2053 as the 2nd limit
    besides the fact that 2053 is the next prime > 2048.  These reasons
    may be searched for and discovered if you are "Curios!" about 2053. :-)
    Moreover, 2053 was the number of the kernel disk pack of one of the
    judge's BESM-6.

    Take note that this secondary limit imposed by the IOCCC size tool
    obviates some of the need to #define C reserved words in an effort
    to get around the size limits of rule 2.

    Yes Virginia, that is a hint!


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

        #define d define
        #d foo             /* <-- don't expect this to turn into #define foo */

    When declaring local or global variables, you should declare the type:

        int this_is_fine;
        this_is_not;       /* <-- Try to avoid implicit type declarations */

    We suggest that you compile your entry with an ISO/IEC 9899-1999
    ("ISO C99") C compiler or at least an ANSI C compiler.

    DO NOT assume that we will use gcc to compile your program.
    We will first try to compile your program using Clang.

|   It is much better to not use any obscure compiler flags if
    you can help it.  We want to discourage the use of obscure compiler
    flags that would make the program less portable.

    One side effect of the above is that you cannot assume the use
    of nested functions such as:

        main() {
|               void do_not_do_this() { printf("Albatross!\n"); }
                do_not_do_this();
        }

    This is because such nested functions often requires one to compile with
    a flag such as -fnested-functions that is not found on some compilers.

    On 2012 July 20, the judges rescinded the encouragement of
    nested functions.  Such constructions, while interesting and sometimes
    amusing, will have to wait until they required by a C standard that are
    actually implemented in commonly used C compilers.  Sorry!

|   We prefer programs that do require a fish license for pet fish.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

        * assigning a non-va_list variable to/from a va_list variable
        * casting a non-va_list variable into/from a va_list variable
        * passing a va_list variable to a function expecting a non-va_list arg
        * passing a non-va_list variable to a function expecting a va_list arg
        * performing arithmetic on va_list variables
        * using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
    '#" in a C preprocessor directive must be the 1st non-whitespace octet.

|   The exit() function returns void.  Some broken systems have exit()
|   return int, your entry should assume that exit() returns a void.

|   This line has a change mark at the beginning.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

    One line programs should be short one line programs: say around 80 to 120
    octets long.  Going well beyond 140 octets is a bit too long to be called
    a one-liner in our vague opinion.

    We tend to dislike programs that:

        * are very hardware specific
        * are very OS version specific
             (index/strchr differences are OK, but socket/streams specific
              code is likely not to be)
        * dump core or have compiler warnings
             (it is OK only if you warn us in the 'remark' header item)
        * won't compile or run under a POSIX P1003.1/P1003.2 like systems
        * depend on a utility or application not normally found on most
          most POSIX P1003.1/P1003.2 like systems
        * abuse the build file to get around the size limit
        * obfuscate by excessive use of ANSI tri-graphs
        * are longer than they need to be
        * are "blob-ier" than they need to be
|       * are rather similar to previous winners  :-(
|       * are too similar to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    At least one judge prefers to maintain the use of the leap-second
    as part of the world's time standard.

    The "how to build" make process should not be used to try and get
    around the size limit.  It is one thing to make use of a several -D's
    on the compile like to help out, but it is quite another to use many
    bytes of -D's in order to try and squeeze the source under the size limit.

|   The judges, as a group, have a history giving wide degree of latitude
|   to reasonable entries.  And recently they have had as much longitutional
|   varation as it is possible to have on Earth.  :-)

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    You are in a maze of twisty guidelines, all different.

|   There are at least zero judges who think that Fideism has little
|   or nothing to do with the IOCCC judging process.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do:

        prog: prog.c
                #echo this next line requires data from standard input
                cat > prog.c
                ${CC} prog.c -o prog

    However, you can do something cute such as making your program
|   do something dumb (or cute) when it is built 'automatically'.  And
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

        prog: prog.c
                ${CC} prog.c -DNON_HUMAN_COMPILE -o prog
                @echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
|   octets.   Really try to be more creative than blob coding. *HINT!*

    Please do not use things like gzip to get around the size limit.
    Be more creative.

    We really dislike entries that make blatant use of including
    large data files to get around the source code size limit.

    Did we remember to indicate that programs that blatantly use
    some complex state machine to do something simple are boring?
    We think we did.  :-)

|   All generalizations are false, including this one. -- Mark Twain

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!
    Remember, you can submit more than one entry.  See the rules for details.

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

|   Programs that claim to be the smallest C source that does something, really
|   better be the smallest such program or they risk being rejected because
    they do not work as documented.

    Please note that the C source below, besides lacking in obfuscation,
    is NOT the smallest C source file that when compiled and run, dumps core:

        main;

    We do not like writable strings.  That is, we don't want stuff like:

        char *T = "So many primes, so little time!";
        ...
        T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

        char b[] = "Is this OK";
        b[9] = 'K';

|   There is still a typo in this sentence.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
    example, don't depend on a particular type or size of display.
    Don't assume the use of a particular browser.  Instead assume a
    generic browser that forms to a widely used W3C standard.
    Don't assume a particular sound sub-system or video driver is installed
    in the OS. Instead, make use of a well known and widely available open
    source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    This is the only guideline that contains the word fizzbin.

    We don't like entries that use proprietary toolkits such as the M*tif,
    Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
    open source toolkit that is widely and freely available instead.

    You should avoid depending on a particular window manager.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".

    Try to avoid entries that play silent sound segments or play the
    Happy Birthday song; music that some people believe is copyrighted
    (even if such copyrights appear to be bogus and/or blatant abuses of
    the copyright system).

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest.

|   You very well might not be completely prohibited from failing to not
|   partly misunderstand this particular guideline.  You are not mandated to
    determine that this or the previous sentence is false and misleading.
|   Nevertheless, it might not be wise to not fail to consider failing to do so.

    We like programs that:

        * are as concise and small as they need to be
        * do something at least quasi-interesting
        * are portable
        * are unique or novel in their obfuscation style
        * MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
        * make us laugh and/or throw up  :-)  (humor really helps!)
|       * make us want to eat good chocolate.

    Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Please avoid this specific individual guideline, if you can.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    We dislike entries that depend on non-portable libcurses features such
    as halfdelay().  One should restrict libcurses to portable features
    found on BSD or Linux curses.

    Rule 13 states any C source that fails to compile because of unescaped
    octets with the high bit set (octet value >= 128) will be rejected.
    Instead of unescaped octets, you should use \octal or \hex escapes:

                  /* 123456789 123456789 123456789 123456 */
        char *foo = "This string is 36 octets in length \263";
              /* This octet requires 4 octets of source ^^^^ */
        if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
        else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
    otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

    We prefer code that can run on either a 64-bit or 32-bit processor.
    However, it is unwise to assume it will run on an i386 or x86 architecture.

|   We believe that Mark Twain's remark:

|       Get your facts first, then you can distort them as you please.

|   is a good guideline for those writing code for the IOCCC.

    While programs that only run in a specific word size are OK.  If you have
|   to pick, choose a 64-bit word size.

    If we are feeling ornery we might choose to compile your program
    for running on an Arduino or a PDP-11.  Heck, should we ever find
    an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
    might just try your entry on that emulator as well :-)

    If your entry MUST run only in 32-bit mode on an Intel processor, add the
    following compiler flag:

        -arch i386

    to your "how to build" make compile line.  For example:

        prog: prog.c
                ${CC} prog.c -arch i386 -o prog

    Be even more creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.  A cleaver author
    should be able to read them and "drive a truck through the holes" in
    the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.  Real programmers must face obfuscated
    and sometimes conflicting specifications and requirements from marketing,
    sales, product management an even from customers themselves on a
    all to regular basis.  This is one of the reasons why the rules and
    guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

|   Each entry submitted is given a random id number and subdirectory.  The
    entry files including, but not limited to prog.c, Makefile (that we
    form from around your "how to build" information), as well as any
|   data files that you submit are all placed under their own directory.
    stored and judged from this directory.

    Any information about the authors is not read by the judges until
    the judging process is complete, and then only from entries that have
    won an award.

    Because we do not read this information for entries that do not win,
|   we do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
    that reveals your identity in your entry.

    Now some people point out that coding style might reveal the information
    about the others.  However we consider this to be simply circumstantial
    and outside the scope of the above paragraph.

    Some people, in the past, have attempted to obfuscate their identity by
    including comments of famous Internet personalities such as Peter Honeyman
    (http://www.citi.umich.edu/u/honey/).  The judges are on to this
    trick and therefore consider any obfuscated source or data file
    claiming to be from Honeyman to not be form Honeyman.  This of course
    creates an interesting paradox known as the "obfuscated Peter Honeyman
    paradox".  Should Peter Honeyman actually submit an obfuscated entry,
|   he alone is excluded from the above, as we will likely believe
    it just another attempt at confusion.  This guideline is known
    as the "Peter Honeyman is exempt" guideline.

    BTW: None of the entries claiming to be from Peter Honeyman have ever
    won an award.  So it is theoretically possible that Peter Honeyman
    did submit an entry in the past.  In the past, Peter had denied
    submitting anything to the IOCCC.  Perhaps those entries were
    submitted by one of his students?

|   We seemed to have digressed again ... :-)  Returning to the judging process:

    We prefer to be kept in the dark as much as you are until the final
    awards are given.  We enjoy the surprise of finding out in the end,
    who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.

    During the judging process. a process that spans multiple sessions
    over a few weeks, post general updates from our @IOCCC twitter account.

    Once we have selected the winners, for each category we will tweet:

        category name
        name(s) of the authors (or anonymous if requested)
        twitter handle(s) (if provided and if anonymity was not requested)
        country code(s) of the author(s)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

        * reading the "how to build" information and forming a Makefile
        * reading prog.c, the C source
        * reviewing the "remarks" information
        * briefly looking any any supplied data files
        * passing the source thru the C pre-processor
            skipping over any #include files
        * performing a number of C beautify/cleanup edits on the source
        * passing the beautified source thru the C pre-processor
            skipping over any #include files
        * compiling/building the source
        * running the program
        * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

        * best small one line program
        * best small program
        * strangest/most creative source layout
        * most useful obfuscated program
        * best game that is obfuscated
        * most creatively obfuscated program
        * most deceptive C code (code with deceptive comments and source code)
        * best X client (see OUR LIKES AND DISLIKES)
        * best abuse of ISO/IEC 9899-1999 ("ISO C99") C or ANSI C
        * best abuse of the C preprocessor
        * worst abuse of the rules
        * (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to to about
    half that number: declaring those remaining to be winners.

    Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More than one IOCCC judge has been known to bribe another IOCCC judge
    into voting for a winning entry by offering a bit high quality chocolate.
    This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
    entry that abuses the contest guidelines in an interesting way,
    or that stretches the content rules that while legal, is
    nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.


ANNOUNCEMENT OF WINNERS:

    The judges will tweet initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    from the @IOCCC twitter handle.  Non-twitter users should visit:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

        http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

        http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

        http://www.ioccc.org/years.html

        NOTE: previous winners are available at that URL

    We will also tweet, via @IOCCC, when the winning source is available.

    It is pointless to ask the IOCCC judges how many entries we receive.
|   Other government TLA or FLA snooping organizations are prohibited from
|   either confirming, denying or revealing any knowledge of this data point.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|       q.2014@ioccc.org        (do not submit entries to this address)

|   You must include the words 'ioccc 2014 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
|       23rd International Obfuscated C Code Contest Official Rules

|  Copyright (C) 2006-2014 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
                b.  To darken.  2. To confuse:  his emotions obfuscated his
                judgment.  [LLat. obfuscare, to darken : ob(intensive) +
                Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
                obfuscatory adj.


| This rules file is version 2014-08-29-v18.

| Most of the changes from the previous IOCCC rules
| been marked with a "|" on the left hand side of the line.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

| The 23rd IOCCC contest entry window is:

|   2014-Sep-01 02:03:04 UTC to 2014-Oct-19 18:17:16 UTC

|   These rules are provisional, and might be adjusted.

|   The final rules will be availble along with the submission server and
|   updated iocccsize.c tool on or slightly before 2014-Sep-15 15:15:15 UTC.


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.

       When your program source is fed as input to the current IOCCC size
       tool, and the IOCCC size tool -i command line option is used, the value
       printed should be <= 2053.

       The source to the current IOCCC size tool is found at this URL:

|         http://www.ioccc.org/2014/iocccsize.c

    3) Submissions should be performed using the instructions outlined at:

           https://submit.ioccc.org/

|      That URL should be active on or slightly before 2014-Sep-15 15:15:15 UTC

    4) If your entry is selected as a winner, it will be modified as follows:

        Your 'build' instructions will be incorporated into a makefile.

        Your source code will be renamed from prog.c to a name
        of our choice (usually related to your family name or
        anonymous) followed by a optional digit if there are conflicting
        winning entries.  The resulting binary will be renamed from prog to a
        equivalent of our choice.

        If needed, indicate in your remarks file how your entry
        must be changed to accommodate the above.

    5) Your entry must not modify the content or filename of any part of your
       original entry including, but not limited to prog.c, the Makefile
       (we create from your how to build instructions), as well as any data
       files you submit.

       If you entry wishes to modify such content, it must first copy the
       file to a new filename and then modify that copy.

|   6) I am not a rule, I am a free being!!

|      while (!understand(ioccc(rule(number(6))))) { laugh(); }

    7) The obfuscated C program must be an original work that you own.

       You (the authors) must own the contents of your submission OR
       you must have permission from the owners to submit their content
       under the Creative Commons Attribution-ShareAlike 3.0 Unported
       (CC BY-SA 3.0) license (see rule 18).

       If you submit any content that is owned by others, you MUST
       detail that ownership (i.e., who owns what) and document the
       permission you obtained.

|   8) Entries must be received prior to 2014-Oct-19 18:17:16 UTC.

       A confirmation of submission will be sent to the submitter's
       email address before the close of the contest.

|   9) Each person may submit up to and including 8.00 entries per contest.
       Each entry must be submitted separately.

   10) Entries requiring human interaction to be initially compiled are
       not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
|      special owner, special group, etc.) are still highly discouraged. We
|      do not guarantee these functions will behave as you expect on our test
|      platforms. If your program needs special permissions please document
|      them in the remarks file.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the remarks file.

   13) Any C source that fails to compile because of unescaped octets with
       the high bit set (octet value >= 128) will be rejected.

   14) Any C source that fails to compile because of lines with trailing
       control-M's (i.e., lines with a tailing octet 015) will be rejected.

       Please do not put trailing control-M's in your remarks file.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

|      After your email address has been confirmed, the submission code will
|      be valid for submitting and editing the entry for the lifetime of the
|      competition.

|  16) You are STRONGLY encouraged to submit a previously unpublished and
|      original entry. Submissions that are similar to previous entries are
|      discouraged. As we judge anonymously, submissions that have already
|      been published may be disqualified.

   17) The total size of your submission: the sum of the size of the program,
       hints, comments, build and info files MUST be less than or equal
       to 1048576 octets in size.

   18) The entirety of your entry must be submitted under the Creative Commons
       Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):

            http://creativecommons.org/licenses/by-sa/3.0/

       You must not submit anything that cannot be submitted under that license.

   19) The remarks file must be written in markdown format. See:

            http://daringfireball.net/projects/markdown/basics

       for more information.

|      We currently use "Discount" to convert markdown to HTML
|
|            http://www.pell.portland.or.us/~orc/Code/discount/

   20) The how to build instructions must be in make form.

       The target of the make file must be called prog.  The original
       C source file must be called prog.c.

       To invoke the C compiler, use ${CC}.
       To invoke the C preprocessor use ${CPP}.

       Do not assume that . (the current working directory) is in the $PATH.

       Use a shell command syntax that is compatible with bash.

       Assume that commands commonly found in POSIX-like / Linux-like systems
       are available in the search path.

       Do not assume any particular given value of ${CFLAGS} or other
       commonly used make variables.

   21) Your entry must not create nor modify files above the current directory
       with the exception of the /tmp and the /var/tmp directories.  Your entry
       may create subdirectories below the current directory, or in /tmp,
       or in /var/tmp provided that "." is not the first octet in any
       directory name.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll.

    Please send questions or comments about the contest, to:

|       q.2014@ioccc.org       (for questions only!)

    You must include the words:

|       ioccc 2014 question

    in the subject of your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
| 24th International Obfuscated C Code Contest Official Guidelines

| Copyright (C) 2006-2015 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

| This guidelines file is version 2015-07-19-v24.

| Most of the changes from the previous IOCCC guidelines
| been marked with a "|" on the left hand side of the line.


ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
|   submit entries to the International Obfuscated C Code Contest (IOCCC).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    We recommend that you follow the twitter handle:

        @IOCCC

    to learn about IOCCC news, important IOCCC related alerts, IOCCC
    reminders, and changes to the rules and these guidelines.

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    While we try to post use news at:

        http://www.ioccc.org/index.html#news

    such postings may be delayed or obscured by slow to respond mirrors.


| WHAT'S NEW IN 2015:

|   This IOCCC runs from:
|
|	2015-Jul-08 09:10:11.12 +/- .13 seconds UTC
|   to:
|       2015-Oct-10 10:10:10.10 +/- .10 seconds UTC.
|
|   Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
|   should be considered provisional BETA versions and may be adjusted
|   at any time.
|
|   The IOCCC submission URL:
|
|       https://submit.ioccc.org/
|
|   will be available and active on or slightly before the start of this IOCCC.
|
|   The official rules, guidelines and iocccsize.c tool will be available
|   on the official IOCCC web site on or slightly before start of this IOCCC.
|   Please check the IOCCC web site "How to enter" link:
|
|	http://www.ioccc.org/index.html#enter
|
|   on or after the start of this IOCCC to be sure you are using the correct
|   versions of these items before using the IOCCC entry submission URL.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

        * look at the original source
        * convert ANSI tri-graphs to ASCII
        * C pre-process the source ignoring '#include' lines
        * C pre-process the source ignoring '#define' and '#include' lines
        * run it through a C beautifier
        * examine the algorithm
        * compile it (with flags to enable all warnings)
        * execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 29 reasons why these guidelines seem obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
    under certain conditions.  Wise people, when submitting something clever
    will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" really really, and we do mean really, do need to be more creative.

    Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.  A clean looking program with
    misleading comments and variable names might be a good start.

    When programs use VTxxx/ANSI sequences, they should NOT limited to a
    specific terminal brand.  Those programs that work in a standard xterm
    are considered more portable.

    Rule 2 (the size rule) has been changed.  In particular rule 2 refers to
    the use of an IOCCC size tool.  The source for this tool is found at:

|       http://www.ioccc.org/2015/iocccsize.c

    The IOCCC size tool should be compiled as:

        cc -pedantic -Wall -std=c99 iocccsize.c -o iocccsize

    This tool imposes a 2nd limit on C code size.  To check your program
    source against the 2nd limit of rule 2, use the -i command line option.
    For example:

        ./iocccsize -i < prog.c

    The IOCCC size tool, when using the -i option, may be summarized as:

        The size tool counts most C reserved words (keyword, secondary,
        and selected preprocessor keywords) as 1.  The size tool counts all
        other octets as 1 excluding ASCII whitespace, and excluding any
        ';', '{' or '}' followed by ASCII whitespace, and excluding any
        ';', '{' or '}' octet immediately before the end of file.

    ASCII whitespace includes ASCII tab, ASCII space, ASCII newline,
    ASCII formfeed, and ASCII carriage return.

    In cases where the above summary and the algorithm implemented by
    the IOCCC size tool source code conflict, the algorithm implemented
    by the IOCCC size tool source code is preferred by the judges.

    There are at least 2 other reasons for selecting 2053 as the 2nd limit
    besides the fact that 2053 is the next prime > 2048.  These reasons
    may be searched for and discovered if you are "Curios!" about 2053. :-)
    Moreover, 2053 was the number of the kernel disk pack of one of the
    judge's BESM-6.

    Take note that this secondary limit imposed by the IOCCC size tool
    obviates some of the need to #define C reserved words in an effort
    to get around the size limits of rule 2.

    Yes Virginia, that is a hint!


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

        #define d define
        #d foo             /* <-- don't expect this to turn into #define foo */

    When declaring local or global variables, you should declare the type:

        int this_is_fine;
        this_is_not;       /* <-- Try to avoid implicit type declarations */

|   We suggest that you compile your entry with a commonly available
|   c11 (formerly C1X) C compiler (ISO/IEC 9899:2011).

|   Do not assume that optional c11 features are supported.  If you
|   must use an optional c11 feature, use feature test macros so
|   that implementations without such optional c11 features will see
|   an entry that is both functional and interesting.

|   We like entries that have workarounds that allow someone with
|   an older c99 (ISO/IEC 9899:1999) compiler to be able to compile
|   and enjoy your entry.

|   Anyone care to submit an entry that makes gratuitous use of all
|   of the c11 reserved words in their intended C language contexts?
|   NOTE: As with the use of the word Belgium, the use of certain gratuitous
|   c11 reserved words may be completely banned in all parts of the Galaxy,
|   except in one small part (ISO/IEC 9899:2011) where they might not truly
|   understand the implications of such words.

|	http://hitchhikers.wikia.com/wiki/Belgium
|	http://www.bezem.de/pdf/ReservedWordsInC.pdf

    DO NOT assume that we will use gcc to compile your program.
    We will first try to compile your program using Clang.

    It is much better to not use any obscure compiler flags if
    you can help it.  We want to discourage the use of obscure compiler
    flags that would make the program less portable.

    One side effect of the above is that you cannot assume the use
    of nested functions such as:

        main() {
|               void dont_do_this() { printf("machine that goes bing!!\n"); }
|               dont_do_this();
        }

    This is because such nested functions often requires one to compile with
    a flag such as -fnested-functions that is not found on some compilers.

    On 2012 July 20, the judges rescinded the encouragement of
    nested functions.  Such constructions, while interesting and sometimes
    amusing, will have to wait until they required by a C standard that are
    actually implemented in commonly used C compilers.  Sorry!

|   We prefer programs that do require a fish license for pet fish, crayon
|   use not withstanding.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

        * assigning a non-va_list variable to/from a va_list variable
        * casting a non-va_list variable into/from a va_list variable
        * passing a va_list variable to a function expecting a non-va_list arg
        * passing a non-va_list variable to a function expecting a va_list arg
        * performing arithmetic on va_list variables
        * using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
    '#" in a C preprocessor directive must be the 1st non-whitespace octet.

    The exit() function returns void.  Some broken systems have exit()
    return int, your entry should assume that exit() returns a void.

|   This line has a change mark at the very beginning.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

|   While those who are used to temperatures found on Saturn's moon
|   Titan might be able to explain to the Walrus why our seas are
|   boiling hot, the question of whether pigs have wings is likely
|   to remain a debatable point to most of them.

    One line programs should be short one line programs: say around 80 to 120
    octets long.  Going well beyond 140 octets is a bit too long to be called
    a one-liner in our vague opinion.

    We tend to dislike programs that:

        * are very hardware specific
        * are very OS version specific
             (index/strchr differences are OK, but socket/streams specific
              code is likely not to be)
        * dump core or have compiler warnings
             (it is OK only if you warn us in the 'remark' header item)
        * won't compile or run under a POSIX P1003.1/P1003.2 like systems
        * depend on a utility or application not normally found on most
          most POSIX P1003.1/P1003.2 like systems
        * abuse the build file to get around the size limit
        * obfuscate by excessive use of ANSI tri-graphs
        * are longer than they need to be
        * are "blob-ier" than they need to be
        * are rather similar to previous winners  :-(
        * are too similar to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    At least one judge prefers to maintain the use of the leap-second
|   as part of the world's time standard.  If your code prints time
|   with seconds, we prefer that your code be capable of printing the
|   time of day during a leap-second where the value in seconds
|   after the minute mark is 60.

    The "how to build" make process should not be used to try and get
    around the size limit.  It is one thing to make use of a several -D's
    on the compile like to help out, but it is quite another to use many
    bytes of -D's in order to try and squeeze the source under the size limit.

    The judges, as a group, have a history giving wide degree of latitude
|   to reasonable entries.  And recently they have had as much longitudinal
|   variation as it is possible to have on Earth.  :-)

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    You are in a maze of twisty guidelines, all different.

    There are at least zero judges who think that Fideism has little
    or nothing to do with the IOCCC judging process.

    Don't forget that the building of your program should be done
|   ***without human intervention***.  So don't do things such as:

        prog: prog.c
                #echo this next line requires data from standard input
                cat > prog.c
                ${CC} prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when it is built 'automatically'.  And
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

        prog: prog.c
                ${CC} prog.c -DNON_HUMAN_COMPILE -o prog
                @echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    octets.   Really try to be more creative than blob coding. *HINT!*

    Please do not use things like gzip to get around the size limit.
|   Try to be more creative.

    We really dislike entries that make blatant use of including
    large data files to get around the source code size limit.

|   We do not recommend submitting systemd source code to the IOCCC,
|   if nothing else because that code is likely to exceed the source code
|   size limit.  This isn't to say that another highly compact and obfuscated
|   replacement of init would not be an interesting submission.

    Did we remember to indicate that programs that blatantly use
    some complex state machine to do something simple are boring?
    We think we did.  :-)

    All generalizations are false, including this one. -- Mark Twain

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!
    Remember, you can submit more than one entry.  See the rules for details.

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    Programs that claim to be the smallest C source that does something, really
    better be the smallest such program or they risk being rejected because
    they do not work as documented.

    Please note that the C source below, besides lacking in obfuscation,
    is NOT the smallest C source file that when compiled and run, dumps core:

        main;

    We do not like writable strings.  That is, we don't want stuff like:

        char *T = "So many primes, so little time!";
        ...
        T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

        char b[] = "Is this OK";
        b[9] = 'K';

|   There are still more than zero typos in this sentence.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
    example, don't depend on a particular type or size of display.
    Don't assume the use of a particular browser.  Instead assume a
    generic browser that forms to a widely used W3C standard.
    Don't assume a particular sound sub-system or video driver is installed
    in the OS. Instead, make use of a well known and widely available open
    source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    This is the only guideline that contains the word fizzbin.

    We don't like entries that use proprietary toolkits such as the M*tif,
    Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
    open source toolkit that is widely and freely available instead.

|   The previous guideline in this spot has been replaced by this guideline.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
|   in the program "remarks".  They should also not depend on any
|   particular window manager.

    Try to avoid entries that play silent sound segments or play the
    Happy Birthday song; music that some people believe is copyrighted
    (even if such copyrights appear to be bogus and/or blatant abuses of
    the copyright system).

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest.

    You very well might not be completely prohibited from failing to not
|   partly misunderstand this particular guideline, but of course we could
|   not possibly comment.  Nevertheless, you are not mandated to
    determine that this or the previous sentence is false and misleading.
|   Therefore, it might not be wise to not fail to consider failing to do so.

    We like programs that:

        * are as concise and small as they need to be
        * do something at least quasi-interesting
        * are portable
        * are unique or novel in their obfuscation style
        * MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
        * make us laugh and/or throw up  :-)  (humor really helps!)
        * make us want to eat good chocolate.

    Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Please avoid this specific individual guideline, if at all possible.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

|   One should restrict libcurses to portable features found on BSD
|   or Linux curses.

    Rule 13 states any C source that fails to compile because of unescaped
    octets with the high bit set (octet value >= 128) will be rejected.
    Instead of unescaped octets, you should use \octal or \hex escapes:

                  /* 123456789 123456789 123456789 123456 */
        char *foo = "This string is 36 octets in length \263";
              /* This octet requires 4 octets of source ^^^^ */
        if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
        else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
    otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

    We prefer code that can run on either a 64-bit or 32-bit processor.
    However, it is unwise to assume it will run on an i386 or x86 architecture.

    We believe that Mark Twain's remark:

        Get your facts first, then you can distort them as you please.

    is a good guideline for those writing code for the IOCCC.

    While programs that only run in a specific word size are OK.  If you have
    to pick, choose a 64-bit word size.

    If we are feeling ornery we might choose to compile your program
    for running on an Arduino or a PDP-11.  Heck, should we ever find
    an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
    might just try your entry on that emulator as well :-)

    If your entry MUST run only in 32-bit mode on an Intel processor, add the
    following compiler flag:

        -arch i386

    to your "how to build" make compile line.  For example:

        prog: prog.c
                ${CC} prog.c -arch i386 -o prog

    Be even more creative!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.  A cleaver author
    should be able to read them and "drive a truck through the holes" in
    the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.  Real programmers must face obfuscated
    and sometimes conflicting specifications and requirements from marketing,
    sales, product management an even from customers themselves on a
    all to regular basis.  This is one of the reasons why the rules and
    guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

    Each entry submitted is given a random id number and subdirectory.  The
    entry files including, but not limited to prog.c, Makefile (that we
    form from around your "how to build" information), as well as any
    data files that you submit are all placed under their own directory.
    stored and judged from this directory.

    Any information about the authors is not read by the judges until
    the judging process is complete, and then only from entries that have
|   won an award.  Because we do not read this information for entries that
|   do not win, we do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
    that reveals your identity in your entry.

    Now some people point out that coding style might reveal the information
    about the others.  However we consider this to be simply circumstantial
    and outside the scope of the above paragraph.

    Some people, in the past, have attempted to obfuscate their identity by
    including comments of famous Internet personalities such as Peter Honeyman
    (http://www.citi.umich.edu/u/honey/).  The judges are on to this
    trick and therefore consider any obfuscated source or data file
    claiming to be from Honeyman to not be form Honeyman.  This of course
    creates an interesting paradox known as the "obfuscated Peter Honeyman
    paradox".  Should Peter Honeyman actually submit an obfuscated entry,
    he alone is excluded from the above, as we will likely believe
    it just another attempt at confusion.  This guideline is known
    as the "Peter Honeyman is exempt" guideline.

    BTW: None of the entries claiming to be from Peter Honeyman have ever
    won an award.  So it is theoretically possible that Peter Honeyman
    did submit an entry in the past.  In the past, Peter had denied
    submitting anything to the IOCCC.  Perhaps those entries were
    submitted by one of his students?

|   We will be clear on this point, and the rules will be adjusted to
|   reflect this, DO NOT put author's names in obvious ways into your
|   source code, remarks, data files, etc.  The above "Peter Honeyman is
|   exempt" not withstanding.

    We seemed to have digressed again ... :-)  Returning to the judging process:

    We prefer to be kept in the dark as much as you are until the final
    awards are given.  We enjoy the surprise of finding out in the end,
    who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.

    During the judging process. a process that spans multiple sessions
    over a few weeks, post general updates from our @IOCCC twitter account.

    Once we have selected the winners, for each category we will tweet:

        category name
        name(s) of the authors (or anonymous if requested)
        twitter handle(s) (if provided and if anonymity was not requested)
        country code(s) of the author(s)

    After the initial announcement, we attempt to send EMail to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

        * reading the "how to build" information and forming a Makefile
        * reading prog.c, the C source
        * reviewing the "remarks" information
        * briefly looking any any supplied data files
        * passing the source thru the C pre-processor
            skipping over any #include files
        * performing a number of C beautify/cleanup edits on the source
        * passing the beautified source thru the C pre-processor
            skipping over any #include files
        * compiling/building the source
        * running the program
        * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

|       * best small one line program (see above about one line programs)
        * best small program
        * strangest/most creative source layout
        * most useful obfuscated program
        * best game that is obfuscated
        * most creatively obfuscated program
        * most deceptive C code (code with deceptive comments and source code)
        * best X client (see OUR LIKES AND DISLIKES)
|       * best abuse of ISO C or ANSI C standard (see above about compilers)
        * best abuse of the C preprocessor
        * worst abuse of the rules
        * (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to to about
    half that number: declaring those remaining to be winners.

    Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More than one IOCCC judge has been known to bribe another IOCCC judge
    into voting for a winning entry by offering a bit high quality chocolate.
    This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
    entry that abuses the contest guidelines in an interesting way,
    or that stretches the content rules that while legal, is
    nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.

|   In years past, we renamed the winning entry from prog.c to a
|   name related to the submitter(s) names.  This is no longer done.
|   Winning source is called prog.c  A compiled binary is called prog.

|   The start and end dates of this IOCCC include a +/- number of seconds.
|   This interval was added to give those not located immediately next
|   to the IOCCC submission server some packet time of flight leeway.
|   Those wishing to submit their entries prior to the close of this
|   IOCCC would be well advised to not wait until the last millisecond.
|   Moreover the submission server might be busy dealing with other
|   last minute submissions.  You would be better off submitting your
|   entry a day or so early just be sure you get it in on time.


ANNOUNCEMENT OF WINNERS:

    The judges will tweet initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    from the @IOCCC twitter handle.  Non-twitter users should visit:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

        http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

        http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

        http://www.ioccc.org/years.html

        NOTE: previous winners are available at that URL

    We will also tweet, via @IOCCC, when the winning source is available.

    It is pointless to ask the IOCCC judges how many entries we receive.
    Other government TLA or FLA snooping organizations are prohibited from
    either confirming, denying or revealing any knowledge of this data point.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending EMail to the following address:

|       q.2015@ioccc.org        (do not submit entries to this address)

|   You must include the words 'ioccc 2015 question' in the subject of your
    EMail message when sending EMail to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
|       24th International Obfuscated C Code Contest Official Rules

|  Copyright (C) 2006-2015 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
                b.  To darken.  2. To confuse:  his emotions obfuscated his
                judgment.  [LLat. obfuscare, to darken : ob(intensive) +
                Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
                obfuscatory adj.


| This rules file is version 2015-05-27-v23.

| Most of the changes from the previous IOCCC rules
| been marked with a "|" on the left hand side of the line.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

|   This IOCCC runs from:
|
|	2015-Jul-08 09:10:11.12 +/- .13 seconds UTC
|   to:
|       2015-Oct-10 10:10:10.10 +/- .10 seconds UTC.
|
|   Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
|   should be considered provisional BETA versions and may be adjusted
|   at any time.
|
|   The IOCCC submission URL:
|
|       https://submit.ioccc.org/
|
|   will be available and active on or slightly before the start of this IOCCC.
|
|   The official rules, guidelines and iocccsize.c tool will be available
|   on the official IOCCC web site on or slightly before start of this IOCCC.
|   Please check the IOCCC web site "How to enter" link:
|
|	http://www.ioccc.org/index.html#enter
|
|   on or after the start of this IOCCC to be sure you are using the correct
|   versions of these items before using the IOCCC entry submission URL.


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

    2) The size of your program source must be <= 4096 bytes in length.

       When your program source is fed as input to the current IOCCC size
       tool, and the IOCCC size tool -i command line option is used, the value
|      printed shall be less than or equal to 2053.

       The source to the current IOCCC size tool is found at this URL:

|         http://www.ioccc.org/2015/iocccsize.c

    3) Submissions should be performed using the instructions outlined at:

           https://submit.ioccc.org/

|      That URL should be active on or slightly before 2015-Sep-09 09:09:09 UTC.

    4) If your entry is selected as a winner, it will be modified as follows:

        Your 'build' instructions will be incorporated into a makefile.

|       Your source code will be the file prog.c.  The compiled binary
|	will be called prog.

    5) Your entry must not modify the content or filename of any part of your
       original entry including, but not limited to prog.c, the Makefile
       (we create from your how to build instructions), as well as any data
       files you submit.

       If you entry wishes to modify such content, it must first copy the
       file to a new filename and then modify that copy.

|   6) I am not a rule, I am a free(void *man)!!

|      while (!understand(ioccc(rule(UR(number(6)))))) { laugh(); }

    7) The obfuscated C program must be an original work that you own.

       You (the authors) must own the contents of your submission OR
       you must have permission from the owners to submit their content
       under the Creative Commons Attribution-ShareAlike 3.0 Unported
       (CC BY-SA 3.0) license (see rule 18).

       If you submit any content that is owned by others, you MUST
       detail that ownership (i.e., who owns what) and document the
       permission you obtained.

|   8) Entries must be received prior to the end if this IOCCC which is:
|
|	   2015-Oct-10 10:10:10.10 +/-.10 seconds UTC

|      A confirmation of submission will be sent to the submitter
       email address before the close of the contest.

|   9) Each person may submit up to and including 8.000 entries per contest.
       Each entry must be submitted separately.

   10) Entries requiring human interaction to be initially compiled are
       not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner, special group, etc.) are still highly discouraged. We
       do not guarantee these functions will behave as you expect on our test
       platforms. If your program needs special permissions please document
       them in the remarks file.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the remarks file.

   13) Any C source that fails to compile because of unescaped octets with
       the high bit set (octet value >= 128) will be rejected.

   14) Any C source that fails to compile because of lines with trailing
       control-M's (i.e., lines with a tailing octet 015) will be rejected.

|      Please do not put trailing control-M's on remarks file lines.
|      Please check to be sure, before submitting, that you have removed
|      any control-M at the end of remark file lines.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

       After your email address has been confirmed, the submission code will
       be valid for submitting and editing the entry for the lifetime of the
       competition.

   16) You are STRONGLY encouraged to submit a previously unpublished and
       original entry. Submissions that are similar to previous entries are
       discouraged. As we judge anonymously, submissions that have already
       been published may be disqualified.

   17) The total size of your submission: the sum of the size of the program,
       hints, comments, build and info files MUST be less than or equal
       to 1048576 octets in size.

   18) The entirety of your entry must be submitted under the Creative Commons
       Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):

            http://creativecommons.org/licenses/by-sa/3.0/

       You must not submit anything that cannot be submitted under that license.

   19) The remarks file must be written in markdown format. See:

            http://daringfireball.net/projects/markdown/basics

       for more information.

       We currently use "Discount" to convert markdown to HTML

             http://www.pell.portland.or.us/~orc/Code/discount/

   20) The how to build instructions must be in make form.

       The target of the make file must be called prog.  The original
       C source file must be called prog.c.

       To invoke the C compiler, use ${CC}.
       To invoke the C preprocessor use ${CPP}.

       Do not assume that . (the current working directory) is in the $PATH.

       Use a shell command syntax that is compatible with bash.

       Assume that commands commonly found in POSIX-like / Linux-like systems
       are available in the search path.

       Do not assume any particular given value of ${CFLAGS} or other
       commonly used make variables.

   21) Your entry must not create nor modify files above the current directory
       with the exception of the /tmp and the /var/tmp directories.  Your entry
       may create subdirectories below the current directory, or in /tmp,
       or in /var/tmp provided that "." is not the first octet in any
       directory name.

|  22) Your source code, data files, remarks and program output must NOT
|      identify the authors of your code.  The judges STRONGLY prefer to
|      not know who is submitting entries to the IOCCC.

|      The "Peter Honeyman is exempt" guideline also applies to this rule.
|      Identifying yourself, in an obvious way in your code, data, remarks
|      or program output, unless you are Peter Honeyman or pretending
|      to be Peter Honeyman, will be grounds for disqualification of your entry.

|  23) This prime rule number is reserved for future use.

|  24) Even though 24 is not prime, you should still see rule #23.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper, Landon
    Curt Noll.

    Please send questions or comments about the contest, to:

|       q.2015@ioccc.org       (for questions only!)

    You must include the words:

|       ioccc 2015 question

    in the subject of your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
| 25th International Obfuscated C Code Contest Official Guidelines

| Copyright (C) 2006-2017 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

| This guidelines file is version 2017-12-25-v25.

| Most of the changes from the previous IOCCC guideline set
| have been marked with a "|" on the left hand side of the line.



ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    We recommend that you follow the twitter handle:

        @IOCCC

    to learn about IOCCC news, important IOCCC related alerts, IOCCC
    reminders, and changes to the rules and these guidelines.

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    While we try to post use news at:

        http://www.ioccc.org/index.html#news

    such postings may be delayed or obscured by slow to respond mirrors.


| WHAT'S NEW IN 2017/2018:

    This IOCCC runs from:

|	2017-Dec-29 05:38:51 UTC
    to:
|       2018-Mar-15 03:08:07 UTC

|   The reason for the UTC time of day in the IOCCC contest timespan is new.

    Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
    should be considered provisional BETA versions and may be adjusted
    at any time.

|   Even though the contest will start in 2017, because the contest will close
|   in 2018, URLs, subject lines, and contest related email addresses use 2018.

    The IOCCC submission URL:

        https://submit.ioccc.org/

    will be available and active on or slightly before the start of this IOCCC.

    The official rules, guidelines and iocccsize.c tool will be available
    on the official IOCCC web site on or slightly before start of this IOCCC.
    Please check the IOCCC web site "How to enter" link:

 	http://www.ioccc.org/index.html#enter

    on or after the start of this IOCCC to be sure you are using the correct
    versions of these items before using the IOCCC entry submission URL.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

        * look at the original source
        * convert ANSI tri-graphs to ASCII
        * C pre-process the source ignoring '#include' lines
        * C pre-process the source ignoring '#define' and '#include' lines
        * run it through a C beautifier
        * examine the algorithm
        * compile it (with flags to enable all warnings)
        * execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 2^5-1 reasons why these guidelines seem obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
    under certain conditions.  Wise people, when submitting something clever
    will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" really really, and we do mean really, do need to be more creative.

    Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.  A clean looking program with
    misleading comments and variable names might be a good start.

    When programs use VTxxx/ANSI sequences, they should NOT limited to a
    specific terminal brand.  Those programs that work in a standard xterm
    are considered more portable.

    Rule 2 (the size rule) has been changed.  In particular rule 2 refers to
    the use of an IOCCC size tool.  The source for this tool is found at:

|       http://www.ioccc.org/2018/iocccsize.c

|   To further clarify rule 2, we subdivided it into two parts, 2a and 2b.
|   Your entry must satisfy both the maximum size rule 2a AND your entry
|   must satisfy the IOCCC size tool rule 2b.

    The IOCCC size tool should be compiled as:

|       cc -pedantic -Wall -Wextra -std=c11 iocccsize.c -o iocccsize

|   This tool imposes a 2nd limit on C code size (rule 2b).  To check your
|   code against the 2nd limit of rule 2, use the -i command line option.
    For example:

        ./iocccsize -i < prog.c

    The IOCCC size tool, when using the -i option, may be summarized as:

        The size tool counts most C reserved words (keyword, secondary,
        and selected preprocessor keywords) as 1.  The size tool counts all
        other octets as 1 excluding ASCII whitespace, and excluding any
        ';', '{' or '}' followed by ASCII whitespace, and excluding any
        ';', '{' or '}' octet immediately before the end of file.

    ASCII whitespace includes ASCII tab, ASCII space, ASCII newline,
    ASCII formfeed, and ASCII carriage return.

    In cases where the above summary and the algorithm implemented by
    the IOCCC size tool source code conflict, the algorithm implemented
    by the IOCCC size tool source code is preferred by the judges.

    There are at least 2 other reasons for selecting 2053 as the 2nd limit
    besides the fact that 2053 is the next prime > 2048.  These reasons
    may be searched for and discovered if you are "Curios!" about 2053. :-)
    Moreover, 2053 was the number of the kernel disk pack of one of the
    judge's BESM-6.

    Take note that this secondary limit imposed by the IOCCC size tool
    obviates some of the need to #define C reserved words in an effort
    to get around the size limits of rule 2.

    Yes Virginia, that is a hint!


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

        #define d define
        #d foo             /* <-- don't expect this to turn into #define foo */

    When declaring local or global variables, you should declare the type:

        int this_is_fine;
        this_is_not;       /* <-- Try to avoid implicit type declarations */

    We suggest that you compile your entry with a commonly available
    c11 (formerly C1X) C compiler (ISO/IEC 9899:2011).

    Do not assume that optional c11 features are supported.  If you
    must use an optional c11 feature, use feature test macros so
    that implementations without such optional c11 features will see
    an entry that is both functional and interesting.

    We like entries that have workarounds that allow someone with
    an older c99 (ISO/IEC 9899:1999) compiler to be able to compile
    and enjoy your entry.

|   We really like "lint free" code.  However lint is a toll of the past.
|   So try to ensure that your entry compiles warning free.  If possible,
|   to compile compile your code using:
|
|	-Wall -Wextra -pedantic
|
|   For compilers, such as clang, that have the -Weverything option, try
|   to make your code compile warning free using:
|
|	-Wall -Wextra -Weverything -pedantic
|
|   If you must turn off various warnings on the compile line such as:
|
|	... -Wno-empty-body -Wno-return-type ...
|
|   be sure to clearly state so in your remarks AS WELL AS in
|   your "how to build" / Makefile.
|
|   All other things being equal, a program that must turn off fewer
|   warnings will be considered better, for certain values of better.

|   Unless you clearly state otherwise in your remarks AS WELL AS in
|   your "how to build" / Makefile we will compile using:
|
|	-O3 -std=c11

    Anyone care to submit an entry that makes gratuitous use of all
    of the c11 reserved words in their intended C language contexts?
    NOTE: As with the use of the word Belgium, the use of certain gratuitous
    c11 reserved words may be completely banned in all parts of the Galaxy,
    except in one small part (ISO/IEC 9899:2011) where they might not truly
    understand the implications of such words.

 	http://hitchhikers.wikia.com/wiki/Belgium
 	http://www.bezem.de/pdf/ReservedWordsInC.pdf

    DO NOT assume that we will use gcc to compile your program.
    We will first try to compile your program using Clang.

    It is much better to not use any obscure compiler flags if
    you can help it.  We want to discourage the use of obscure compiler
    flags that would make the program less portable.

    One side effect of the above is that you cannot assume the use
    of nested functions such as:

        main() {
|               void do_not_do_this() {
|		     printf("The machine that goes bing!\n");
|		}
|               do_not_do_this();
        }

    This is because such nested functions often requires one to compile with
    a flag such as -fnested-functions that is not found on some compilers.

    On 2012 July 20, the judges rescinded the encouragement of
    nested functions.  Such constructions, while interesting and sometimes
    amusing, will have to wait until they required by a C standard that are
    actually implemented in commonly used C compilers.  Sorry!

|   We prefer programs that do not require a fish license for pet fish, crayon
    use not withstanding.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

        * assigning a non-va_list variable to/from a va_list variable
        * casting a non-va_list variable into/from a va_list variable
        * passing a va_list variable to a function expecting a non-va_list arg
        * passing a non-va_list variable to a function expecting a va_list arg
        * performing arithmetic on va_list variables
        * using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
    '#" in a C preprocessor directive must be the 1st non-whitespace octet.

    The exit() function returns void.  Some broken systems have exit()
    return int, your entry should assume that exit() returns a void.

|   This guideline has a change mark at the very beginning.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

|   While those who are used to temperatures found on dwarf planet
|   Pluto might be able to explain to the Walrus why our seas are
    boiling hot, the question of whether pigs have wings is likely
    to remain a debatable point to most of them.

    One line programs should be short one line programs: say around 80 to 120
    octets long.  Going well beyond 140 octets is a bit too long to be called
    a one-liner in our vague opinion.

    We tend to dislike programs that:

        * are very hardware specific
        * are very OS version specific
             (index/strchr differences are OK, but socket/streams specific
              code is likely not to be)
        * dump core or have compiler warnings
             (it is OK only if you warn us in the 'remark' header item)
        * won't compile or run under a POSIX P1003.1/P1003.2 like systems
        * depend on a utility or application not normally found on most
          most POSIX P1003.1/P1003.2 like systems
        * abuse the build file to get around the size limit
        * obfuscate by excessive use of ANSI tri-graphs
        * are longer than they need to be
        * are "blob-ier" than they need to be
        * are rather similar to previous winners  :-(
        * are too similar to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    At least one judge prefers to maintain the use of the leap-second
    as part of the world's time standard.  If your code prints time
    with seconds, we prefer that your code be capable of printing the
    time of day during a leap-second where the value in seconds
    after the minute mark is 60.

    The "how to build" make process should not be used to try and get
    around the size limit.  It is one thing to make use of a several -D's
    on the compile like to help out, but it is quite another to use many
    bytes of -D's in order to try and squeeze the source under the size limit.

    The judges, as a group, have a history giving wide degree of latitude
    to reasonable entries.  And recently they have had as much longitudinal
    variation as it is possible to have on Earth.  :-)

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

|   We prefer programs that are portable across a wide variety of Un*x-like
|   operating systems (i.e., Linux, BSD, Un*x, etc.).

    You are in a maze of twisty guidelines, all different.

    There are at least zero judges who think that Fideism has little
    or nothing to do with the IOCCC judging process.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do things such as:

        prog: prog.c
                #echo this next line requires data from standard input
                cat > prog.c
                ${CC} prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when it is built 'automatically'.  And
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

        prog: prog.c
                ${CC} prog.c -DNON_HUMAN_COMPILE -o prog
                @echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    octets.   Really try to be more creative than blob coding. *HINT!*

    Please do not use things like gzip to get around the size limit.
|   Try to be much more creative.

    We really dislike entries that make blatant use of including
    large data files to get around the source code size limit.

    We do not recommend submitting systemd source code to the IOCCC,
    if nothing else because that code is likely to exceed the source code
    size limit.  This isn't to say that another highly compact and obfuscated
    replacement of init would not be an interesting submission.

    Did we remember to indicate that programs that blatantly use
    some complex state machine to do something simple are boring?
    We think we did.  :-)

    All generalizations are false, including this one. -- Mark Twain

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!
    Remember, you can submit more than one entry.  See the rules for details.

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    Programs that claim to be the smallest C source that does something, really
    better be the smallest such program or they risk being rejected because
    they do not work as documented.

    Please note that the C source below, besides lacking in obfuscation,
    is NOT the smallest C source file that when compiled and run, dumps core:

        main;

    We do not like writable strings.  That is, we don't want stuff like:

        char *T = "So many primes, so little time!";
        ...
        T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

        char b[] = "Is this OK";
        b[9] = 'K';

|   There are more than zero typos in this sentence.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
    example, don't depend on a particular type or size of display.
    Don't assume the use of a particular browser.  Instead assume a
    generic browser that forms to a widely used W3C standard.
    Don't assume a particular sound sub-system or video driver is installed
    in the OS. Instead, make use of a well known and widely available open
    source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    This is the only guideline that contains the word fizzbin.

    We don't like entries that use proprietary toolkits such as the M*tif,
    Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
    open source toolkit that is widely and freely available instead.

    The previous guideline in this spot has been replaced by this guideline.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".  They should also not depend on any
    particular window manager.

    Try to avoid entries that play silent sound segments or play the
    Happy Birthday song; music that some people believe is copyrighted
    (even if such copyrights appear to be bogus and/or blatant abuses of
    the copyright system).

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest.

    You very well might not be completely prohibited from failing to not
    partly misunderstand this particular guideline, but of course we could
|   not possibly comment.  Nevertheless, you are neither required nor mandated
|   to determine that this or the previous sentence is false and misleading.
|   Therefore, it might be wise to not fail to consider failing to do so.

    We like programs that:

        * are as concise and small as they need to be
        * do something at least quasi-interesting
        * are portable
        * are unique or novel in their obfuscation style
        * MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
        * make us laugh and/or throw up  :-)  (humor really helps!)
        * make us want to eat good chocolate.

    Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Please avoid this specific individual guideline, when possible.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    One should restrict libcurses to portable features found on BSD
    or Linux curses.

    Rule 13 states any C source that fails to compile because of unescaped
    octets with the high bit set (octet value >= 128) will be rejected.
    Instead of unescaped octets, you should use \octal or \hex escapes:

                  /* 123456789 123456789 123456789 123456 */
        char *foo = "This string is 36 octets in length \263";
              /* This octet requires 4 octets of source ^^^^ */
        if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
        else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
    otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

    We prefer code that can run on either a 64-bit or 32-bit processor.
    However, it is unwise to assume it will run on an i386 or x86 architecture.

    We believe that Mark Twain's remark:

        Get your facts first, then you can distort them as you please.

    is a good guideline for those writing code for the IOCCC.

|   The IOCCC size tool source, iocccsize.c, is not an original work.
|   Submitting an entry based on our iocccsize.c violates rule 8,
|   even if you write that code!

|   Rule 8 does not prohibit you from writing your own obfuscated IOCCC size tool.
|   However if you do, you might wish to make your tool do something more
|   interesting than simply implementing the IOCCC size tool algorithm.

    While programs that only run in a specific word size are OK.  If you have
    to pick, choose a 64-bit word size.

    If we are feeling ornery we might choose to compile your program
    for running on an Arduino or a PDP-11.  Heck, should we ever find
    an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
    might just try your entry on that emulator as well :-)

    If your entry MUST run only in 32-bit mode on an Intel processor, add the
    following compiler flag:

        -arch i386

    to your "how to build" make compile line.  For example:

        prog: prog.c
                ${CC} prog.c -arch i386 -o prog

    Be even more creative!

|   If there are limitations in your entry, you are highly encouraged
|   to note such limitations in your remarks file.  For example if your
|   entry factors values up to a certain size, you might want to state:
|
|	This entry factors values up 2305567963945518424753102147331756070.
|	Attempting to factor larger values will produce unpredictable results.
|
|   The judges might try to factor the value -5, so you want to might state:
|
|	This entry factors positive values up 2305567963945518424753102147331756070.
|	Attempting to factor large values will produce unpredictable results.
|
|   However the judges might try to also factor 0, so you want to might state:
|
|	This entry factors values between 1 and 2305567963945518424753102147331756070.
|	Attempting to factor values outside that range will produce unpredictable results.
|
|   Moreover the try to also factor 3.5 or 0x7, or Fred, so you want to might state:
|
|	This entry factors integers between 1 and 2305567963945518424753102147331756070.
|	Attempting to factor anything else will produce unpredictable results.
|
|   You entry might be better off catching the attempt to factor bogus values
|   and doing something interesting.  So you might want to code accordingly and state:
|
|	This entry factors integers between 1 and 2305567963945518424753102147331756070.
|	Attempting to factor anything else will cause the program to insult your
|	pet fish Eric.
|
|   The judges might not have a pet fish named Eric, so might want to state:
|
|	This entry factors integers between 1 and 2305567963945518424753102147331756070.
|	Attempting to factor anything else will cause the program to insult your
|	pet fish Eric, or in the case that you lack such a pet, will insult the
|	pet that you do not have.
|
|   When all other things are equal, an entry with fewer limitation will be judged
|   better than an entry with lots of limitations.  So you might want to code accordingly
|   and state:
|
|	This entry attempts to a factor value of any size provided that the program
|       is given enough time and memory.  If the value is not a proper integer, the
|	program will insult a fish named Eric, even if such a fish does not exist.
|
|   BTW: What is so special about 2305567963945518424753102147331756070?  You tell us!


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.  A cleaver author
    should be able to read them and "drive a truck through the holes" in
    the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.  Real programmers must face obfuscated
    and sometimes conflicting specifications and requirements from marketing,
    sales, product management an even from customers themselves on a
|   all too regular basis.  This is one of the reasons why the rules and
    guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

    Each entry submitted is given a random id number and subdirectory.  The
    entry files including, but not limited to prog.c, Makefile (that we
    form from around your "how to build" information), as well as any
    data files that you submit are all placed under their own directory.
    stored and judged from this directory.

    Any information about the authors is not read by the judges until
    the judging process is complete, and then only from entries that have
    won an award.  Because we do not read this information for entries that
    do not win, we do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
    that reveals your identity in your entry.

    Now some people point out that coding style might reveal the information
    about the others.  However we consider this to be simply circumstantial
    and outside the scope of the above paragraph.

    Some people, in the past, have attempted to obfuscate their identity by
    including comments of famous Internet personalities such as Peter Honeyman
    (http://www.citi.umich.edu/u/honey/).  The judges are on to this
    trick and therefore consider any obfuscated source or data file
    claiming to be from Honeyman to not be form Honeyman.  This of course
    creates an interesting paradox known as the "obfuscated Peter Honeyman
    paradox".  Should Peter Honeyman actually submit an obfuscated entry,
    he alone is excluded from the above, as we will likely believe
    it just another attempt at confusion.  This guideline is known
    as the "Peter Honeyman is exempt" guideline.

    BTW: None of the entries claiming to be from Peter Honeyman have ever
    won an award.  So it is theoretically possible that Peter Honeyman
    did submit an entry in the past.  In the past, Peter had denied
    submitting anything to the IOCCC.  Perhaps those entries were
    submitted by one of his students?

|   Hopefully we are CLEAR on this point!  The rules now strongly state:
|   PLEASE DO NOT put author's names, in obvious way, into your
    source code, remarks, data files, etc.  The above "Peter Honeyman is
    exempt" not withstanding.

    We seemed to have digressed again ... :-)  Returning to the judging process:

    We prefer to be kept in the dark as much as you are until the final
    awards are given.  We enjoy the surprise of finding out in the end,
    who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.

    During the judging process. a process that spans multiple sessions
    over a few weeks, post general updates from our @IOCCC twitter account.

    Once we have selected the winners, for each category we will tweet:

        category name
        name(s) of the authors (or anonymous if requested)
        twitter handle(s) (if provided and if anonymity was not requested)
        country code(s) of the author(s)

|   After the initial announcement, we attempt to send Email to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

        * reading the "how to build" information and forming a Makefile
        * reading prog.c, the C source
        * reviewing the "remarks" information
        * briefly looking any any supplied data files
        * passing the source thru the C pre-processor
            skipping over any #include files
        * performing a number of C beautify/cleanup edits on the source
        * passing the beautified source thru the C pre-processor
            skipping over any #include files
        * compiling/building the source
        * running the program
        * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

        * best small one line program (see above about one line programs)
        * best small program
        * strangest/most creative source layout
        * most useful obfuscated program
        * best game that is obfuscated
        * most creatively obfuscated program
        * most deceptive C code (code with deceptive comments and source code)
        * best X client (see OUR LIKES AND DISLIKES)
        * best abuse of ISO C or ANSI C standard (see above about compilers)
        * best abuse of the C preprocessor
        * worst abuse of the rules
        * (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to to about
    half that number: declaring those remaining to be winners.

    Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More than one IOCCC judge has been known to bribe another IOCCC judge
    into voting for a winning entry by offering a bit high quality chocolate.
    This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
    entry that abuses the contest guidelines in an interesting way,
    or that stretches the content rules that while legal, is
    nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.

    In years past, we renamed the winning entry from prog.c to a
    name related to the submitter(s) names.  This is no longer done.
    Winning source is called prog.c  A compiled binary is called prog.


ANNOUNCEMENT OF WINNERS:

    The judges will tweet initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    from the @IOCCC twitter handle.  Non-twitter users should visit:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

        http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

        http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

        http://www.ioccc.org/years.html

        NOTE: previous winners are available at that URL

    We will also tweet, via @IOCCC, when the winning source is available.

    It is pointless to ask the IOCCC judges how many entries we receive.
    Other government TLA or FLA snooping organizations are prohibited from
    either confirming, denying or revealing any knowledge of this data point.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

|   You may contact the judges by sending Email to the following address:

|       q.2018@ioccc.org        (do not submit entries to this address)

|   You must include the words 'ioccc 2018 question' in the subject of your
|   Email message when sending Email to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
|       25th International Obfuscated C Code Contest Official Rules

|  Copyright (C) 2006-2017 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
                b.  To darken.  2. To confuse:  his emotions obfuscated his
                judgment.  [LLat. obfuscare, to darken : ob(intensive) +
                Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
                obfuscatory adj.


| This rules file is version 2017-12-25-v25.

| Most of the changes from the previous IOCCC rule set have
| been marked with a "|" on the left hand side of the line.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

    This IOCCC runs from:

|	2017-Dec-29 05:38:51 UTC
    to:
|       2018-Mar-15 03:08:07 UTC

    Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
    should be considered provisional BETA versions and may be adjusted
    at any time.

    The IOCCC submission URL:

        https://submit.ioccc.org/

    will be available and active on or slightly before the start of this IOCCC.

    The official rules, guidelines and iocccsize.c tool will be available
    on the official IOCCC web site on or slightly before start of this IOCCC.
    Please check the IOCCC web site "How to enter" link:

 	http://www.ioccc.org/index.html#enter

    on or after the start of this IOCCC to be sure you are using the correct
    versions of these items before using the IOCCC entry submission URL.


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

|   2) Size rule requires your entry to satisfy BOTH 2a as well as 2b:
|
|      2a) The size of your program source must be <= 4096 bytes in length.

|      2b) When your program source is fed as input to the current IOCCC size
|          tool, and the IOCCC size tool -i command line option is used, the
           value printed shall not exceed 2053.

       The source to the current IOCCC size tool is found at this URL:

|         http://www.ioccc.org/2018/iocccsize.c

    3) Submissions should be performed using the instructions outlined at:

           https://submit.ioccc.org/

|      That URL should be active on or slightly before 2017-Dec-29 05:38:51 UTC.

    4) If your entry is selected as a winner, it will be modified as follows:

        Your 'build' instructions will be incorporated into a makefile.

        Your source code will be the file prog.c.  The compiled binary
 	will be called prog.

    5) Your entry must not modify the content or filename of any part of your
       original entry including, but not limited to prog.c, the Makefile
       (we create from your how to build instructions), as well as any data
       files you submit.

       If you entry wishes to modify such content, it must first copy the
       file to a new filename and then modify that copy.

|   6) I am not a rule, I am a free(void *man)!

|      while (!understand(ioccc(rule(you(are(number(6))))))) { laugh(); }

    7) The obfuscated C program must be an original work that you own.

       You (the authors) must own the contents of your submission OR
       you must have permission from the owners to submit their content
       under the Creative Commons Attribution-ShareAlike 3.0 Unported
       (CC BY-SA 3.0) license (see rule 18).

       If you submit any content that is owned by others, you MUST
       detail that ownership (i.e., who owns what) and document the
       permission you obtained.

|      Please note that the IOCCC size tool is not an original work.

    8) Entries must be received prior to the end if this IOCCC which is:

|	   2018-Mar-15 03:08:07 UTC

       A confirmation of submission will be sent to the submitter
       email address before the close of the contest.

|   9) Each person may submit up to and including 8.0000 entries per contest.
       Each entry must be submitted separately.

   10) Entries requiring human interaction to be initially compiled are
       not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner, special group, etc.) are still highly discouraged. We
       do not guarantee these functions will behave as you expect on our test
       platforms. If your program needs special permissions please document
       them in the remarks file.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the remarks file.

   13) Any C source that fails to compile because of unescaped octets with
       the high bit set (octet value >= 128) will be rejected.

   14) Any C source that fails to compile because of lines with trailing
       control-M's (i.e., lines with a tailing octet 015) will be rejected.

       Please do not put trailing control-M's on remarks file lines.
       Please check to be sure, before submitting, that you have removed
       any control-M at the end of remark file lines.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

       After your email address has been confirmed, the submission code will
       be valid for submitting and editing the entry for the lifetime of the
       competition.

   16) You are STRONGLY encouraged to submit a previously unpublished and
       original entry. Submissions that are similar to previous entries are
       discouraged. As we judge anonymously, submissions that have already
       been published may be disqualified.

   17) The total size of your submission: the sum of the size of the program,
       hints, comments, build and info files MUST be less than or equal
       to 1048576 octets in size.

   18) The entirety of your entry must be submitted under the Creative Commons
       Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):

            http://creativecommons.org/licenses/by-sa/3.0/

       You must not submit anything that cannot be submitted under that license.

   19) The remarks file must be written in markdown format. See:

            http://daringfireball.net/projects/markdown/basics

       for more information.

       We currently use "Discount" to convert markdown to HTML

             http://www.pell.portland.or.us/~orc/Code/discount/

   20) The how to build instructions must be in make form.

       The target of the make file must be called prog.  The original
       C source file must be called prog.c.

       To invoke the C compiler, use ${CC}.
       To invoke the C preprocessor use ${CPP}.

|      Do not assume that . (the current directory) is in the $PATH.

       Use a shell command syntax that is compatible with bash.

       Assume that commands commonly found in POSIX-like / Linux-like systems
       are available in the search path.

       Do not assume any particular given value of ${CFLAGS} or other
       commonly used make variables.

   21) Your entry must not create nor modify files above the current directory
       with the exception of the /tmp and the /var/tmp directories.  Your entry
       may create subdirectories below the current directory, or in /tmp,
       or in /var/tmp provided that "." is not the first octet in any
       directory name.

|  22) Catch 22:
|
       Your source code, data files, remarks and program output must NOT
       identify the authors of your code.  The judges STRONGLY prefer to
       not know who is submitting entries to the IOCCC.

|      Even if you are a previous IOCCC winner, catch 22 still applies.

|      Identifying the authors of your entry in an obvious way anywhere
|      within in your code, data, remarks or program output (unless you are
|      Peter Honeyman or pretending to be Peter Honeyman) will be grounds
|      for disqualification of your entry.

|      Yes, Virginia, we really mean it!

   23) This prime rule number is reserved for future use.

   24) Even though 24 is not prime, you should still see rule #23.

|  25) The IOCCC rule set consists of 25 rules.  This set of rules includes
|      the Catch 22 rule.


FOR MORE INFORMATION:

|   The judging will be done by Leonid A. Broukhis, Simon Cooper,
|   Landon Curt Noll.

    Please send questions or comments about the contest, to:

|       q.2018@ioccc.org       (for questions only!)

    You must include the words:

|       ioccc 2018 question

    in the subject of your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
| 26th International Obfuscated C Code Contest Official Guidelines

| Copyright (C) 2006-2018 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

| This guidelines file is version 2018-12-25-v26.

| Most of the changes from the previous IOCCC guideline set
| have been marked with a "|" on the left hand side of the line.



ABOUT THIS FILE:

    This file contains guidelines intended to help people who wish to
    submit entries to the International Obfuscated C Code Contest (IOCCC).

    This is not the IOCCC rules, though it does contain comments about
    them.  The guidelines should be viewed as hints and suggestions.
    Entries that violate the guidelines but remain within the rules are
    allowed.  Even so, you are safer if you remain within the guidelines.

    You should read the current IOCCC rules, prior to submitting entries.
    The rules are typically sent out with these guidelines.

    We recommend that you follow the twitter handle:

        @IOCCC

    to learn about IOCCC news, important IOCCC related alerts, IOCCC
    reminders, and changes to the rules and these guidelines.

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    While we try to post use news at:

        http://www.ioccc.org/index.html#news

    such postings may be delayed or obscured by slow to respond mirrors.


| WHAT'S NEW IN 2018/2019:

    This IOCCC runs from:

|	2018-Dec-26 16:06:69 == 2018-Dec-26 16:07:09 UTC
    to:
|       2019-Mar-15 00:86:07 == 2019-Mar-15 01:26:07 UTC

|   The reason for the time of day due to Erdős, an amazing mathematician
!   that at least one of the IOCCC judges had the pleasure of working with.

    Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
    should be considered provisional BETA versions and may be adjusted
    at any time.

|   Even though the contest will start in 2018, because the contest will close
|   in 2019, URLs, subject lines, and contest related email addresses use 2019.

    The IOCCC submission URL:

        https://submit.ioccc.org/

|   The submit URL should be active on or slightly before 2019-Jan-15 15:15:15 UTC.
|   Please wait to submit your entries until after that time.

    The official rules, guidelines and iocccsize.c tool will be available
    on the official IOCCC web site on or slightly before start of this IOCCC.
    Please check the IOCCC web site "How to enter" link:

 	http://www.ioccc.org/index.html#enter

    on or after the start of this IOCCC to be sure you are using the correct
    versions of these items before using the IOCCC entry submission URL.


HINTS AND SUGGESTIONS:

    You are encouraged to examine the winners of previous contests.  See
    FOR MORE INFORMATION for details on how to get previous winners.

    Keep in mind that rules change from year to year, so some winning entries
    may not be valid entries this year.  What was unique and novel one year
    might be 'old' the next year.

    An entry is usually examined in a number of ways.  We typically apply
    a number of tests to an entry:

        * look at the original source
        * convert ANSI tri-graphs to ASCII
        * C pre-process the source ignoring '#include' lines
        * C pre-process the source ignoring '#define' and '#include' lines
        * run it through a C beautifier
        * examine the algorithm
        * compile it (with flags to enable all warnings)
        * execute it

    You should consider how your entry looks in each of the above tests.
    You should ask yourself if your entry remains obscure after it has been
    'cleaned up' by the C pre-processor and a C beautifier.

    Your entry need not pass all of the above tests.  In certain
    cases, a test is not important.  Entries that compete for the
    'strangest/most creative source layout' need not do as well as
    others in terms of their algorithm.  On the other hand, given
    two such entries, we are more inclined to pick the entry that
    does something interesting when you run it.

    We try to avoid limiting creativity in our rules.  As such, we leave
    the contest open for creative rule interpretation.  As in real life
    programming, interpreting a requirements document or a customer request
    is important.  For this reason, we often award 'worst abuse of the
    rules' to an entry that illustrates this point in an ironic way.

    We do realize that there are holes in the rules, and invite entries
    to attempt to exploit them.  We will award 'worst abuse of the rules'
    and then plug the hole next year.  Even so, we will attempt to use
    the smallest plug needed, if not smaller.  :-)

|   There are 2^5+1 reasons why these guidelines seem obfuscated.

    Check out your program and be sure that it works.  We sometimes make
    the effort to debug an entry that has a slight problem, particularly
    in or near the final round.  On the other hand, we have seen some
    of the best entries fall down because they didn't work.

    We tend to look down on a prime number printer that claims that
    16 is a prime number.  If you do have a bug, you are better off
    documenting it.  Noting "this entry sometimes prints the 4th power
    of a prime by mistake" would save the above entry.  And sometimes,
    a strange bug/feature can even help the entry!  Of course, a correctly
    working entry is best.  Clever people will note that 16 might be prime
    under certain conditions.  Wise people, when submitting something clever
    will fully explain such cleverness in their entry's remarks file.

    People who are considering to just use some complex mathematical
    function or state machine to spell out something such as "hello,
    world!" really really, and we do mean really, do need to be more creative.

    Ultra-obfuscated programs are, in some cases, easier to
    deobfuscate than subtly-obfuscated programs.  Consider using
    misleading or subtle tricks layered on top of or under an
    appropriate level of obfuscation.  A clean looking program with
    misleading comments and variable names might be a good start.

    When programs use VTxxx/ANSI sequences, they should NOT limited to a
    specific terminal brand.  Those programs that work in a standard xterm
    are considered more portable.

    Rule 2 (the size rule) has been changed.  In particular rule 2 refers to
    the use of an IOCCC size tool.  The source for this tool is found at:

|       http://www.ioccc.org/2019/iocccsize.c

    To further clarify rule 2, we subdivided it into two parts, 2a and 2b.
    Your entry must satisfy both the maximum size rule 2a AND your entry
    must satisfy the IOCCC size tool rule 2b.

    The IOCCC size tool should be compiled as:

        cc -pedantic -Wall -Wextra -std=c11 iocccsize.c -o iocccsize

    This tool imposes a 2nd limit on C code size (rule 2b).  To check your
    code against the 2nd limit of rule 2, use the -i command line option.
    For example:

        ./iocccsize -i < prog.c

    The IOCCC size tool, when using the -i option, may be summarized as:

        The size tool counts most C reserved words (keyword, secondary,
        and selected preprocessor keywords) as 1.  The size tool counts all
        other octets as 1 excluding ASCII whitespace, and excluding any
        ';', '{' or '}' followed by ASCII whitespace, and excluding any
        ';', '{' or '}' octet immediately before the end of file.

    ASCII whitespace includes ASCII tab, ASCII space, ASCII newline,
    ASCII formfeed, and ASCII carriage return.

    In cases where the above summary and the algorithm implemented by
    the IOCCC size tool source code conflict, the algorithm implemented
    by the IOCCC size tool source code is preferred by the judges.

    There are at least 2 other reasons for selecting 2053 as the 2nd limit
    besides the fact that 2053 is the next prime > 2048.  These reasons
    may be searched for and discovered if you are "Curios!" about 2053. :-)
    Moreover, 2053 was the number of the kernel disk pack of one of the
    judge's BESM-6.

    Take note that this secondary limit imposed by the IOCCC size tool
    obviates some of the need to #define C reserved words in an effort
    to get around the size limits of rule 2.

    Yes Virginia, that is a hint!


OUR LIKES AND DISLIKES:

    Doing masses of #defines to obscure the source has become 'old'.  We
    tend to 'see thru' masses of #defines due to our pre-processor tests
    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as far
    as a program that is more well rounded in confusion.

    Many C compilers dislike the following code, and so do we:

        #define d define
        #d foo             /* <-- don't expect this to turn into #define foo */

    When declaring local or global variables, you should declare the type:

        int this_is_fine;
        this_is_not;       /* <-- Try to avoid implicit type declarations */

    We suggest that you compile your entry with a commonly available
    c11 (formerly C1X) C compiler (ISO/IEC 9899:2011).

    Do not assume that optional c11 features are supported.  If you
    must use an optional c11 feature, use feature test macros so
    that implementations without such optional c11 features will see
    an entry that is both functional and interesting.

    We like entries that have workarounds that allow someone with
    an older c99 (ISO/IEC 9899:1999) compiler to be able to compile
    and enjoy your entry.

    We really like "lint free" code.  However lint is a toll of the past.
    So try to ensure that your entry compiles warning free.  If possible,
    to compile compile your code using:

 	-Wall -Wextra -pedantic

    For compilers, such as clang, that have the -Weverything option, try
    to make your code compile warning free using:

 	-Wall -Wextra -Weverything -pedantic

    If you must turn off various warnings on the compile line such as:

 	... -Wno-empty-body -Wno-return-type ...

    be sure to clearly state so in your remarks AS WELL AS in
    your "how to build" / Makefile.

    All other things being equal, a program that must turn off fewer
    warnings will be considered better, for certain values of better.

    Unless you clearly state otherwise in your remarks AS WELL AS in
    your "how to build" / Makefile we will compile using:

 	-O3 -std=c11

    Anyone care to submit an entry that makes gratuitous use of all
    of the c11 reserved words in their intended C language contexts?
    NOTE: As with the use of the word Belgium, the use of certain gratuitous
    c11 reserved words may be completely banned in all parts of the Galaxy,
    except in one small part (ISO/IEC 9899:2011) where they might not truly
    understand the implications of such words.

 	http://hitchhikers.wikia.com/wiki/Belgium
 	http://www.bezem.de/pdf/ReservedWordsInC.pdf

    DO NOT assume that we will use gcc to compile your program.
    We will first try to compile your program using Clang.

    It is much better to not use any obscure compiler flags if
    you can help it.  We want to discourage the use of obscure compiler
    flags that would make the program less portable.

    One side effect of the above is that you cannot assume the use
    of nested functions such as:

        main() {
|               void please_do_not_do_this() {
|		     printf("The machine that goes BING!\n");
 		}
|               please_do_not_do_this();
        }

    This is because such nested functions often requires one to compile with
    a flag such as -fnested-functions that is not found on some compilers.

    On 2012 July 20, the judges rescinded the encouragement of
    nested functions.  Such constructions, while interesting and sometimes
    amusing, will have to wait until they required by a C standard that are
    actually implemented in commonly used C compilers.  Sorry!

|   We prefer programs that do not require a fish license, crayons not
|   withstanding.

    If your entry uses functions that have a variable number of
    arguments, be careful. Systems implement va_list as a wide variety
    of ways.  Because of this, a number of operations using va_list are
    not portable and must not be used:

        * assigning a non-va_list variable to/from a va_list variable
        * casting a non-va_list variable into/from a va_list variable
        * passing a va_list variable to a function expecting a non-va_list arg
        * passing a non-va_list variable to a function expecting a va_list arg
        * performing arithmetic on va_list variables
        * using va_list as a structure or union

    In particular, do not treat va_list variables as if they were a char **'s.

    Avoid using <varargs.h>.  Use <stdarg.h> instead.

    On 28 January 2007, the Judges rescinded the requirement that the
    '#" in a C preprocessor directive must be the 1st non-whitespace octet.

    The exit() function returns void.  Some broken systems have exit()
    return int, your entry should assume that exit() returns a void.

|   This guideline has a change mark at the very beginning is this line.

    Small programs are best when they are short, obscure and concise.
    While such programs are not as complex as other winners, they do
    serve a useful purpose.  They are often the only program that people
    attempt to completely understand.  For this reason, we look for
    programs that are compact, and are instructional.

|   While those who are used to temperatures found on dwarf planet,
|   (yes Virginia, dwarf planets are planets) such as Pluto might be able to
|   explain to the Walrus why our seas are boiling hot, the question of
|   whether pigs have wings is likely to remain a debatable point to most.

    One line programs should be short one line programs: say around 80 to 120
    octets long.  Going well beyond 140 octets is a bit too long to be called
    a one-liner in our vague opinion.

    We tend to dislike programs that:

        * are very hardware specific
        * are very OS version specific
             (index/strchr differences are OK, but socket/streams specific
              code is likely not to be)
        * dump core or have compiler warnings
             (it is OK only if you warn us in the 'remark' header item)
        * won't compile or run under a POSIX P1003.1/P1003.2 like systems
        * depend on a utility or application not normally found on most
          most POSIX P1003.1/P1003.2 like systems
        * abuse the build file to get around the size limit
        * obfuscate by excessive use of ANSI tri-graphs
        * are longer than they need to be
        * are "blob-ier" than they need to be
        * are rather similar to previous winners  :-(
        * are too similar to previous losers  :-)

    Unless you are cramped for space, or unless you are entering the
    'best one liner' category, we suggest that you format your program
    in a more creative way than simply forming excessively long lines.

    At least one judge prefers to maintain the use of the leap-second
    as part of the world's time standard.  If your code prints time
    with seconds, we prefer that your code be capable of printing the
    time of day during a leap-second where the value in seconds
    after the minute mark is 60.

    The "how to build" make process should not be used to try and get
    around the size limit.  It is one thing to make use of a several -D's
    on the compile like to help out, but it is quite another to use many
    bytes of -D's in order to try and squeeze the source under the size limit.

    The judges, as a group, have a history giving wide degree of latitude
    to reasonable entries.  And recently they have had as much longitudinal
    variation as it is possible to have on Earth.  :-)

    You should try to restrict commands used on the build file to
    POSIX-like or common Un*x-like commands.  You can also compile
    and use your own programs.  If you do, try to build and execute
    from the current directory.  This restriction is not a hard and
    absolute one.  The intent is to ensure that the building if your
    program is reasonably portable.

    We prefer programs that are portable across a wide variety of Un*x-like
|   operating systems (i.e., Linux, GNU Hurd, BSD, Un*x, etc.).

    You are in a maze of twisty guidelines, all different.

    There are at least zero judges who think that Fideism has little
    or nothing to do with the IOCCC judging process.

    Don't forget that the building of your program should be done
    ***without human intervention***.  So don't do things such as:

        prog: prog.c
                #echo this next line requires data from standard input
                cat > prog.c
                ${CC} prog.c -o prog

    However, you can do something cute such as making your program
    do something dumb (or cute) when it is built 'automatically'.  And
    when it is run with a human involved, do something more clever.
    For example, one could use the build instructions:

        prog: prog.c
                ${CC} prog.c -DNON_HUMAN_COMPILE -o prog
                @echo "See remarks section about alternate ways to compile"

    and then include special notes in the program "remarks" for
    alternate / human intervention based building.

    We want to get away from source that is simply a compact blob of
    octets.   Really try to be more creative than blob coding. *HINT!*

    Please do not use things like gzip to get around the size limit.
|   Please try to be much more creative.

    We really dislike entries that make blatant use of including
    large data files to get around the source code size limit.

    We do not recommend submitting systemd source code to the IOCCC,
    if nothing else because that code is likely to exceed the source code
    size limit.  This isn't to say that another highly compact and obfuscated
    replacement of init would not be an interesting submission.

    Did we remember to indicate that programs that blatantly use
    some complex state machine to do something simple are boring?
    We think we did.  :-)

    All generalizations are false, including this one. -- Mark Twain

    Given two versions of the same program, one that is a compact blob
    of code, and the other that is formatted more like a typical C
    program, we tend to favor the second version.  Of course, a third
    version of the same program that is formatted in an interesting
    and/or obfuscated way, would definitely win over the first two!
    Remember, you can submit more than one entry.  See the rules for details.

    We suggest that you avoid trying for the 'smallest self-replicating'
    source.  The smallest, a zero byte entry, won in 1994.

    Programs that claim to be the smallest C source that does something, really
    better be the smallest such program or they risk being rejected because
    they do not work as documented.

    Please note that the C source below, besides lacking in obfuscation,
    is NOT the smallest C source file that when compiled and run, dumps core:

        main;

    We do not like writable strings.  That is, we don't want stuff like:

        char *T = "So many primes, so little time!";
        ...
        T[14] = ';';

    Please don't make use of this feature, even if your system allows it.
    However, initialized char arrays are OK to write over.  This is OK:

        char b[] = "Is this OK";
        b[9] = 'K';

|   There are more than one typos in this sentence.

    X client entries should be as portable as possible.  Entries that
    adapt to a wide collection of environments will be favored.  For
    example, don't depend on a particular type or size of display.
    Don't assume the use of a particular browser.  Instead assume a
    generic browser that forms to a widely used W3C standard.
    Don't assume a particular sound sub-system or video driver is installed
    in the OS. Instead, make use of a well known and widely available open
    source program (one that actually works) to display audio/visual data.

    X client entries should avoid using X related libraries and
    software that is not in wide spread use.

    This is the only guideline that contains the word fizzbin.
|   However, do you know how to play fizzbin?

    We don't like entries that use proprietary toolkits such as the M*tif,
    Xv*ew, or OpenL*ok toolkits, since not everyone has them.  Use of an
    open source toolkit that is widely and freely available instead.

    The previous guideline in this spot has been replaced by this guideline.

    X client entries should not to depend on particular items on
    .Xdefaults.  If you must do so, be sure to note the required lines
    in the program "remarks".  They should also not depend on any
    particular window manager.

    Try to avoid entries that play silent sound segments or play the
    Happy Birthday song; music that some people believe is copyrighted
    (even if such copyrights appear to be bogus and/or blatant abuses of
    the copyright system).

    While we recognize that UN*X is not a universal operating system, the
    contest does have a bias towards such systems.  In an effort to expand
    the scope of the contest, we phrase our bias in terms of POSIX P1003.1
    and P1003.2 standards.  This will allow certain non-UN*X OS users to
    submit entries.  On the other hand, this is a guideline and not a rule.
    We will not reject an entry based on some POSIX technicality.

    When dealing with OS and application environments, we suggest that you
    be reasonable with a nod towards vanilla UN*X-like systems.  POSIX will
    evolve but not as much as the contest.

    You very well might not be completely prohibited from failing to not
    partly misunderstand this particular guideline, but of course we could
|   not possibly comment.  Nevertheless, you are neither prohibited, nor
|   required to determine that this or the previous sentence is either false
|   and/or misleading.  Therefore, it might be wise to not fail to consider
|   to do so, accordingly.

|   Any complaints about the above guideline could be addressed to the
|   Speaker of the House of Commons, or to the speaker of your national
|   pariliment should you have one.

    We like programs that:

        * are as concise and small as they need to be
        * do something at least quasi-interesting
        * are portable
        * are unique or novel in their obfuscation style
        * MAKE USE OF A NUMBER OF DIFFERENT TYPES OF OBFUSCATION  <== HINT!!
        * make us laugh and/or throw up  :-)  (humor really helps!)
        * make us want to eat good chocolate.

    Some types of programs can't excel (anti-tm) in some areas.  Your
    program doesn't have to excel in all areas, but doing well in several
    areas really does help.

    You are better off explaining what your entry does in the program
    "remarks" section rather than leaving it obscure for the judges
    as we might miss something and/or be too tired to notice.

|   Please avoid this specific individual guideline, if possible.

    We freely admit that interesting, creative or humorous comments in
    the program "remarks" help your chances of winning.  If you had to
    read so many twisted entries, you too would enjoy a good laugh or two.
    We think the readers of the contest winners do as well.  We do read
    the program "remarks" during the judging process, so it is worth your
    while to write remarkable program "remarks".

    We dislike C code with trailing control-M's (\r or \015) that results
    in compilation failures.  Some non-Un*x/non-Linux tools such as
    MS Visual C and MS Visual C++ leave trailing control-M's on lines.
    Users of such tools should strip off such control-M's before submitting
    their entries.  In some cases tools have a "Save As" option that will
    prevent such trailing control-M's being added.

    One should restrict libcurses to portable features found on BSD
    or Linux curses.

    Rule 13 states any C source that fails to compile because of unescaped
    octets with the high bit set (octet value >= 128) will be rejected.
    Instead of unescaped octets, you should use \octal or \hex escapes:

                  /* 123456789 123456789 123456789 123456 */
        char *foo = "This string is 36 octets in length \263";
              /* This octet requires 4 octets of source ^^^^ */
        if (strlen(foo) == 36) printf("foo is 36 octets plus a final NUL\n");
        else printf("This code should not print this message\n");

    It is a very good idea to, in your remarks file, tell us why you
    think your entry is obfuscated.  This is particularly true if
    your entry is has some very subtle obfuscations that we might
    otherwise overlook.  <<-- Hint!

    Anyone can format their code into a dense blob.  A really clever
    author will try format their entry using a "normal" formatting style
    such that at first glance (if you squint and don't look at the details)
    the code might pass for non-obfuscated C.  Deceptive comments,
    and mis-leading formatting, in some cases, may be a plus.  On the
    other hand, a misleading code style requires more source bytes.

    If you do elect to use misleading formatting and comments, we
    suggest you remark on this point in your remarks where you talk
    about why you think your entry is obfuscated.  On the other hand,
    if you are pushing up against the size limits, you may be forced
    into creating a dense blob. Such are the trade offs that obfuscators face!

    We prefer code that can run on either a 64-bit or 32-bit processor.
    However, it is unwise to assume it will run on an i386 or x86 architecture.

    We believe that Mark Twain's remark:

        Get your facts first, then you can distort them as you please.

    is a good guideline for those writing code for the IOCCC.

    The IOCCC size tool source, iocccsize.c, is not an original work.
    Submitting an entry based on our iocccsize.c violates rule 8,
    even if you write that code!

    Rule 8 does not prohibit you from writing your own obfuscated IOCCC size tool.
    However if you do, you might wish to make your tool do something more
    interesting than simply implementing the IOCCC size tool algorithm.

    While programs that only run in a specific word size are OK.  If you have
    to pick, choose a 64-bit word size.

    If we are feeling ornery we might choose to compile your program
    for running on an Arduino or a PDP-11.  Heck, should we ever find
    an emulator of 60-bit CDC Cyber CPU running a POSIX-like OS, we
    might just try your entry on that emulator as well :-)

    If your entry MUST run only in 32-bit mode on an Intel processor, add the
    following compiler flag:

        -arch i386

    to your "how to build" make compile line.  For example:

        prog: prog.c
                ${CC} prog.c -arch i386 -o prog

    Be even more creative!

    If there are limitations in your entry, you are highly encouraged
    to note such limitations in your remarks file.  For example if your
    entry factors values up to a certain size, you might want to state:

 	This entry factors values up 2305567963945518424753102147331756070.
 	Attempting to factor larger values will produce unpredictable results.

    The judges might try to factor the value -5, so you want to might state:

 	This entry factors positive values up 2305567963945518424753102147331756070.
 	Attempting to factor large values will produce unpredictable results.

    However the judges might try to also factor 0, so you want to might state:

 	This entry factors values between 1 and 2305567963945518424753102147331756070.
 	Attempting to factor values outside that range will produce unpredictable results.

    Moreover the try to also factor 3.5 or 0x7, or Fred, so you want to might state:

 	This entry factors integers between 1 and 2305567963945518424753102147331756070.
 	Attempting to factor anything else will produce unpredictable results.

    You entry might be better off catching the attempt to factor bogus values
    and doing something interesting.  So you might want to code accordingly and state:

 	This entry factors integers between 1 and 2305567963945518424753102147331756070.
 	Attempting to factor anything else will cause the program to insult your
 	pet fish Eric.

    The judges might not have a pet fish named Eric, so might want to state:

 	This entry factors integers between 1 and 2305567963945518424753102147331756070.
 	Attempting to factor anything else will cause the program to insult your
 	pet fish Eric, or in the case that you lack such a pet, will insult the
 	pet that you do not have.

    When all other things are equal, an entry with fewer limitation will be judged
    better than an entry with lots of limitations.  So you might want to code accordingly
    and state:

 	This entry attempts to a factor value of any size provided that the program
        is given enough time and memory.  If the value is not a proper integer, the
 	program will insult a fish named Eric, even if such a fish does not exist.


ABUSING THE RULES:

    Legal abuse of the rules is somewhat encouraged.  Legal rule abuse may
    involve, but is not limited to, doing things that are technically
    allowed by the rules and yet do not fit the spirit of what we intended
    to be submitted.

    Legal rule abuse is encouraged to help promote creativity.  Rule abuse
    entries, regardless of if they receive an award, result in changes to
    the next year's rules and guidelines.

    Legal abuse of the rules is NOT an invitation to violate the rules.
    An entry that violates the rules in the opinion of the judges, WILL be
    disqualified.  RULE ABUSE CARRIES A CERTAIN LEVEL OF RISK!  If you
    have an entry that might otherwise be interesting, you might want to
    submit two versions; one that does not abuse the rules and one that
    does.

    If you intend to abuse the rules, indicate so in the program
    "remarks".  You must try to justify why you consider your rule abuse
    to be allowed under the rules.  That is, you must plead your case as
    to why your entry is valid.  Humor and/or creativity help plead a
    case.

    Abusing the web submission procedure tends to annoy us more
    than amuse us.  Spend your creative energy on content of your
    entry rather than on the submission process itself.

    We are often asked why the contest rules and guidelines seem too
    strange or contain mistakes, flaws or grammatical errors.  One reason
    is that we sometimes make genuine mistakes.  But in many cases such
    problems, flaws or areas of confusion are deliberate.  Changes to
    rules and guidelines in response to rule abuses, are done in a minimal
    fashion.  Often we will deliberately leave behind holes (or introduce
    new ones) so that future rule abuse may continue.  A cleaver author
    should be able to read them and "drive a truck through the holes" in
    the rules and guidelines.

    At the risk of stating the obvious, this contest is a parody of the
    software development process.  The rules and guidelines are only a
    small part of the overall contest.  Even so, one may think the contest
    rules and guideline process as a parody of the sometimes tragic
    mismatch between what a customer (or marketing) wants and what
    engineering delivers.  Real programmers must face obfuscated
    and sometimes conflicting specifications and requirements from marketing,
    sales, product management an even from customers themselves on a
    all too regular basis.  This is one of the reasons why the rules and
    guidelines are written in obfuscated form.


JUDGING PROCESS:

    Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll.

    Each entry submitted is given a random id number and subdirectory.  The
    entry files including, but not limited to prog.c, Makefile (that we
    form from around your "how to build" information), as well as any
    data files that you submit are all placed under their own directory.
    stored and judged from this directory.

    Any information about the authors is not read by the judges until
    the judging process is complete, and then only from entries that have
    won an award.  Because we do not read this information for entries that
    do not win, we do not know who did not win.

    The above process helps keep us biased for/against any one particular
    individual.  Therefore you MUST refrain from putting any information
    that reveals your identity in your entry.

    Now some people point out that coding style might reveal the information
    about the others.  However we consider this to be simply circumstantial
    and outside the scope of the above paragraph.

    Some people, in the past, have attempted to obfuscate their identity by
    including comments of famous Internet personalities such as Peter Honeyman
    (http://www.citi.umich.edu/u/honey/).  The judges are on to this
    trick and therefore consider any obfuscated source or data file
    claiming to be from Honeyman to not be form Honeyman.  This of course
    creates an interesting paradox known as the "obfuscated Peter Honeyman
    paradox".  Should Peter Honeyman actually submit an obfuscated entry,
    he alone is excluded from the above, as we will likely believe
    it just another attempt at confusion.  This guideline is known
    as the "Peter Honeyman is exempt" guideline.

    BTW: None of the entries claiming to be from Peter Honeyman have ever
    won an award.  So it is theoretically possible that Peter Honeyman
    did submit an entry in the past.  In the past, Peter had denied
    submitting anything to the IOCCC.  Perhaps those entries were
    submitted by one of his students?

|   Hopefully we are very CLEAR on this point!  The rules now strongly state:
|   PLEASE DO NOT put a name of an author, in an obvious way, into your
    source code, remarks, data files, etc.  The above "Peter Honeyman is
    exempt" not withstanding.

    We seemed to have digressed again ... :-)  Returning to the judging process:

    We prefer to be kept in the dark as much as you are until the final
    awards are given.  We enjoy the surprise of finding out in the end,
    who won and where they were from.

    We attempt to keep all entries anonymous, unless they win an award.
    Because the main 'prize' of winning is being announced, we make all
    attempts to send non-winners into oblivion.  We remove all non-winning
    files, and shred all related paper.  By tradition, we do not even
    reveal the number of entries that we received.

    During the judging process. a process that spans multiple sessions
    over a few weeks, post general updates from our @IOCCC twitter account.

    Once we have selected the winners, for each category we will tweet:

        category name
        name(s) of the authors (or anonymous if requested)
        twitter handle(s) (if provided and if anonymity was not requested)
        country code(s) of the author(s)

    After the initial announcement, we attempt to send Email to the
    authors of the winning entries.  One reason we do this is to give
    the authors a chance to comment on the way we have presented their
    entry.  They are given the chance to correct mistakes and typos.  We
    often accept their suggestions/comments about our remarks as well.
    This is done prior to posting the winners to the wide world.

    Judging consists of a number of elimination rounds.  During a round,
    the collection of entries are divided into two roughly equal piles;
    the pile that advances on to the next round, and the pile that does
    not.  We also re-examine the entries that were eliminated in the
    previous round.  Thus, an entry gets at least two readings.

    A reading consists of a number of actions:

        * reading the "how to build" information and forming a Makefile
        * reading prog.c, the C source
        * reviewing the "remarks" information
        * briefly looking any any supplied data files
        * passing the source thru the C pre-processor
            skipping over any #include files
        * performing a number of C beautify/cleanup edits on the source
        * passing the beautified source thru the C pre-processor
            skipping over any #include files
        * compiling/building the source
        * running the program
        * Doing other things that only IOCCC judges know about :-)

    In later rounds, other actions are performed including performing
    miscellaneous tests on the source and binary.

!   This is the guideline that goes, BING!

    Until we reduce the stack of entries down to about 25 entries, entries
    are judged on an individual basis.  An entry is set aside because it
    does not, in our opinion, meet the standard established by the round.
    When the number of entries thins to about 25 entries, we begin to form
    award categories.  Entries begin to compete with each other for awards.
    An entry will often compete in several categories.

    The actual award category list will vary depending on the types of entries
    we receive.  A typical category list might be:

        * best small one line program (see above about one line programs)
        * best small program
        * strangest/most creative source layout
        * most useful obfuscated program
        * best game that is obfuscated
        * most creatively obfuscated program
        * most deceptive C code (code with deceptive comments and source code)
        * best X client (see OUR LIKES AND DISLIKES)
        * best abuse of ISO C or ANSI C standard (see above about compilers)
        * best abuse of the C preprocessor
        * worst abuse of the rules
        * (anything else so strange that it deserves an award)

    We do not limit ourselves to this list.  For example, a few entries are so
    good/bad that they are declared winners at the start of the final round.
    We will invent awards categories for them, if necessary.

    In the final round process, we perform the difficult tasks of
    reducing the remaining entries (typically about 25) down to to about
    half that number: declaring those remaining to be winners.

    Often we are confident that the entries that make it into
    the final round are definitely better than the ones that do not
    make it.  The selection of the winners out of the final round, is
    less clear cut.

    Sometimes a final round entry is good enough to win, but is beat out
    by a similar, but slightly better entry.  For this reason, it is
    sometimes worthwhile to re-enter an improved version of an entry
    that failed to win in a previous year.  This assumes, of course,
    that the entry is worth improving in the first place!

    More than one IOCCC judge has been known to bribe another IOCCC judge
    into voting for a winning entry by offering a bit high quality chocolate.
    This technique is highly discouraged for use by non-IOCCC judges.

    More often than not, we select a small entry (usually one line), a
    strange/creative layout entry.  We sometimes also select an
    entry that abuses the contest guidelines in an interesting way,
    or that stretches the content rules that while legal, is
    nevertheless goes against the intent of the rules.

    In the end, we traditionally pick one entry as 'best'.  Sometimes such
    an entry simply far exceeds any of the other entries.  More often, the
    'best' is picked because it does well in a number of categories.

    In years past, we renamed the winning entry from prog.c to a
    name related to the submitter(s) names.  This is no longer done.
    Winning source is called prog.c  A compiled binary is called prog.


ANNOUNCEMENT OF WINNERS:

    The judges will tweet initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    from the @IOCCC twitter handle.  Non-twitter users should visit:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

    The judges will then post an initial announcement of who won, the name
    of their award, and a very brief description of the winning entry
    on the IOCCC web site:

        http://www.ioccc.org/whowon.html

    We will also attempt to submit a brief announcement story to /.:

        http://slashdot.org

    that, depending on the willingness of the /. editors, may be posted
    to their site at the same time.

    Note that initial announcement will NOT contain source.  This is because
    the winning authors are given a chance to review the judges comments,
    and test our Makefile.  This review process typically takes a few weeks.

    Sometime after the initial announcement, and once the the review
    by the winners has been completed, the winning source will be
    posted to the IOCCC web site:

        http://www.ioccc.org/years.html

        NOTE: previous winners are available at that URL

    We will also tweet, via @IOCCC, when the winning source is available.

    It is pointless to ask the IOCCC judges how many entries we receive.
    Other government TLA or FLA snooping organizations are prohibited from
    either confirming, denying or revealing any knowledge of this data point.

    Often, winning entries are published in selected magazines from around
    the world.  Winners have appeared in books ("The New Hackers Dictionary")
    and on T-Shirts.  More than one winner has been turned in a tattoo!

    Last, but not least, winners receive international fame and flames!  :-)


FOR MORE INFORMATION:

    You may contact the judges by sending Email to the following address:

|       q.2019@ioccc.org        (do not submit entries to this address)

|   You must include the words 'ioccc 2019 question' in the subject of your
    Email message when sending Email to the judges.

    Questions and comments about the contest are welcome.  Comments about
    confusing rules and guidelines are also welcome.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.

    Check out the IOCCC Web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
|       26th International Obfuscated C Code Contest Official Rules

|  Copyright (C) 2006-2018 Leonid A. Broukhis, Simon Cooper, Landon Curt Noll

All Rights Reserved.  Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from the contest judges.

    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
                b.  To darken.  2. To confuse:  his emotions obfuscated his
                judgment.  [LLat. obfuscare, to darken : ob(intensive) +
                Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
                obfuscatory adj.


| This rules file is version 2017-12-25-v25.

| Most of the changes from the previous IOCCC rule set have
| been marked with a "|" on the left hand side of the line.


GOALS OF THE CONTEST:

    * To write the most Obscure/Obfuscated C program under the rules below.
    * To show the importance of programming style, in an ironic way.
    * To stress C compilers with unusual code.
    * To illustrate some of the subtleties of the C language.
    * To provide a safe forum for poor C code.  :-)

    This IOCCC runs from:

|	2018-Dec-26 16:06:69 == 2018-Dec-26 16:07:09 UTC
    to:
|       2019-Mar-15 00:86:07 == 2019-Mar-15 01:26:07 UTC

    Until the start of this IOCCC, these rules, guidelines and iocccsize.c tool
    should be considered provisional BETA versions and may be adjusted
    at any time.

    The IOCCC submission URL is:

        https://submit.ioccc.org/

|   The submit URL should be active on or slightly before 2019-Jan-15 15:15:15 UTC.
|   Please wait to submit your entries until after that time.

    The official rules, guidelines and iocccsize.c tool will be available
    on the official IOCCC web site on or slightly before start of this IOCCC.
    Please check the IOCCC web site "How to enter" link:

 	http://www.ioccc.org/index.html#enter

    on or after the start of this IOCCC to be sure you are using the correct
    versions of these items before using the IOCCC entry submission URL.


RULES:

    To help us with the volume of entries, we ask that you follow these rules:

    1) Your entry must be a complete program.

|   2) Size rule requires your entry to satisfy BOTH rule 2a and rule 2b:

       2a) The size of your program source must be <= 4096 bytes in length.

       2b) When your program source is fed as input to the current IOCCC size
           tool, and the IOCCC size tool -i command line option is used, the
           value printed shall not exceed 2053.

       The source to the current IOCCC size tool is found at this URL:

|         http://www.ioccc.org/2019/iocccsize.c

    3) Submissions should be performed using the instructions outlined at:

           https://submit.ioccc.org/

|      The submit URL should be active on or slightly before 2019-Jan-15 15:15:15 UTC.
|      Please wait to submit your entries until after that time.

    4) If your entry is selected as a winner, it will be modified as follows:

        Your 'build' instructions will be incorporated into a makefile.

        Your source code will be the file prog.c.  The compiled binary
 	will be called prog.

    5) Your entry must not modify the content or filename of any part of your
       original entry including, but not limited to prog.c, the Makefile
       (we create from your how to build instructions), as well as any data
       files you submit.

       If you entry wishes to modify such content, it must first copy the
       file to a new filename and then modify that copy.

    6) I am not a rule, I am a free(void *man)!

|      while (!understand(ioccc(rule(you(are(number(6))))))) { ha_ha(); }

    7) The obfuscated C program must be an original work that you own.

       You (the authors) must own the contents of your submission OR
       you must have permission from the owners to submit their content
       under the Creative Commons Attribution-ShareAlike 3.0 Unported
       (CC BY-SA 3.0) license (see rule 18).

       If you submit any content that is owned by others, you MUST
       detail that ownership (i.e., who owns what) and document the
       permission you obtained.

|      Please note that the IOCCC size tool is not an original work.

    8) Entries must be received prior to the end if this IOCCC which is:

|          2019-Mar-15 08:60:07 == 2019-Mar-15 09:00:07 UTC

       A confirmation of submission will be sent to the submitter
       email address before the close of the contest.

|   9) Each person may submit up to and including 8.00000 entries per contest.
       Each entry must be submitted separately.

   10) Entries requiring human interaction to be initially compiled are
       not permitted.

   11) Programs that require special privileges (setuid, setgid, super-user,
       special owner, special group, etc.) are still highly discouraged. We
       do not guarantee these functions will behave as you expect on our test
       platforms. If your program needs special permissions please document
       them in the remarks file.

   12) Legal abuse of the rules is somewhat encouraged.  An entry that, in
       the opinion of the judges, violates the rules will be disqualified.
       Entries that attempt to abuse the rules must try to justify why
       their rule abuse is legal in the remarks file.

   13) Any C source that fails to compile because of unescaped octets with
       the high bit set (octet value >= 128) will be rejected.

   14) Any C source that fails to compile because of lines with trailing
       control-M's (i.e., lines with a tailing octet 015) will be rejected.

       Please do not put trailing control-M's on remarks file lines.
       Please check to be sure, before submitting, that you have removed
       any control-M at the end of remark file lines.

   15) When you submit your entry you must have a valid email address
       that can both send and receive email.  The online submission
       method is a two phase process that requires the use of an
       approval code. This code will be emailed to you as part of
       phase 1.

       Entries submitted without a working or valid email address will
       be disqualified.

       The judges are not responsible for delays in email, please plan
       enough time for one automated exchange of email as part of your
       submission.

       After your email address has been confirmed, the submission code will
       be valid for submitting and editing the entry for the lifetime of the
       competition.

   16) You are STRONGLY encouraged to submit a previously unpublished and
       original entry. Submissions that are similar to previous entries are
       discouraged. As we judge anonymously, submissions that have already
       been published may be disqualified.

   17) The total size of your submission: the sum of the size of the program,
       hints, comments, build and info files MUST be less than or equal
       to 1048576 octets in size.

   18) The entirety of your entry must be submitted under the Creative Commons
       Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0):

            http://creativecommons.org/licenses/by-sa/3.0/

       You must not submit anything that cannot be submitted under that license.

   19) The remarks file must be written in markdown format. See:

            http://daringfireball.net/projects/markdown/basics

       for more information.

       We currently use "Discount" to convert markdown to HTML

             http://www.pell.portland.or.us/~orc/Code/discount/

   20) The how to build instructions must be in make form.

       The target of the make file must be called prog.  The original
       C source file must be called prog.c.

       To invoke the C compiler, use ${CC}.
       To invoke the C preprocessor use ${CPP}.

       Do not assume that . (the current directory) is in the $PATH.

       Use a shell command syntax that is compatible with bash.

       Assume that commands commonly found in POSIX-like / Linux-like systems
       are available in the search path.

       Do not assume any particular given value of ${CFLAGS} or other
       commonly used make variables.

   21) Your entry must not create nor modify files above the current directory
       with the exception of the /tmp and the /var/tmp directories.  Your entry
       may create subdirectories below the current directory, or in /tmp,
       or in /var/tmp provided that "." is not the first octet in any
       directory name.

   22) Catch 22:

       Your source code, data files, remarks and program output must NOT
       identify the authors of your code.  The judges STRONGLY prefer to
       not know who is submitting entries to the IOCCC.

       Even if you are a previous IOCCC winner, catch 22 still applies.

       Identifying the authors of your entry in an obvious way anywhere
       within in your code, data, remarks or program output (unless you are
       Peter Honeyman or pretending to be Peter Honeyman) will be grounds
       for disqualification of your entry.

       Yes, Virginia, we really mean it!

   23) This prime rule number is reserved for future use.

   24) Even though 24 is not prime, you should still see rule #23.

|  25) The IOCCC rule set consists of at least 25 rules.

|  26) Rule 26 is a rule.


FOR MORE INFORMATION:

    The judging will be done by Leonid A. Broukhis, Simon Cooper,
    Landon Curt Noll.

    Please send questions or comments about the contest, to:

|       q.2019@ioccc.org       (for questions only!)

    You must include the words:

|       ioccc 2019 question

    in the subject of your EMail message when sending EMail to the judges.

    The rules and the guidelines may (and often do) change from year to
    year.  You should be sure you have the current rules and guidelines
    prior to submitting entries.  To obtain them, visit the IOCCC web page:

        http://www.ioccc.org

    It has rules, guidelines and winners of previous contests (1984 to date).

    For the updates and breaking IOCCC news, you are encouraged to follow
    the twitter handle:

        @IOCCC

    You do not have to be a twitter user to follow @IOCCC.  Non-twitter
    users should access:

        https://twitter.com/ioccc

    Non-twitter users should force their browsers to reload the above URL
    to be sure they are seeing the most recent tweets.

Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
